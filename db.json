{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1653114929472},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1653114929393},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1653114929497},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1653114929461},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1653114929414},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1653114929473},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1653114929470},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1653114929498},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1653114929502},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1653114929497},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1653114929501},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1653114929501},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1653114929503},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1653114929504},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1653114929504},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1653114929504},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1653114929503},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1653114929505},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1653114929505},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1653114929433},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1653114929442},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1653114929435},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1653114929443},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1653114929440},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1653114929441},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1653114929459},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1653114929445},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1653114929430},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1653114929429},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1653114929436},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1653114929437},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1653114929429},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1653114929433},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1653114929438},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1653114929438},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1653114929439},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1653114929443},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1653114929441},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1653114929432},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1653114929435},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1653114929479},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1653114929443},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1653114929444},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1653114929445},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1653114929479},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1653114929448},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1653114929487},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1653114929449},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1653114929448},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1653114929477},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1653114929478},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1653114929477},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1653114929427},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1653114929467},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1653114929468},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1653114929434},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1653114929469},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1653114929442},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1653114929437},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1653114929436},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1653114929446},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1653114929481},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1653114929444},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1653114929482},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1653114929482},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1653114929484},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1653114929481},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1653114929485},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1653114929484},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1653114929486},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1653114929485},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1653114929486},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1653114929485},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1653114929483},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1653114929476},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1653114929447},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1653114929476},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1653114929497},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1653114929423},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1653114929425},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1653114929464},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1653114929466},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1653114929466},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1653114929494},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1653114929492},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1653114929455},{"_id":"public/2022/05/21/hello-world/index.html","hash":"610bb48149ee3d7690d985417af9797d109b7df6","modified":1667020252861},{"_id":"public/archives/index.html","hash":"1edd705eddcb0ac1a17e18b1ff84f8fd3caca19d","modified":1667023869321},{"_id":"public/archives/2022/index.html","hash":"83ed5ae44b860d71df6b4ac54180458748654b6d","modified":1667023869321},{"_id":"public/archives/2022/05/index.html","hash":"0f25956ab0c1b4fdcce2abfa688fc6a1b60058ea","modified":1667020252861},{"_id":"public/index.html","hash":"cd36161699427389ba52c051073478708cca92ad","modified":1667023869321},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1653115568007},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1653115568007},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1653115568007},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1653115568007},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1653115568007},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1653115568007},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1653115568007},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1653115568007},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1653115568007},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1653115568007},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1653115568007},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1653115568007},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1653115568007},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1653115568007},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1653115568007},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1653115568007},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1653115568007},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1653115568007},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1653115568007},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1653115568007},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1653115568007},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1653115568007},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1653115568007},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.gitattributes","hash":"0a06233e35936dfb7efe1472917805056a159fa2","modified":1664980355379},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.stylintrc","hash":"557d72b4dcd86e66fc5c688595288cf06b12ce6c","modified":1664980355458},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.gitignore","hash":"b18b650c857471724778c1450c446b93192d8b0e","modified":1664980355411},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.travis.yml","hash":"e8e8c5607528fd55ac11dde00b6186d3ea52fdef","modified":1664980355473},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.npmignore","hash":"1744752b89ad4271612ff0a03232ed56484e592c","modified":1664980355427},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/LICENSE","hash":"e39066a824465f4d6ad5ce7903b4d683d38d2b6c","modified":1664980355489},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/README.md","hash":"13e97f83e2a85cbb809e97cd16c305b64c8851a1","modified":1664980355516},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/_config.yml","hash":"6d75d5ca5e288d86c61a450e1d2abe076cb45ce9","modified":1664980355537},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/rollup.config.js","hash":"13b61821acd9fc27131a34853037184b94ae8577","modified":1664980355644},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/index.js","hash":"19292aa9df268dbab8ac51a2a3aa7a20ac1eb00a","modified":1664980355552},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/package.json","hash":"5424c8abe79bf3dde54dfbf64f6814b31379f97b","modified":1664980355629},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/move_config.js","hash":"e310bdb9a8738e506e53a40bd3cd895008d4cd61","modified":1664980355599},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1664980355583},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.github/FUNDING.yml","hash":"186f05c1b9509a4ad957490004ff37462aedd984","modified":1664980355681},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.github/config.yml","hash":"0300d3458011582f8158a3588912dac4cb3ec21a","modified":1664980355691},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1664980356108},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/layout.ejs","hash":"84864bd6b4fc92bdd0a8ccba491fe490a8ecbf9b","modified":1664980356205},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/categories.ejs","hash":"c40f84aacdf7d33cfcb4eb9f78f331dad699abff","modified":1664980356130},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/index.ejs","hash":"77347cbb8635611d8b1fb84bde75f9dedaf8632d","modified":1664980356178},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/friends.ejs","hash":"18382cd4429588e58bf046beacaed06704832fe3","modified":1664980356152},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1664980356226},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/plain-page.ejs","hash":"39cce1936f5f0e2feb924a7af2f52a631d81b84f","modified":1664980356241},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/default.yml","hash":"7e16c460c2c3d953c3bdebdef471ea747812b7a1","modified":1664980355833},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/de.yml","hash":"cdeed93d1eb4e65195aaf97d8c517e97106ddfd5","modified":1664980355817},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1664980356288},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1664980356273},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/en.yml","hash":"7e16c460c2c3d953c3bdebdef471ea747812b7a1","modified":1664980355848},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/es.yml","hash":"a3e8d81b99f62f86b3f34708253070b8806b31c8","modified":1664980355864},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/ja.yml","hash":"d2ccb7ac8c9ff2ee721843741bb30b019d0a8083","modified":1664980355905},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/fr.yml","hash":"4a3cb84884988624943c6b0f8c1754da34943092","modified":1664980355880},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/ko.yml","hash":"7dc54c2db864e5b725b55e201030e92acc1c422e","modified":1664980355911},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/no.yml","hash":"f8d7294f0d73ec35c37c050462cb725ea25a0fcc","modified":1664980355958},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/pt.yml","hash":"b137b9aead0dc4e2c2d9217ceb270460e41f5cb3","modified":1664980355974},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/ru.yml","hash":"cdce73598db1aefb17b1c91658cfa4c906b98e24","modified":1664980355999},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/zh-CN.yml","hash":"68400b1859e58cba03b05020ac8f47b807933027","modified":1664980356052},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/nl.yml","hash":"2c289e97000c0c67636d96895aaa801c8abec0d4","modified":1664980355943},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1664980358271},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1664980358302},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/default_config.js","hash":"70d6ee032d75410d540b6789b5949739a47f0125","modified":1664980357168},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/main.js","hash":"13c57a2cec878217a5a3ee9afb6705d4c3cc0d3c","modified":1664980357440},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/zh-TW.yml","hash":"edb2654bdb684fe0f21e8d6c841496c3506006ed","modified":1664980356073},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.github/ISSUE_TEMPLATE/other.md","hash":"94ee4baf54bfa786228aafc0f2f8c17076a99a0b","modified":1664980355754},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.github/ISSUE_TEMPLATE/bug-report.md","hash":"92978683b5c4c98c413989fe56acc775f0162ddf","modified":1664980355733},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/languages/vi.yml","hash":"7d019ee795816a6a030a039d8238b71be04098fd","modified":1664980356017},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.github/ISSUE_TEMPLATE/feature-request.md","hash":"d8d4951f5f3f08660dc4ba6d1a44eb56d3b094b4","modified":1664980355739},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.github/workflows/npmpublish.yml","hash":"3ff1b124e532465ba14475f3ea8f4ec5d8856028","modified":1664980355801},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/ads.ejs","hash":"d36962c66e3653aa94cc428731dd43a7ea4f979d","modified":1664980356319},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/after-footer.ejs","hash":"17ccda6fb61f1b6df94d23db936665c00a29a85b","modified":1664980356336},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/archive.ejs","hash":"a56c8905987fa86657a9f081a89c12e5a5a5df54","modified":1664980356366},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/.github/ISSUE_TEMPLATE/question.md","hash":"6cb78a96b83ed228fb3c956f2dbc654220335ec0","modified":1664980355770},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/article.ejs","hash":"3895f24a1ba9ef5d4a024b1f45a5f30bff9f9c7c","modified":1664980356395},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1664980356429},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1664980356350},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/ayer.ejs","hash":"01ca257dde90dcadf1288a641401f6cf21a0ad43","modified":1664980356398},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/float-btns.ejs","hash":"43ba0cd1f9e898bcbd873b1e9a2d47249d6aaf77","modified":1664980356461},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/broadcast.ejs","hash":"c228fa93bcf2f8403729342854211ea976df9a9f","modified":1664980356445},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/footer.ejs","hash":"1407c1043fdb628642de9d2990921d92a3c2f078","modified":1664980356476},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/lock.ejs","hash":"bbb00715c204197e7790d08be9a29afe5976146e","modified":1664980356570},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/google-analytics.ejs","hash":"ca81abe75c80ab32d6b6c4fe65de8e74df07bef3","modified":1664980356508},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/head.ejs","hash":"61100fe248a744fab5dc71fb610992cbeff27e54","modified":1664980356524},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/katex.ejs","hash":"752666b28d5caed5e7d82d697d7546461e451d6f","modified":1664980356539},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/modal.ejs","hash":"cf441365eff1f8143e3c9ae54954d0ebe0a358e5","modified":1664980356616},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/music.ejs","hash":"cde5caf73f120b1300ec7539bbf675597688c734","modified":1664980356643},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/mathjax.ejs","hash":"d38a59e2316b8a9c233c2f41edc2a03eab2c0a2e","modified":1664980356596},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/viewer.ejs","hash":"7bcde0d6384819fd4c975a6e6e24e0919fbb1593","modified":1664980356683},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/sidebar.ejs","hash":"e3b411aef6e5f25f6c5c66b93d653ef70da8d4af","modified":1664980356664},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1664980358552},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1664980358568},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1664980359188},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/clipboard.styl","hash":"017f9b628806eeb199da2e77485cd9ac8e2117b3","modified":1664980358339},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1664980359174},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1664980359203},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/custom.styl","hash":"56276abe6cd7cbf49fbf4fd4c986733188374160","modified":1664980358349},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1664980359298},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1664980359265},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1664980359329},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1664980359234},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1664980359345},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1664980358611},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1664980358677},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1664980358699},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1664980358659},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1664980358743},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1664980358983},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1664980358958},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1664980359021},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1664980359045},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1664980358995},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1664980359063},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1664980359084},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1664980359109},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/events/index.js","hash":"2c84d99e881f5cd1ee8a406b595a4365f3aea41e","modified":1664980357189},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1664980357330},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1664980357267},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/helpers/ayer-plus-vendors.js","hash":"7b3df58faaa875d17afbf74ddef5601116f2ce3d","modified":1664980357299},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/filters/meta_generator.js","hash":"58f4c93d22e4eb9743915223444335fb6fe06d21","modified":1664980357291},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_darkmode.styl","hash":"219753a5cf40cfbd557fbde01a71f589e6de4327","modified":1664980357467},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_extend.styl","hash":"8dedef428b6ac7d629e1d1f6039b0f60dacc4c5e","modified":1664980357488},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_normalize.styl","hash":"630e719b9e805a26182a37152435d4787c0f1734","modified":1664980357543},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_remixicon.styl","hash":"ce395318edf69766fe11161c4587a97f84521d85","modified":1664980357566},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_variables.styl","hash":"910dd0682971a616e1610daec23e7ff5a556df98","modified":1664980357581},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1664980357519},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/style.styl","hash":"3941939bdb95297488d19e3e3716d5925b6eed44","modified":1664980357616},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1664980357345},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/js/ayer.js","hash":"538d48e89c9908155f16ff82aaf4c2b1122b11f4","modified":1664980358223},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/js/share.js","hash":"7edce2efe23e75e29765201dc8b00fd2a5b5c9d2","modified":1664980358239},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/albums.ejs","hash":"cfb16c9dda7a609776a28702e0c3854a52e422a7","modified":1664980356709},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/author.ejs","hash":"57738b222e00bbd110be65d300d8bed34d73b3ea","modified":1664980356731},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1664980356768},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1664980357381},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1664980357409},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/busuanzi.ejs","hash":"4647234e5c4529d754c9d0fc53ca9e9205f21443","modified":1664980356744},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1664980356837},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1664980356902},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1664980356813},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/gitalk.ejs","hash":"bc540478d35780e142b069ba2adafd5d5ce8a7b0","modified":1664980356862},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/clipboard.ejs","hash":"9f86e3d222555181a3e631a09bcdabdd44507cb8","modified":1664980356787},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1664980356930},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/justifiedGallery.ejs","hash":"4a21fd3d7335ffcd0661036fee81a927c125e2e2","modified":1664980356887},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/title.ejs","hash":"3b076a65b9847cd6e0d424f5c2874046ef51d4d9","modified":1664980356998},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/share.ejs","hash":"0a364766931f48df60b7c92fec8fde1067a93e00","modified":1664980356956},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/topping.ejs","hash":"fea793e132f627a8148059a9aee8bc33550506d1","modified":1664980357035},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1664980357018},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1664980356978},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/twikoo.ejs","hash":"63bc5c056b2db2aca479705fc94eaa7fd26a7976","modified":1664980357058},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/word.ejs","hash":"4b8e8455709debd73fba6bf3aad63378c4156dc1","modified":1664980357101},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/layout/_partial/post/valine.ejs","hash":"369396d0c5b669df7a26df95f7a1b8a52f4eea65","modified":1664980357078},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/events/lib/hello.js","hash":"2ed130e5e1c2bc021be8d755f34c4fcf61a60121","modified":1664980357220},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1664980357664},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/ads.styl","hash":"d4be39f60a81dd0e5bdd49671e7308deddc572de","modified":1664980357644},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1664980357680},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/scripts/events/lib/merge-configs.js","hash":"54836a1b41ebb32acc41839f53e1892779f66bb2","modified":1664980357236},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/archive.styl","hash":"3044bf059522e79a726265c9a2f603ec8dc4222d","modified":1664980357706},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/article.styl","hash":"94342884feac98e5ef58c9bd2781fc8f35220c1c","modified":1664980357726},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/articles.styl","hash":"39a0bc6c5cf85f0527d6ee81f6feebce8550c1dd","modified":1664980357745},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/ayer.styl","hash":"712cb4d8f3cef18dc33281bd8e9b6879efdb1687","modified":1664980357765},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1664980357816},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/footer.styl","hash":"1a4576c38ef19834a4d0a8ac887e7b55d21f2f13","modified":1664980357843},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/categories.styl","hash":"3b11d0c6c4439b0856ba81c50bd8867d5bb081da","modified":1664980357794},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/friends.styl","hash":"9dd116846c92daee1c8f80b79cab231613b164b2","modified":1664980357860},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/highlight.styl","hash":"e894b3a1aff76e84137e1e6db59a75afd0a53f52","modified":1664980357932},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1664980357887},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/justifiedGallery.styl","hash":"f2f43ae9831c3df017b35c68caa94f5eb911f697","modified":1664980357953},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1664980357911},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/lists.styl","hash":"da8a82a48852411c10e279dfee43038d46f4f273","modified":1664980357996},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/layout.styl","hash":"b81d13334cf39941792dff0e3af393fb7b8cc214","modified":1664980357974},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/navbar.styl","hash":"da34b6125de01938d11de6ad3c0fed2c75faf40a","modified":1664980358034},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1664980358015},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/pace.styl","hash":"bde7bf3577c66a3ac829410d52fa2144212282ef","modified":1664980358054},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/search.styl","hash":"f81076fc6d4a83be3371bcb79ab54d88e2605714","modified":1664980358097},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/reward.styl","hash":"a8a069ea34a0fd043832890db5341405e9f462cd","modified":1664980358079},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1664980358143},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/tocbot.styl","hash":"007bca390ec685349add74e033ff2cb90a1701bc","modified":1664980358179},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/share.styl","hash":"9ce2dd3ffdc4e170dfcb975a7158f913bc40b8d8","modified":1664980358117},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/totop.styl","hash":"9e9d8dc167ed2c332e4520cbf41244c34c1ebf64","modified":1664980358192},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source-src/css/_partial/tag.styl","hash":"87df748185edfba222c3f9a4b9ef8eee0e8e5ad3","modified":1664980358161},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1664980359282},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1664980358637},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1664980358802},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1664980359142},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1664980358490},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1664980358380},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1664980358521},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1664980358935},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1664980357136},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1664980358766},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1664980358831},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1664980358396},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1664980358458},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1664980358854},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1664980358904},{"_id":"themes/hexo-theme-ayer-master/hexo-theme-ayer-master/source/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1664980358427},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1664980495908},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1664980494212},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1664980494212},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1664980494211},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"53be9bba4abd5f4d28ddc8b0a913317531cc4877","modified":1664980495728},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1664980495671},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1664980495765},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"5424c8abe79bf3dde54dfbf64f6814b31379f97b","modified":1664980495725},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1664980495707},{"_id":"node_modules/hexo-theme-ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1664980495711},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1664980495913},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1664980495916},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1664980495911},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1664980495919},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1664980495921},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1664980495926},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1664980495929},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1664980495924},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1664980495934},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1664980495931},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1664980495935},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1664980495938},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1664980495939},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1664980495945},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1664980494340},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1664980494373},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1664980494359},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1664980494384},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1664980494411},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1664980494409},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1664980494413},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1664980494392},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1664980495660},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1664980494425},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1664980494595},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1664980494597},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1664980495696},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1664980494326},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1664980494323},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1664980494332},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1664980494336},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"ff1f8fd0dce22409038e72097a9582d1bbf4e6e0","modified":1664980494344},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1664980494352},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1664980494349},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1664980494355},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1664980494367},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1664980494370},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1664980494382},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1664980494379},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1664980494397},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1664980494388},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1664980494399},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1664980494403},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1664980494404},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1664980494421},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1664980494438},{"_id":"node_modules/hexo-theme-ayer/scripts/events/index.js","hash":"2c84d99e881f5cd1ee8a406b595a4365f3aea41e","modified":1664980495673},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1664980495724},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1664980495658},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1664980495706},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1664980495674},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1664980495644},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1664980495678},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1664980495709},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1664980495796},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1664980495798},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1664980495701},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1664980494244},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1664980495847},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1664980495849},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1664980495732},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1664980495735},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1664980494616},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1664980495620},{"_id":"node_modules/hexo-theme-ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1664980495739},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1664980495738},{"_id":"node_modules/hexo-theme-ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1664980495741},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1664980495742},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1664980495764},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1664980494319},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1664980495651},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1664980495652},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1664980495627},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1664980495654},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1664980495656},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1664980495663},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1664980495721},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1664980495693},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1664980495717},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1664980495768},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1664980495769},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1664980495775},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1664980495770},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1664980495776},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1664980495778},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1664980495834},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1664980495647},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1664980495720},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1664980494346},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1664980494330},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1664980494361},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1664980494363},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1664980494357},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1664980494365},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1664980494386},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"c09ba80cfa41aaac17f0f7ff2586e73241adab20","modified":1664980494401},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1664980494375},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1664980494377},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1664980494406},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1664980494415},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1664980494418},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1664980494423},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1664980494429},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1664980494427},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1664980494432},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1664980494435},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1664980494431},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1664980494440},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1664980495669},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1664980495703},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1664980495779},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1664980495787},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1664980495781},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1664980495782},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1664980495789},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1664980495791},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1664980495800},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1664980495785},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1664980495792},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1664980495802},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1664980495804},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1664980495805},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1664980495807},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1664980495809},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1664980495815},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1664980495813},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1664980495812},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1664980495822},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1664980495830},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1664980495825},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1664980495820},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1664980495832},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1664980495817},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1664980495827},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1664980495841},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1664980495839},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1664980495844},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1664980494684},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1664980494802},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1664980495640},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1664980495689},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1664980494313},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1664980495890},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1664980495895},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1664980495613},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1664980495762},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1664980494764},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1664980494892},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1664980494581},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1664980495880},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1664980494967},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1664980495593},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1664980495859},{"_id":"public/search.xml","hash":"a6db6e41d3918a46269b7a8f98fa20586dbd7737","modified":1667023869321},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1664981030419},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1664981030419},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1664981030419},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1664981030419},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1664981030419},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1664981030419},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1664981030419},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1664981030419},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1664981030419},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1664981030419},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1664981030419},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1664981030419},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1664981030419},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1664981030419},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1664981030419},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1664981030419},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1664981030419},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1664981030419},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1664981030419},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1664981030419},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1664981030419},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1664981030419},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1664981030419},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1664981030419},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1664981030419},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1664981030419},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1664981030419},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1664981030419},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1664981030419},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1664981030419},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1664981030419},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1664981030419},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1664981030419},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1664981030419},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1664981030419},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1664981030419},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1664981030419},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1664981030419},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1664981030419},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1664981030419},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1664981030419},{"_id":"public/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1664981030419},{"_id":"source/_posts/page.md","hash":"9ab4d4cb553eec5fcd04ee9cd6512eb3e542ef32","modified":1667020432467},{"_id":"public/2022/10/29/page/index.html","hash":"f3aa0f542de0700a0415651d85531fc0c05350c7","modified":1667020527834},{"_id":"public/archives/2022/10/index.html","hash":"3788f4b4ccf44f34572c2eebcecef26c1d35788d","modified":1667023869321},{"_id":"source/_posts/ByteBuffer.md","hash":"b7abd3035188461c76d72b5601aab734ecc2212a","modified":1667020978066},{"_id":"source/_posts/Channel.md","hash":"f97ec4d83316c458660c75eab09e96c0c866609c","modified":1667020995104},{"_id":"source/_posts/netty.md","hash":"7dfdfee94e7e7eade26384c6f6eaa2e8f35d5dd0","modified":1667020905447},{"_id":"source/_posts/EventLoopGroup.md","hash":"f3ae2a45d42710f6bfa5d282bbb4aa289bea48de","modified":1667020986450},{"_id":"source/_posts/Pipeline和ChannelHandler.md","hash":"bd907c2209e58c2aad911d573fea48b9269ded8d","modified":1667021001712},{"_id":"source/_posts/netty的一些概念（二）.md","hash":"a5d5dccd251a990b7a0de4b00802aedca46bbc9a","modified":1667020971201},{"_id":"source/_posts/netty的一些概念（一）.md","hash":"fd3357a61b5df02f58ade09e27bc66a98c930ee3","modified":1667020928504},{"_id":"public/2022/10/29/EventLoopGroup/index.html","hash":"c45b85339756cd7d05fa615a5fadb2ea7d8d8d55","modified":1667023869321},{"_id":"public/2022/10/29/Channel/index.html","hash":"303bc14330b6e798f075e5518721b8d41b134303","modified":1667022425649},{"_id":"public/2022/10/29/netty/index.html","hash":"8da56a3c94f53dc31c26bc78b341ed82a165ef90","modified":1667022425649},{"_id":"public/2022/10/29/Pipeline和ChannelHandler/index.html","hash":"7cee1fd0b93fe39ad65ae79ea26fb701b84677e3","modified":1667022425649},{"_id":"public/2022/10/29/netty的一些概念（一）/index.html","hash":"05da8e1250f6a1752f7f031b688346bcf9d2bf85","modified":1667022425649},{"_id":"public/2022/10/29/netty的一些概念（二）/index.html","hash":"51d843c01f8f12eae02b55589dccf5cbe1e459a8","modified":1667022425649},{"_id":"public/2022/10/29/ByteBuffer/index.html","hash":"2803cfea170f1a8d40c34498832e587539b26c8b","modified":1667022425649},{"_id":"source/friends/index.md","hash":"9e33de96355ac69d813ee7249c86265985d02628","modified":1667022081463},{"_id":"source/tags/index.md","hash":"a727fda9b80e340f2052e807a56501f47888e77c","modified":1667022177151},{"_id":"source/categories/index.md","hash":"0ae5a83f4d9f8e55c9b8f1f84138b83ea90815fa","modified":1667022157372},{"_id":"source/photos/index.md","hash":"671e4ac9f85f2870ebb4b90b1a4129cb805ad3eb","modified":1667022047494},{"_id":"public/photos/index.html","hash":"7aed775880c6d9fae6d499a2216ccf957e491875","modified":1667022425649},{"_id":"public/friends/index.html","hash":"497937a603388cf340ca6df8a074edfa8b0203c6","modified":1667022425649},{"_id":"public/tags/index.html","hash":"5dec7ca2d1639bb84ab4ac4181b6949df7aeb845","modified":1667022425649},{"_id":"public/categories/index.html","hash":"eccb6a74ea5bcd59dba2f3f2a379982ac5817ca8","modified":1667022425649},{"_id":"public/baidusitemap.xml","hash":"60f23c59b77d35d6abdd6ab3848ca297a3199dc1","modified":1667023869321},{"_id":"public/sitemap.xml","hash":"4055737fa74d0d939e602945bf608cbc89c21f99","modified":1667023869321},{"_id":"source/_posts/java.md","hash":"c07e7da8eeedbea3df6c54e43210afd97980b1d5","modified":1667023850779},{"_id":"public/2022/10/29/java/index.html","hash":"fd2934dd73953c7f39c31a129f242d598a4fbeb4","modified":1667023869321}],"Category":[],"Data":[],"Page":[{"title":"Gallery","albums":[["img_url","img_caption"],["img_url","img_caption"]],"_content":"","source":"photos/index.md","raw":"---\ntitle: Gallery\n\nalbums: [[\"img_url\", \"img_caption\"], [\"img_url\", \"img_caption\"]]\n---","date":"2022-10-29T05:40:47.494Z","updated":"2022-10-29T05:40:47.494Z","path":"photos/index.html","comments":1,"layout":"page","_id":"cl9thzs4m00006wtw1x4dbjn4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ntype: friends\nlayout: \"friends\"\n---","date":"2022-10-29T05:41:21.463Z","updated":"2022-10-29T05:41:21.463Z","path":"friends/index.html","comments":1,"_id":"cl9thzs4y00016wtw5uq3hatt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2022-10-29T05:42:37.372Z","updated":"2022-10-29T05:42:37.372Z","path":"categories/index.html","comments":1,"_id":"cl9thzs5400026wtw8fcqeran","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---","date":"2022-10-29T05:42:57.151Z","updated":"2022-10-29T05:42:57.151Z","path":"tags/index.html","comments":1,"_id":"cl9thzs5500036wtw6cvbdg1n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"## 目录\n\n*   [ByteBuffer](#bytebuffer)\n\n*   [ByteBuffer 分析](#bytebuffer-分析)\n\n*   [ByteBuf 读写操作](#bytebuf-读写操作)\n\n    *   [分配缓冲区](#分配缓冲区)\n\n    *   [写操作](#写操作)\n\n    *   [读操作](#读操作)\n\n*   [ByteBuf 动态扩容](#bytebuf-动态扩容)\n\n*   [最后](#最后)\n\n# ByteBuffer\n\n# ByteBuffer 分析\n\n在分析 ByteBuf 之前，先简单讲下 ByteBuffer 类的操作。便于更好理解 ByteBuf 。\n\nByteBuffer 的读写操作共用一个位置指针，读写过程通过以下代码案例分析：\n\n// 分配一个缓冲区，并指定大小\n\nByteBuffer buffer = ByteBuffer.allocate(100);\n\n// 设置当前最大缓存区大小限制\n\nbuffer.limit(15);\n\nSystem.out.println(String.format(\"allocate: pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\nString content = \"ytao公众号\";\n\n// 向缓冲区写入数据\n\nbuffer.put(content.getBytes());\n\nSystem.out.println(String.format(\"put: pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\n复制代码\n\n其中打印了缓冲区三个参数，分别是：\n\n*   position 读写指针位置\n\n*   limit 当前缓存区大小限制\n\n*   capacity 缓冲区大小\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed115bf0db\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n当我们写入内容后，读写指针值为 13，`ytao公众号`英文字符占 1 个 byte，每个中文占 4 个 byte，刚好 13，小于设置的当前缓冲区大小 15。\n\n接下来，读取内容里的 ytao 数据：\n\nbuffer.flip();\n\nSystem.out.println(String.format(\"flip: pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\nbyte\\[] readBytes = new byte\\[4];\n\nbuffer.get(readBytes);\n\nSystem.out.println(String.format(\"get(4): pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\nString readContent = new String(readBytes);\n\nSystem.out.println(\"readContent:\"+readContent);\n\n复制代码\n\n读取内容需要创建个 byte 数组来接收，并制定接收的数据大小。\n\n在写入数据后再读取内容，必须主动调用`ByteBuffer#flip`或`ByteBuffer#clear`。\n\n`ByteBuffer#flip`它会将写入数据后的指针位置值作为当前缓冲区大小，再将指针位置归零。会使写入数据的缓冲区改为待取数据的缓冲区，也就是说，读取数据会从刚写入的数据第一个索引作为读取数据的起始索引。\n\n`ByteBuffer#flip`相关源码：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed37365971\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n`ByteBuffer#clear`则会重置 limit 为默认值，与 capacity 大小相同。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed69afb054\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n接下读取剩余部分内容：\n\n第二次读取的时候，可使用`buffer#remaining`来获取大于或等于剩下的内容的字节大小，该函数实现为`limit - position`，所以当前缓冲区域一定在这个值范围内。\n\nreadBytes = new byte\\[buffer.remaining()];\n\nbuffer.get(readBytes);\n\nSystem.out.println(String.format(\"get(remaining): pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eda7c816ed\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n以上操作过程中，索引变化如图：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edcf975805\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n# ByteBuf 读写操作\n\nByteBuf 有读写指针是分开的，分别是`buf#readerIndex`和`buf#writerIndex`，当前缓冲器大小`buf#capacity`。\n\n这里缓冲区被两个指针索引和容量划分为三个区域：\n\n*   0 -> readerIndex 为已读缓冲区域，已读区域可重用节约内存，readerIndex 值大于或等于 0\n\n*   readerIndex -> writerIndex 为可读缓冲区域，writerIndex 值大于或等于 readerIndex\n\n*   writerIndex -> capacity 为可写缓冲区域，capacity 值大于或等于 writerIndex\n\n如下图所示：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edff08c607\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n## 分配缓冲区\n\nByteBuf 分配一个缓冲区，仅仅给定一个初始值就可以。默认是 256。初始值不像 ByteBuffer 一样是最大值，ByteBuf 的最大值是`Integer.MAX_VALUE`\n\nByteBuf buf = Unpooled.buffer(13);\n\nSystem.out.println(String.format(\"init: ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee1f9e8206\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n## 写操作\n\nByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的写操作支持多种类型，有以下多个API：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee437cecb5\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n写入字节数组类型：\n\nString content = \"ytao公众号\";\n\nbuf.writeBytes(content.getBytes());\n\nSystem.out.println(String.format(\"write: ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee65386cee\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n索引示意图：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee883fa765\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n## 读操作\n\n一样的，ByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的读操作支持多种类型，有以下多个API：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eead03c33c\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n从当前 readerIndex 位置读取四个字节内容：\n\nbyte\\[] dst = new byte\\[4];\n\nbuf.readBytes(dst);\n\nSystem.out.println(new String(dst));\n\nSystem.out.println(String.format(\"read(4): ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eed607ebd0\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n索引示意图：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eef8a486f4\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n# ByteBuf 动态扩容\n\n通过上面的 ByteBuffer 分配缓冲区例子，向里面添加 \\[ytao公众号ytao公众号] 内容，使写入的内容大于 limit 的值。\n\nByteBuffer buffer = ByteBuffer.allocate(100);\n\nbuffer.limit(15);\n\nString content = \"ytao公众号ytao公众号\";\n\nbuffer.put(content.getBytes());\n\n复制代码\n\n运行结果异常：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef1d20afa5\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n内容字节大小超过了 limit 的值时，缓冲区溢出异常，所以我们每次写入数据前，得检查缓区大小是否有足够空间，这样对编码上来说，不是一个好的体验。\n\n使用 ByteBuf 添加同样的内容，给定同样的初始容器大小。\n\nByteBuf buf = Unpooled.buffer(15);\n\nString content = \"ytao公众号ytao公众号\";\n\nbuf.writeBytes(content.getBytes());\n\nSystem.out.println(String.format(\"write: ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印运行结果:\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef3c41d8b4\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n通过上面打印信息，可以看到 cap 从设置的 15 变为了 64，当我们容器大小不够时，就是进行扩容，接下来我们分析扩容过程中是如何做的。 进入 writeBytes 里面：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef5d5fc8ac\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n校验写入内容长度：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef82dfde30\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n在可写区域检查里：\n\n*   如果写入内容为空，抛出非法参数异常。\n\n*   如果写入内容大小小于或等于可写区域大小，则返回当前缓冲区，当中的`writableBytes()`函数为可写区域大小`capacity - writerIndex`\n\n*   如果写入内容大小大于最大可写区域大小，则抛出索引越界异常。\n\n*   最后剩下条件的就是写入内容大小大于可写区域，小于最大区域大小，则分配一个新的缓冲区域。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efae6ef789\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n在容量不足，重新分配缓冲区的里面，以 4M 为阀门：\n\n*   如果待写内容刚好为 4M, 那么就分配 4M 的缓冲区。\n\n*   如果待写内容超过这个阀门且与阀门值之和不大于最大容量值，就分配(阀门值+内容大小值)的缓冲区；如果超过这个阀门且与阀门值之和大于最大容量值，则分配最大容量的缓冲区。\n\n*   如果待写内容不超过阀门值且大于 64，那么待分配缓冲区大小就以 64 的大小进行倍增，直到相等或大于待写内容。\n\n*   如果待写内容不超过阀门值且不大于 64，则返回待分配缓冲区大小为 64。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efd9e86adb\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n# 最后\n\n> Netty 实现的缓冲区，八个基本类型中，除了布尔类型，其他7种都有自己对应的 Buffer，但是实际使用过程中， ByteBuf 才是我们尝试用的，它可兼容任何类型。ByteBuf 在 Netty 体系中是最基础也是最重要的一员，要想更好掌握和使用 Netty，先理解并掌握 ByteBuf 是必需条件之一。\n","source":"_posts/ByteBuffer.md","raw":"## 目录\n\n*   [ByteBuffer](#bytebuffer)\n\n*   [ByteBuffer 分析](#bytebuffer-分析)\n\n*   [ByteBuf 读写操作](#bytebuf-读写操作)\n\n    *   [分配缓冲区](#分配缓冲区)\n\n    *   [写操作](#写操作)\n\n    *   [读操作](#读操作)\n\n*   [ByteBuf 动态扩容](#bytebuf-动态扩容)\n\n*   [最后](#最后)\n\n# ByteBuffer\n\n# ByteBuffer 分析\n\n在分析 ByteBuf 之前，先简单讲下 ByteBuffer 类的操作。便于更好理解 ByteBuf 。\n\nByteBuffer 的读写操作共用一个位置指针，读写过程通过以下代码案例分析：\n\n// 分配一个缓冲区，并指定大小\n\nByteBuffer buffer = ByteBuffer.allocate(100);\n\n// 设置当前最大缓存区大小限制\n\nbuffer.limit(15);\n\nSystem.out.println(String.format(\"allocate: pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\nString content = \"ytao公众号\";\n\n// 向缓冲区写入数据\n\nbuffer.put(content.getBytes());\n\nSystem.out.println(String.format(\"put: pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\n复制代码\n\n其中打印了缓冲区三个参数，分别是：\n\n*   position 读写指针位置\n\n*   limit 当前缓存区大小限制\n\n*   capacity 缓冲区大小\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed115bf0db\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n当我们写入内容后，读写指针值为 13，`ytao公众号`英文字符占 1 个 byte，每个中文占 4 个 byte，刚好 13，小于设置的当前缓冲区大小 15。\n\n接下来，读取内容里的 ytao 数据：\n\nbuffer.flip();\n\nSystem.out.println(String.format(\"flip: pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\nbyte\\[] readBytes = new byte\\[4];\n\nbuffer.get(readBytes);\n\nSystem.out.println(String.format(\"get(4): pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\nString readContent = new String(readBytes);\n\nSystem.out.println(\"readContent:\"+readContent);\n\n复制代码\n\n读取内容需要创建个 byte 数组来接收，并制定接收的数据大小。\n\n在写入数据后再读取内容，必须主动调用`ByteBuffer#flip`或`ByteBuffer#clear`。\n\n`ByteBuffer#flip`它会将写入数据后的指针位置值作为当前缓冲区大小，再将指针位置归零。会使写入数据的缓冲区改为待取数据的缓冲区，也就是说，读取数据会从刚写入的数据第一个索引作为读取数据的起始索引。\n\n`ByteBuffer#flip`相关源码：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed37365971\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n`ByteBuffer#clear`则会重置 limit 为默认值，与 capacity 大小相同。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed69afb054\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n接下读取剩余部分内容：\n\n第二次读取的时候，可使用`buffer#remaining`来获取大于或等于剩下的内容的字节大小，该函数实现为`limit - position`，所以当前缓冲区域一定在这个值范围内。\n\nreadBytes = new byte\\[buffer.remaining()];\n\nbuffer.get(readBytes);\n\nSystem.out.println(String.format(\"get(remaining): pos=%s lim=%s cap=%s\", buffer.position(), buffer.limit(), buffer.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eda7c816ed\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n以上操作过程中，索引变化如图：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edcf975805\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n# ByteBuf 读写操作\n\nByteBuf 有读写指针是分开的，分别是`buf#readerIndex`和`buf#writerIndex`，当前缓冲器大小`buf#capacity`。\n\n这里缓冲区被两个指针索引和容量划分为三个区域：\n\n*   0 -> readerIndex 为已读缓冲区域，已读区域可重用节约内存，readerIndex 值大于或等于 0\n\n*   readerIndex -> writerIndex 为可读缓冲区域，writerIndex 值大于或等于 readerIndex\n\n*   writerIndex -> capacity 为可写缓冲区域，capacity 值大于或等于 writerIndex\n\n如下图所示：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edff08c607\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n## 分配缓冲区\n\nByteBuf 分配一个缓冲区，仅仅给定一个初始值就可以。默认是 256。初始值不像 ByteBuffer 一样是最大值，ByteBuf 的最大值是`Integer.MAX_VALUE`\n\nByteBuf buf = Unpooled.buffer(13);\n\nSystem.out.println(String.format(\"init: ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee1f9e8206\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n## 写操作\n\nByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的写操作支持多种类型，有以下多个API：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee437cecb5\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n写入字节数组类型：\n\nString content = \"ytao公众号\";\n\nbuf.writeBytes(content.getBytes());\n\nSystem.out.println(String.format(\"write: ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee65386cee\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n索引示意图：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee883fa765\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n## 读操作\n\n一样的，ByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的读操作支持多种类型，有以下多个API：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eead03c33c\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n从当前 readerIndex 位置读取四个字节内容：\n\nbyte\\[] dst = new byte\\[4];\n\nbuf.readBytes(dst);\n\nSystem.out.println(new String(dst));\n\nSystem.out.println(String.format(\"read(4): ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印结果：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eed607ebd0\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n索引示意图：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eef8a486f4\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n# ByteBuf 动态扩容\n\n通过上面的 ByteBuffer 分配缓冲区例子，向里面添加 \\[ytao公众号ytao公众号] 内容，使写入的内容大于 limit 的值。\n\nByteBuffer buffer = ByteBuffer.allocate(100);\n\nbuffer.limit(15);\n\nString content = \"ytao公众号ytao公众号\";\n\nbuffer.put(content.getBytes());\n\n复制代码\n\n运行结果异常：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef1d20afa5\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n内容字节大小超过了 limit 的值时，缓冲区溢出异常，所以我们每次写入数据前，得检查缓区大小是否有足够空间，这样对编码上来说，不是一个好的体验。\n\n使用 ByteBuf 添加同样的内容，给定同样的初始容器大小。\n\nByteBuf buf = Unpooled.buffer(15);\n\nString content = \"ytao公众号ytao公众号\";\n\nbuf.writeBytes(content.getBytes());\n\nSystem.out.println(String.format(\"write: ridx=%s widx=%s cap=%s\", buf.readerIndex(), buf.writerIndex(), buf.capacity()));\n\n复制代码\n\n打印运行结果:\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef3c41d8b4\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n通过上面打印信息，可以看到 cap 从设置的 15 变为了 64，当我们容器大小不够时，就是进行扩容，接下来我们分析扩容过程中是如何做的。 进入 writeBytes 里面：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef5d5fc8ac\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n校验写入内容长度：\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef82dfde30\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n在可写区域检查里：\n\n*   如果写入内容为空，抛出非法参数异常。\n\n*   如果写入内容大小小于或等于可写区域大小，则返回当前缓冲区，当中的`writableBytes()`函数为可写区域大小`capacity - writerIndex`\n\n*   如果写入内容大小大于最大可写区域大小，则抛出索引越界异常。\n\n*   最后剩下条件的就是写入内容大小大于可写区域，小于最大区域大小，则分配一个新的缓冲区域。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efae6ef789\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n在容量不足，重新分配缓冲区的里面，以 4M 为阀门：\n\n*   如果待写内容刚好为 4M, 那么就分配 4M 的缓冲区。\n\n*   如果待写内容超过这个阀门且与阀门值之和不大于最大容量值，就分配(阀门值+内容大小值)的缓冲区；如果超过这个阀门且与阀门值之和大于最大容量值，则分配最大容量的缓冲区。\n\n*   如果待写内容不超过阀门值且大于 64，那么待分配缓冲区大小就以 64 的大小进行倍增，直到相等或大于待写内容。\n\n*   如果待写内容不超过阀门值且不大于 64，则返回待分配缓冲区大小为 64。\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efd9e86adb\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n# 最后\n\n> Netty 实现的缓冲区，八个基本类型中，除了布尔类型，其他7种都有自己对应的 Buffer，但是实际使用过程中， ByteBuf 才是我们尝试用的，它可兼容任何类型。ByteBuf 在 Netty 体系中是最基础也是最重要的一员，要想更好掌握和使用 Netty，先理解并掌握 ByteBuf 是必需条件之一。\n","slug":"ByteBuffer","published":1,"date":"2022-10-29T05:24:00.601Z","updated":"2022-10-29T05:22:58.066Z","_id":"cl9thabay0000xotwf0ul8ai8","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p>  <a href=\"#bytebuffer\">ByteBuffer</a></p>\n</li>\n<li><p>  <a href=\"#bytebuffer-%E5%88%86%E6%9E%90\">ByteBuffer 分析</a></p>\n</li>\n<li><p><a href=\"#bytebuf-%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C\">ByteBuf 读写操作</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%88%86%E9%85%8D%E7%BC%93%E5%86%B2%E5%8C%BA\">分配缓冲区</a></p>\n</li>\n<li><p>  <a href=\"#%E5%86%99%E6%93%8D%E4%BD%9C\">写操作</a></p>\n</li>\n<li><p>  <a href=\"#%E8%AF%BB%E6%93%8D%E4%BD%9C\">读操作</a></p>\n</li>\n</ul>\n</li>\n<li><p>  <a href=\"#bytebuf-%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9\">ByteBuf 动态扩容</a></p>\n</li>\n<li><p>  <a href=\"#%E6%9C%80%E5%90%8E\">最后</a></p>\n</li>\n</ul>\n<h1 id=\"ByteBuffer\"><a href=\"#ByteBuffer\" class=\"headerlink\" title=\"ByteBuffer\"></a>ByteBuffer</h1><h1 id=\"ByteBuffer-分析\"><a href=\"#ByteBuffer-分析\" class=\"headerlink\" title=\"ByteBuffer 分析\"></a>ByteBuffer 分析</h1><p>在分析 ByteBuf 之前，先简单讲下 ByteBuffer 类的操作。便于更好理解 ByteBuf 。</p>\n<p>ByteBuffer 的读写操作共用一个位置指针，读写过程通过以下代码案例分析：</p>\n<p>// 分配一个缓冲区，并指定大小</p>\n<p>ByteBuffer buffer = ByteBuffer.allocate(100);</p>\n<p>// 设置当前最大缓存区大小限制</p>\n<p>buffer.limit(15);</p>\n<p>System.out.println(String.format(“allocate: pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>String content = “ytao公众号”;</p>\n<p>// 向缓冲区写入数据</p>\n<p>buffer.put(content.getBytes());</p>\n<p>System.out.println(String.format(“put: pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>复制代码</p>\n<p>其中打印了缓冲区三个参数，分别是：</p>\n<ul>\n<li><p>  position 读写指针位置</p>\n</li>\n<li><p>  limit 当前缓存区大小限制</p>\n</li>\n<li><p>  capacity 缓冲区大小</p>\n</li>\n</ul>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed115bf0db~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>当我们写入内容后，读写指针值为 13，<code>ytao公众号</code>英文字符占 1 个 byte，每个中文占 4 个 byte，刚好 13，小于设置的当前缓冲区大小 15。</p>\n<p>接下来，读取内容里的 ytao 数据：</p>\n<p>buffer.flip();</p>\n<p>System.out.println(String.format(“flip: pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>byte[] readBytes = new byte[4];</p>\n<p>buffer.get(readBytes);</p>\n<p>System.out.println(String.format(“get(4): pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>String readContent = new String(readBytes);</p>\n<p>System.out.println(“readContent:”+readContent);</p>\n<p>复制代码</p>\n<p>读取内容需要创建个 byte 数组来接收，并制定接收的数据大小。</p>\n<p>在写入数据后再读取内容，必须主动调用<code>ByteBuffer#flip</code>或<code>ByteBuffer#clear</code>。</p>\n<p><code>ByteBuffer#flip</code>它会将写入数据后的指针位置值作为当前缓冲区大小，再将指针位置归零。会使写入数据的缓冲区改为待取数据的缓冲区，也就是说，读取数据会从刚写入的数据第一个索引作为读取数据的起始索引。</p>\n<p><code>ByteBuffer#flip</code>相关源码：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed37365971~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><code>ByteBuffer#clear</code>则会重置 limit 为默认值，与 capacity 大小相同。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed69afb054~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>接下读取剩余部分内容：</p>\n<p>第二次读取的时候，可使用<code>buffer#remaining</code>来获取大于或等于剩下的内容的字节大小，该函数实现为<code>limit - position</code>，所以当前缓冲区域一定在这个值范围内。</p>\n<p>readBytes = new byte[buffer.remaining()];</p>\n<p>buffer.get(readBytes);</p>\n<p>System.out.println(String.format(“get(remaining): pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eda7c816ed~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>以上操作过程中，索引变化如图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edcf975805~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h1 id=\"ByteBuf-读写操作\"><a href=\"#ByteBuf-读写操作\" class=\"headerlink\" title=\"ByteBuf 读写操作\"></a>ByteBuf 读写操作</h1><p>ByteBuf 有读写指针是分开的，分别是<code>buf#readerIndex</code>和<code>buf#writerIndex</code>，当前缓冲器大小<code>buf#capacity</code>。</p>\n<p>这里缓冲区被两个指针索引和容量划分为三个区域：</p>\n<ul>\n<li><p>  0 -&gt; readerIndex 为已读缓冲区域，已读区域可重用节约内存，readerIndex 值大于或等于 0</p>\n</li>\n<li><p>  readerIndex -&gt; writerIndex 为可读缓冲区域，writerIndex 值大于或等于 readerIndex</p>\n</li>\n<li><p>  writerIndex -&gt; capacity 为可写缓冲区域，capacity 值大于或等于 writerIndex</p>\n</li>\n</ul>\n<p>如下图所示：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edff08c607~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"分配缓冲区\"><a href=\"#分配缓冲区\" class=\"headerlink\" title=\"分配缓冲区\"></a>分配缓冲区</h2><p>ByteBuf 分配一个缓冲区，仅仅给定一个初始值就可以。默认是 256。初始值不像 ByteBuffer 一样是最大值，ByteBuf 的最大值是<code>Integer.MAX_VALUE</code></p>\n<p>ByteBuf buf = Unpooled.buffer(13);</p>\n<p>System.out.println(String.format(“init: ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee1f9e8206~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"写操作\"><a href=\"#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h2><p>ByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的写操作支持多种类型，有以下多个API：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee437cecb5~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>写入字节数组类型：</p>\n<p>String content = “ytao公众号”;</p>\n<p>buf.writeBytes(content.getBytes());</p>\n<p>System.out.println(String.format(“write: ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee65386cee~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>索引示意图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee883fa765~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"读操作\"><a href=\"#读操作\" class=\"headerlink\" title=\"读操作\"></a>读操作</h2><p>一样的，ByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的读操作支持多种类型，有以下多个API：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eead03c33c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>从当前 readerIndex 位置读取四个字节内容：</p>\n<p>byte[] dst = new byte[4];</p>\n<p>buf.readBytes(dst);</p>\n<p>System.out.println(new String(dst));</p>\n<p>System.out.println(String.format(“read(4): ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eed607ebd0~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>索引示意图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eef8a486f4~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h1 id=\"ByteBuf-动态扩容\"><a href=\"#ByteBuf-动态扩容\" class=\"headerlink\" title=\"ByteBuf 动态扩容\"></a>ByteBuf 动态扩容</h1><p>通过上面的 ByteBuffer 分配缓冲区例子，向里面添加 [ytao公众号ytao公众号] 内容，使写入的内容大于 limit 的值。</p>\n<p>ByteBuffer buffer = ByteBuffer.allocate(100);</p>\n<p>buffer.limit(15);</p>\n<p>String content = “ytao公众号ytao公众号”;</p>\n<p>buffer.put(content.getBytes());</p>\n<p>复制代码</p>\n<p>运行结果异常：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef1d20afa5~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>内容字节大小超过了 limit 的值时，缓冲区溢出异常，所以我们每次写入数据前，得检查缓区大小是否有足够空间，这样对编码上来说，不是一个好的体验。</p>\n<p>使用 ByteBuf 添加同样的内容，给定同样的初始容器大小。</p>\n<p>ByteBuf buf = Unpooled.buffer(15);</p>\n<p>String content = “ytao公众号ytao公众号”;</p>\n<p>buf.writeBytes(content.getBytes());</p>\n<p>System.out.println(String.format(“write: ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印运行结果:</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef3c41d8b4~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>通过上面打印信息，可以看到 cap 从设置的 15 变为了 64，当我们容器大小不够时，就是进行扩容，接下来我们分析扩容过程中是如何做的。 进入 writeBytes 里面：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef5d5fc8ac~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>校验写入内容长度：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef82dfde30~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在可写区域检查里：</p>\n<ul>\n<li><p>  如果写入内容为空，抛出非法参数异常。</p>\n</li>\n<li><p>  如果写入内容大小小于或等于可写区域大小，则返回当前缓冲区，当中的<code>writableBytes()</code>函数为可写区域大小<code>capacity - writerIndex</code></p>\n</li>\n<li><p>  如果写入内容大小大于最大可写区域大小，则抛出索引越界异常。</p>\n</li>\n<li><p>  最后剩下条件的就是写入内容大小大于可写区域，小于最大区域大小，则分配一个新的缓冲区域。</p>\n</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efae6ef789~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在容量不足，重新分配缓冲区的里面，以 4M 为阀门：</p>\n<ul>\n<li><p>  如果待写内容刚好为 4M, 那么就分配 4M 的缓冲区。</p>\n</li>\n<li><p>  如果待写内容超过这个阀门且与阀门值之和不大于最大容量值，就分配(阀门值+内容大小值)的缓冲区；如果超过这个阀门且与阀门值之和大于最大容量值，则分配最大容量的缓冲区。</p>\n</li>\n<li><p>  如果待写内容不超过阀门值且大于 64，那么待分配缓冲区大小就以 64 的大小进行倍增，直到相等或大于待写内容。</p>\n</li>\n<li><p>  如果待写内容不超过阀门值且不大于 64，则返回待分配缓冲区大小为 64。</p>\n</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efd9e86adb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><blockquote>\n<p>Netty 实现的缓冲区，八个基本类型中，除了布尔类型，其他7种都有自己对应的 Buffer，但是实际使用过程中， ByteBuf 才是我们尝试用的，它可兼容任何类型。ByteBuf 在 Netty 体系中是最基础也是最重要的一员，要想更好掌握和使用 Netty，先理解并掌握 ByteBuf 是必需条件之一。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p>  <a href=\"#bytebuffer\">ByteBuffer</a></p>\n</li>\n<li><p>  <a href=\"#bytebuffer-%E5%88%86%E6%9E%90\">ByteBuffer 分析</a></p>\n</li>\n<li><p><a href=\"#bytebuf-%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C\">ByteBuf 读写操作</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%88%86%E9%85%8D%E7%BC%93%E5%86%B2%E5%8C%BA\">分配缓冲区</a></p>\n</li>\n<li><p>  <a href=\"#%E5%86%99%E6%93%8D%E4%BD%9C\">写操作</a></p>\n</li>\n<li><p>  <a href=\"#%E8%AF%BB%E6%93%8D%E4%BD%9C\">读操作</a></p>\n</li>\n</ul>\n</li>\n<li><p>  <a href=\"#bytebuf-%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9\">ByteBuf 动态扩容</a></p>\n</li>\n<li><p>  <a href=\"#%E6%9C%80%E5%90%8E\">最后</a></p>\n</li>\n</ul>\n<h1 id=\"ByteBuffer\"><a href=\"#ByteBuffer\" class=\"headerlink\" title=\"ByteBuffer\"></a>ByteBuffer</h1><h1 id=\"ByteBuffer-分析\"><a href=\"#ByteBuffer-分析\" class=\"headerlink\" title=\"ByteBuffer 分析\"></a>ByteBuffer 分析</h1><p>在分析 ByteBuf 之前，先简单讲下 ByteBuffer 类的操作。便于更好理解 ByteBuf 。</p>\n<p>ByteBuffer 的读写操作共用一个位置指针，读写过程通过以下代码案例分析：</p>\n<p>// 分配一个缓冲区，并指定大小</p>\n<p>ByteBuffer buffer = ByteBuffer.allocate(100);</p>\n<p>// 设置当前最大缓存区大小限制</p>\n<p>buffer.limit(15);</p>\n<p>System.out.println(String.format(“allocate: pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>String content = “ytao公众号”;</p>\n<p>// 向缓冲区写入数据</p>\n<p>buffer.put(content.getBytes());</p>\n<p>System.out.println(String.format(“put: pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>复制代码</p>\n<p>其中打印了缓冲区三个参数，分别是：</p>\n<ul>\n<li><p>  position 读写指针位置</p>\n</li>\n<li><p>  limit 当前缓存区大小限制</p>\n</li>\n<li><p>  capacity 缓冲区大小</p>\n</li>\n</ul>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed115bf0db~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>当我们写入内容后，读写指针值为 13，<code>ytao公众号</code>英文字符占 1 个 byte，每个中文占 4 个 byte，刚好 13，小于设置的当前缓冲区大小 15。</p>\n<p>接下来，读取内容里的 ytao 数据：</p>\n<p>buffer.flip();</p>\n<p>System.out.println(String.format(“flip: pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>byte[] readBytes = new byte[4];</p>\n<p>buffer.get(readBytes);</p>\n<p>System.out.println(String.format(“get(4): pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>String readContent = new String(readBytes);</p>\n<p>System.out.println(“readContent:”+readContent);</p>\n<p>复制代码</p>\n<p>读取内容需要创建个 byte 数组来接收，并制定接收的数据大小。</p>\n<p>在写入数据后再读取内容，必须主动调用<code>ByteBuffer#flip</code>或<code>ByteBuffer#clear</code>。</p>\n<p><code>ByteBuffer#flip</code>它会将写入数据后的指针位置值作为当前缓冲区大小，再将指针位置归零。会使写入数据的缓冲区改为待取数据的缓冲区，也就是说，读取数据会从刚写入的数据第一个索引作为读取数据的起始索引。</p>\n<p><code>ByteBuffer#flip</code>相关源码：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed37365971~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><code>ByteBuffer#clear</code>则会重置 limit 为默认值，与 capacity 大小相同。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ed69afb054~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>接下读取剩余部分内容：</p>\n<p>第二次读取的时候，可使用<code>buffer#remaining</code>来获取大于或等于剩下的内容的字节大小，该函数实现为<code>limit - position</code>，所以当前缓冲区域一定在这个值范围内。</p>\n<p>readBytes = new byte[buffer.remaining()];</p>\n<p>buffer.get(readBytes);</p>\n<p>System.out.println(String.format(“get(remaining): pos=%s lim=%s cap=%s”, buffer.position(), buffer.limit(), buffer.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eda7c816ed~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>以上操作过程中，索引变化如图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edcf975805~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h1 id=\"ByteBuf-读写操作\"><a href=\"#ByteBuf-读写操作\" class=\"headerlink\" title=\"ByteBuf 读写操作\"></a>ByteBuf 读写操作</h1><p>ByteBuf 有读写指针是分开的，分别是<code>buf#readerIndex</code>和<code>buf#writerIndex</code>，当前缓冲器大小<code>buf#capacity</code>。</p>\n<p>这里缓冲区被两个指针索引和容量划分为三个区域：</p>\n<ul>\n<li><p>  0 -&gt; readerIndex 为已读缓冲区域，已读区域可重用节约内存，readerIndex 值大于或等于 0</p>\n</li>\n<li><p>  readerIndex -&gt; writerIndex 为可读缓冲区域，writerIndex 值大于或等于 readerIndex</p>\n</li>\n<li><p>  writerIndex -&gt; capacity 为可写缓冲区域，capacity 值大于或等于 writerIndex</p>\n</li>\n</ul>\n<p>如下图所示：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301edff08c607~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"分配缓冲区\"><a href=\"#分配缓冲区\" class=\"headerlink\" title=\"分配缓冲区\"></a>分配缓冲区</h2><p>ByteBuf 分配一个缓冲区，仅仅给定一个初始值就可以。默认是 256。初始值不像 ByteBuffer 一样是最大值，ByteBuf 的最大值是<code>Integer.MAX_VALUE</code></p>\n<p>ByteBuf buf = Unpooled.buffer(13);</p>\n<p>System.out.println(String.format(“init: ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee1f9e8206~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"写操作\"><a href=\"#写操作\" class=\"headerlink\" title=\"写操作\"></a>写操作</h2><p>ByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的写操作支持多种类型，有以下多个API：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee437cecb5~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>写入字节数组类型：</p>\n<p>String content = “ytao公众号”;</p>\n<p>buf.writeBytes(content.getBytes());</p>\n<p>System.out.println(String.format(“write: ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee65386cee~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>索引示意图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ee883fa765~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"读操作\"><a href=\"#读操作\" class=\"headerlink\" title=\"读操作\"></a>读操作</h2><p>一样的，ByteBuf 写操作和 ByteBuffer 类似，只是写指针是单独记录的，ByteBuf 的读操作支持多种类型，有以下多个API：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eead03c33c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>从当前 readerIndex 位置读取四个字节内容：</p>\n<p>byte[] dst = new byte[4];</p>\n<p>buf.readBytes(dst);</p>\n<p>System.out.println(new String(dst));</p>\n<p>System.out.println(String.format(“read(4): ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eed607ebd0~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>索引示意图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301eef8a486f4~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h1 id=\"ByteBuf-动态扩容\"><a href=\"#ByteBuf-动态扩容\" class=\"headerlink\" title=\"ByteBuf 动态扩容\"></a>ByteBuf 动态扩容</h1><p>通过上面的 ByteBuffer 分配缓冲区例子，向里面添加 [ytao公众号ytao公众号] 内容，使写入的内容大于 limit 的值。</p>\n<p>ByteBuffer buffer = ByteBuffer.allocate(100);</p>\n<p>buffer.limit(15);</p>\n<p>String content = “ytao公众号ytao公众号”;</p>\n<p>buffer.put(content.getBytes());</p>\n<p>复制代码</p>\n<p>运行结果异常：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef1d20afa5~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>内容字节大小超过了 limit 的值时，缓冲区溢出异常，所以我们每次写入数据前，得检查缓区大小是否有足够空间，这样对编码上来说，不是一个好的体验。</p>\n<p>使用 ByteBuf 添加同样的内容，给定同样的初始容器大小。</p>\n<p>ByteBuf buf = Unpooled.buffer(15);</p>\n<p>String content = “ytao公众号ytao公众号”;</p>\n<p>buf.writeBytes(content.getBytes());</p>\n<p>System.out.println(String.format(“write: ridx=%s widx=%s cap=%s”, buf.readerIndex(), buf.writerIndex(), buf.capacity()));</p>\n<p>复制代码</p>\n<p>打印运行结果:</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef3c41d8b4~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>通过上面打印信息，可以看到 cap 从设置的 15 变为了 64，当我们容器大小不够时，就是进行扩容，接下来我们分析扩容过程中是如何做的。 进入 writeBytes 里面：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef5d5fc8ac~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>校验写入内容长度：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301ef82dfde30~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在可写区域检查里：</p>\n<ul>\n<li><p>  如果写入内容为空，抛出非法参数异常。</p>\n</li>\n<li><p>  如果写入内容大小小于或等于可写区域大小，则返回当前缓冲区，当中的<code>writableBytes()</code>函数为可写区域大小<code>capacity - writerIndex</code></p>\n</li>\n<li><p>  如果写入内容大小大于最大可写区域大小，则抛出索引越界异常。</p>\n</li>\n<li><p>  最后剩下条件的就是写入内容大小大于可写区域，小于最大区域大小，则分配一个新的缓冲区域。</p>\n</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efae6ef789~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在容量不足，重新分配缓冲区的里面，以 4M 为阀门：</p>\n<ul>\n<li><p>  如果待写内容刚好为 4M, 那么就分配 4M 的缓冲区。</p>\n</li>\n<li><p>  如果待写内容超过这个阀门且与阀门值之和不大于最大容量值，就分配(阀门值+内容大小值)的缓冲区；如果超过这个阀门且与阀门值之和大于最大容量值，则分配最大容量的缓冲区。</p>\n</li>\n<li><p>  如果待写内容不超过阀门值且大于 64，那么待分配缓冲区大小就以 64 的大小进行倍增，直到相等或大于待写内容。</p>\n</li>\n<li><p>  如果待写内容不超过阀门值且不大于 64，则返回待分配缓冲区大小为 64。</p>\n</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/23/16f301efd9e86adb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><blockquote>\n<p>Netty 实现的缓冲区，八个基本类型中，除了布尔类型，其他7种都有自己对应的 Buffer，但是实际使用过程中， ByteBuf 才是我们尝试用的，它可兼容任何类型。ByteBuf 在 Netty 体系中是最基础也是最重要的一员，要想更好掌握和使用 Netty，先理解并掌握 ByteBuf 是必需条件之一。</p>\n</blockquote>\n"},{"_content":"## 目录\n\n*   [netty的一些概念（二）](#netty的一些概念二)\n\n    *   [BIO/NIO/AIO](#bionioaio)\n\n        *   [阻塞（Block）与非阻塞（Non-Block）](#阻塞block与非阻塞non-block)\n\n        *   [同步（Synchronous）与异步（Asynchronous）](#同步synchronous与异步asynchronous)\n\n    *   [Reactor 模型](#reactor-模型)\n\n        *   [单线程的 Reactor 模型](#单线程的-reactor-模型)\n\n        *   [多线程的 Reactor 模型](#多线程的-reactor-模型)\n\n        *   [多线程主从 Reactor 模型](#多线程主从-reactor-模型)\n\n        *   [Netty 执行流程](#netty-执行流程)\n\n        *   [Netty 核心组件](#netty-核心组件)\n\n            *   [Channel](#channel)\n\n            *   [EventLoop 与 EventLoopGroup](#eventloop-与-eventloopgroup)\n\n            *   [ServerBootstrap 与 Bootstrap](#serverbootstrap-与-bootstrap)\n\n            *   [ChannelHandler 与 ChannelPipeline](#channelhandler-与-channelpipeline)\n\n            *   [ChannelFuture](#channelfuture)\n\n# netty的一些概念（二）\n\n## BIO/NIO/AIO\n\n### 阻塞（Block）与非阻塞（Non-Block）\n\n阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式，当数据没有准备的时候。\n\n**阻塞**：往往需要等待缓冲区中的数据准备好过后才处理其他的事情，否则一直等待在那里。\n\n**非阻塞**:当我们的进程访问我们的数据缓冲区的时候，如果数据没有准备好则直接返回，不会等待。如果数据已经准备好，也直接返回。\n\n**阻塞 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736d468562784011a28a4ba38d0f7e30\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n**非阻塞 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9a7cf5d0b944c7b904e68ee46182baf\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 同步（Synchronous）与异步（Asynchronous）\n\n同步和异步都是基于应用程序和操作系统处理 IO 事件所采用的方式。比如\n\n**同步：** 是应用程序要直接参与 IO 读写的操作。\n\n**异步：** 所有的 IO 读写交给操作系统去处理，应用程序只需要等待通知。\n\n同步方式在处理 IO 事件的时候，必须阻塞在某个方法上面等待我们的 IO 事件完成（阻塞 IO 事件或者通过轮询 IO事件的方式），对于异步来说，所有的 IO 读写都交给了操作系统。这个时候，我们可以去做其他的事情，并不需要去完成真正的 IO 操作，当操作完成 IO 后，会给我们的应用程序一个通知。\n\n所以异步相比较于同步带来的直接好处就是在我们处理IO数据的时候，异步的方式我们可以把这部分等待所消耗的资源用于处理其他事务，提升我们服务自身的性能。\n\n**同步 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f867c38b0294ef4ab7d7f50297e7612\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n**异步 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54d1ee94e6db40c0a74c8eafe50931da\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n## Reactor 模型\n\n### 单线程的 Reactor 模型\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b3be289e52c4cb68320c5b50db807aa\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 多线程的 Reactor 模型\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8853a72373c9489f945a1b808a5c7c8d\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 多线程主从 Reactor 模型\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2f319c5019648069feaac3ff71c12db\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### Netty 执行流程\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f692ce289a3e4c518306820fcb6114d3\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### Netty 核心组件\n\n#### Channel\n\nChannel是 Java NIO 的一个基本构造。可以看作是传入或传出数据的载体。因此，它可以被打开或关闭，连接或者断开连接。\n\n#### EventLoop 与 EventLoopGroup\n\nEventLoop 定义了Netty的核心抽象，用来处理连接的生命周期中所发生的事件，在内部，将会为每个Channel分配一个EventLoop。\n\nEventLoopGroup 是一个 EventLoop 池，包含很多的 EventLoop。\n\nNetty 为每个 Channel 分配了一个 EventLoop，用于处理用户连接请求、对用户请求的处理等所有事件。EventLoop 本身只是一个线程驱动，在其生命周期内只会绑定一个线程，让该线程处理一个 Channel 的所有 IO 事件。\n\n一个 Channel 一旦与一个 EventLoop 相绑定，那么在 Channel 的整个生命周期内是不能改变的。一个 EventLoop 可以与多个 Channel 绑定。即 Channel 与 EventLoop 的关系是 n:1，而 EventLoop 与线程的关系是 1:1。\n\n#### ServerBootstrap 与 Bootstrap\n\nBootstarp 和 ServerBootstrap 被称为引导类，指对应用程序进行配置，并使他运行起来的过程。Netty处理引导的方式是使你的应用程序和网络层相隔离。\n\nBootstrap 是客户端的引导类，Bootstrap 在调用 bind()（连接UDP）和 connect()（连接TCP）方法时，会新创建一个 Channel，仅创建一个单独的、没有父 Channel 的 Channel 来实现所有的网络交换。\n\nServerBootstrap 是服务端的引导类，ServerBootstarp 在调用 bind() 方法时会创建一个 ServerChannel 来接受来自客户端的连接，并且该 ServerChannel 管理了多个子 Channel 用于同客户端之间的通信。\n\n#### ChannelHandler 与 ChannelPipeline\n\nChannelHandler 是对 Channel 中数据的处理器，这些处理器可以是系统本身定义好的编解码器，也可以是用户自定义的。这些处理器会被统一添加到一个 ChannelPipeline 的对象中，然后按照添加的顺序对 Channel 中的数据进行依次处理。\n\n#### ChannelFuture\n\nNetty 中所有的 I/O 操作都是异步的，即操作不会立即得到返回结果，所以 Netty 中定义了一个 ChannelFuture 对象作为这个异步操作的“代言人”，表示异步操作本身。如果想获取到该异步操作的返回值，可以通过该异步操作对象的addListener() 方法为该异步操作添加监 NIO 网络编程框架 Netty 听器，为其注册回调：当结果出来后马上调用执行。\n\nNetty 的异步编程模型都是建立在 Future 与回调概念之上的。\n","source":"_posts/netty的一些概念（二）.md","raw":"## 目录\n\n*   [netty的一些概念（二）](#netty的一些概念二)\n\n    *   [BIO/NIO/AIO](#bionioaio)\n\n        *   [阻塞（Block）与非阻塞（Non-Block）](#阻塞block与非阻塞non-block)\n\n        *   [同步（Synchronous）与异步（Asynchronous）](#同步synchronous与异步asynchronous)\n\n    *   [Reactor 模型](#reactor-模型)\n\n        *   [单线程的 Reactor 模型](#单线程的-reactor-模型)\n\n        *   [多线程的 Reactor 模型](#多线程的-reactor-模型)\n\n        *   [多线程主从 Reactor 模型](#多线程主从-reactor-模型)\n\n        *   [Netty 执行流程](#netty-执行流程)\n\n        *   [Netty 核心组件](#netty-核心组件)\n\n            *   [Channel](#channel)\n\n            *   [EventLoop 与 EventLoopGroup](#eventloop-与-eventloopgroup)\n\n            *   [ServerBootstrap 与 Bootstrap](#serverbootstrap-与-bootstrap)\n\n            *   [ChannelHandler 与 ChannelPipeline](#channelhandler-与-channelpipeline)\n\n            *   [ChannelFuture](#channelfuture)\n\n# netty的一些概念（二）\n\n## BIO/NIO/AIO\n\n### 阻塞（Block）与非阻塞（Non-Block）\n\n阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式，当数据没有准备的时候。\n\n**阻塞**：往往需要等待缓冲区中的数据准备好过后才处理其他的事情，否则一直等待在那里。\n\n**非阻塞**:当我们的进程访问我们的数据缓冲区的时候，如果数据没有准备好则直接返回，不会等待。如果数据已经准备好，也直接返回。\n\n**阻塞 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736d468562784011a28a4ba38d0f7e30\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n**非阻塞 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9a7cf5d0b944c7b904e68ee46182baf\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 同步（Synchronous）与异步（Asynchronous）\n\n同步和异步都是基于应用程序和操作系统处理 IO 事件所采用的方式。比如\n\n**同步：** 是应用程序要直接参与 IO 读写的操作。\n\n**异步：** 所有的 IO 读写交给操作系统去处理，应用程序只需要等待通知。\n\n同步方式在处理 IO 事件的时候，必须阻塞在某个方法上面等待我们的 IO 事件完成（阻塞 IO 事件或者通过轮询 IO事件的方式），对于异步来说，所有的 IO 读写都交给了操作系统。这个时候，我们可以去做其他的事情，并不需要去完成真正的 IO 操作，当操作完成 IO 后，会给我们的应用程序一个通知。\n\n所以异步相比较于同步带来的直接好处就是在我们处理IO数据的时候，异步的方式我们可以把这部分等待所消耗的资源用于处理其他事务，提升我们服务自身的性能。\n\n**同步 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f867c38b0294ef4ab7d7f50297e7612\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n**异步 IO ：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54d1ee94e6db40c0a74c8eafe50931da\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n## Reactor 模型\n\n### 单线程的 Reactor 模型\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b3be289e52c4cb68320c5b50db807aa\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 多线程的 Reactor 模型\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8853a72373c9489f945a1b808a5c7c8d\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 多线程主从 Reactor 模型\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2f319c5019648069feaac3ff71c12db\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### Netty 执行流程\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f692ce289a3e4c518306820fcb6114d3\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### Netty 核心组件\n\n#### Channel\n\nChannel是 Java NIO 的一个基本构造。可以看作是传入或传出数据的载体。因此，它可以被打开或关闭，连接或者断开连接。\n\n#### EventLoop 与 EventLoopGroup\n\nEventLoop 定义了Netty的核心抽象，用来处理连接的生命周期中所发生的事件，在内部，将会为每个Channel分配一个EventLoop。\n\nEventLoopGroup 是一个 EventLoop 池，包含很多的 EventLoop。\n\nNetty 为每个 Channel 分配了一个 EventLoop，用于处理用户连接请求、对用户请求的处理等所有事件。EventLoop 本身只是一个线程驱动，在其生命周期内只会绑定一个线程，让该线程处理一个 Channel 的所有 IO 事件。\n\n一个 Channel 一旦与一个 EventLoop 相绑定，那么在 Channel 的整个生命周期内是不能改变的。一个 EventLoop 可以与多个 Channel 绑定。即 Channel 与 EventLoop 的关系是 n:1，而 EventLoop 与线程的关系是 1:1。\n\n#### ServerBootstrap 与 Bootstrap\n\nBootstarp 和 ServerBootstrap 被称为引导类，指对应用程序进行配置，并使他运行起来的过程。Netty处理引导的方式是使你的应用程序和网络层相隔离。\n\nBootstrap 是客户端的引导类，Bootstrap 在调用 bind()（连接UDP）和 connect()（连接TCP）方法时，会新创建一个 Channel，仅创建一个单独的、没有父 Channel 的 Channel 来实现所有的网络交换。\n\nServerBootstrap 是服务端的引导类，ServerBootstarp 在调用 bind() 方法时会创建一个 ServerChannel 来接受来自客户端的连接，并且该 ServerChannel 管理了多个子 Channel 用于同客户端之间的通信。\n\n#### ChannelHandler 与 ChannelPipeline\n\nChannelHandler 是对 Channel 中数据的处理器，这些处理器可以是系统本身定义好的编解码器，也可以是用户自定义的。这些处理器会被统一添加到一个 ChannelPipeline 的对象中，然后按照添加的顺序对 Channel 中的数据进行依次处理。\n\n#### ChannelFuture\n\nNetty 中所有的 I/O 操作都是异步的，即操作不会立即得到返回结果，所以 Netty 中定义了一个 ChannelFuture 对象作为这个异步操作的“代言人”，表示异步操作本身。如果想获取到该异步操作的返回值，可以通过该异步操作对象的addListener() 方法为该异步操作添加监 NIO 网络编程框架 Netty 听器，为其注册回调：当结果出来后马上调用执行。\n\nNetty 的异步编程模型都是建立在 Future 与回调概念之上的。\n","slug":"netty的一些概念（二）","published":1,"date":"2022-10-29T05:24:00.610Z","updated":"2022-10-29T05:22:51.201Z","_id":"cl9thabb60001xotw9d5xcu07","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#netty%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E4%BA%8C\">netty的一些概念（二）</a></p>\n<ul>\n<li><p><a href=\"#bionioaio\">BIO/NIO/AIO</a></p>\n<ul>\n<li><p>  <a href=\"#%E9%98%BB%E5%A1%9Eblock%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9Enon-block\">阻塞（Block）与非阻塞（Non-Block）</a></p>\n</li>\n<li><p>  <a href=\"#%E5%90%8C%E6%AD%A5synchronous%E4%B8%8E%E5%BC%82%E6%AD%A5asynchronous\">同步（Synchronous）与异步（Asynchronous）</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#reactor-%E6%A8%A1%E5%9E%8B\">Reactor 模型</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84-reactor-%E6%A8%A1%E5%9E%8B\">单线程的 Reactor 模型</a></p>\n</li>\n<li><p>  <a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84-reactor-%E6%A8%A1%E5%9E%8B\">多线程的 Reactor 模型</a></p>\n</li>\n<li><p>  <a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%BB%E4%BB%8E-reactor-%E6%A8%A1%E5%9E%8B\">多线程主从 Reactor 模型</a></p>\n</li>\n<li><p>  <a href=\"#netty-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\">Netty 执行流程</a></p>\n</li>\n<li><p><a href=\"#netty-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6\">Netty 核心组件</a></p>\n<ul>\n<li><p>  <a href=\"#channel\">Channel</a></p>\n</li>\n<li><p>  <a href=\"#eventloop-%E4%B8%8E-eventloopgroup\">EventLoop 与 EventLoopGroup</a></p>\n</li>\n<li><p>  <a href=\"#serverbootstrap-%E4%B8%8E-bootstrap\">ServerBootstrap 与 Bootstrap</a></p>\n</li>\n<li><p>  <a href=\"#channelhandler-%E4%B8%8E-channelpipeline\">ChannelHandler 与 ChannelPipeline</a></p>\n</li>\n<li><p>  <a href=\"#channelfuture\">ChannelFuture</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"netty的一些概念（二）\"><a href=\"#netty的一些概念（二）\" class=\"headerlink\" title=\"netty的一些概念（二）\"></a>netty的一些概念（二）</h1><h2 id=\"BIO-NIO-AIO\"><a href=\"#BIO-NIO-AIO\" class=\"headerlink\" title=\"BIO/NIO/AIO\"></a>BIO/NIO/AIO</h2><h3 id=\"阻塞（Block）与非阻塞（Non-Block）\"><a href=\"#阻塞（Block）与非阻塞（Non-Block）\" class=\"headerlink\" title=\"阻塞（Block）与非阻塞（Non-Block）\"></a>阻塞（Block）与非阻塞（Non-Block）</h3><p>阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式，当数据没有准备的时候。</p>\n<p><strong>阻塞</strong>：往往需要等待缓冲区中的数据准备好过后才处理其他的事情，否则一直等待在那里。</p>\n<p><strong>非阻塞</strong>:当我们的进程访问我们的数据缓冲区的时候，如果数据没有准备好则直接返回，不会等待。如果数据已经准备好，也直接返回。</p>\n<p><strong>阻塞 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736d468562784011a28a4ba38d0f7e30~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><strong>非阻塞 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9a7cf5d0b944c7b904e68ee46182baf~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"同步（Synchronous）与异步（Asynchronous）\"><a href=\"#同步（Synchronous）与异步（Asynchronous）\" class=\"headerlink\" title=\"同步（Synchronous）与异步（Asynchronous）\"></a>同步（Synchronous）与异步（Asynchronous）</h3><p>同步和异步都是基于应用程序和操作系统处理 IO 事件所采用的方式。比如</p>\n<p><strong>同步：</strong> 是应用程序要直接参与 IO 读写的操作。</p>\n<p><strong>异步：</strong> 所有的 IO 读写交给操作系统去处理，应用程序只需要等待通知。</p>\n<p>同步方式在处理 IO 事件的时候，必须阻塞在某个方法上面等待我们的 IO 事件完成（阻塞 IO 事件或者通过轮询 IO事件的方式），对于异步来说，所有的 IO 读写都交给了操作系统。这个时候，我们可以去做其他的事情，并不需要去完成真正的 IO 操作，当操作完成 IO 后，会给我们的应用程序一个通知。</p>\n<p>所以异步相比较于同步带来的直接好处就是在我们处理IO数据的时候，异步的方式我们可以把这部分等待所消耗的资源用于处理其他事务，提升我们服务自身的性能。</p>\n<p><strong>同步 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f867c38b0294ef4ab7d7f50297e7612~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><strong>异步 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54d1ee94e6db40c0a74c8eafe50931da~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"Reactor-模型\"><a href=\"#Reactor-模型\" class=\"headerlink\" title=\"Reactor 模型\"></a>Reactor 模型</h2><h3 id=\"单线程的-Reactor-模型\"><a href=\"#单线程的-Reactor-模型\" class=\"headerlink\" title=\"单线程的 Reactor 模型\"></a>单线程的 Reactor 模型</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b3be289e52c4cb68320c5b50db807aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"多线程的-Reactor-模型\"><a href=\"#多线程的-Reactor-模型\" class=\"headerlink\" title=\"多线程的 Reactor 模型\"></a>多线程的 Reactor 模型</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8853a72373c9489f945a1b808a5c7c8d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"多线程主从-Reactor-模型\"><a href=\"#多线程主从-Reactor-模型\" class=\"headerlink\" title=\"多线程主从 Reactor 模型\"></a>多线程主从 Reactor 模型</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2f319c5019648069feaac3ff71c12db~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"Netty-执行流程\"><a href=\"#Netty-执行流程\" class=\"headerlink\" title=\"Netty 执行流程\"></a>Netty 执行流程</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f692ce289a3e4c518306820fcb6114d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4><p>Channel是 Java NIO 的一个基本构造。可以看作是传入或传出数据的载体。因此，它可以被打开或关闭，连接或者断开连接。</p>\n<h4 id=\"EventLoop-与-EventLoopGroup\"><a href=\"#EventLoop-与-EventLoopGroup\" class=\"headerlink\" title=\"EventLoop 与 EventLoopGroup\"></a>EventLoop 与 EventLoopGroup</h4><p>EventLoop 定义了Netty的核心抽象，用来处理连接的生命周期中所发生的事件，在内部，将会为每个Channel分配一个EventLoop。</p>\n<p>EventLoopGroup 是一个 EventLoop 池，包含很多的 EventLoop。</p>\n<p>Netty 为每个 Channel 分配了一个 EventLoop，用于处理用户连接请求、对用户请求的处理等所有事件。EventLoop 本身只是一个线程驱动，在其生命周期内只会绑定一个线程，让该线程处理一个 Channel 的所有 IO 事件。</p>\n<p>一个 Channel 一旦与一个 EventLoop 相绑定，那么在 Channel 的整个生命周期内是不能改变的。一个 EventLoop 可以与多个 Channel 绑定。即 Channel 与 EventLoop 的关系是 n:1，而 EventLoop 与线程的关系是 1:1。</p>\n<h4 id=\"ServerBootstrap-与-Bootstrap\"><a href=\"#ServerBootstrap-与-Bootstrap\" class=\"headerlink\" title=\"ServerBootstrap 与 Bootstrap\"></a>ServerBootstrap 与 Bootstrap</h4><p>Bootstarp 和 ServerBootstrap 被称为引导类，指对应用程序进行配置，并使他运行起来的过程。Netty处理引导的方式是使你的应用程序和网络层相隔离。</p>\n<p>Bootstrap 是客户端的引导类，Bootstrap 在调用 bind()（连接UDP）和 connect()（连接TCP）方法时，会新创建一个 Channel，仅创建一个单独的、没有父 Channel 的 Channel 来实现所有的网络交换。</p>\n<p>ServerBootstrap 是服务端的引导类，ServerBootstarp 在调用 bind() 方法时会创建一个 ServerChannel 来接受来自客户端的连接，并且该 ServerChannel 管理了多个子 Channel 用于同客户端之间的通信。</p>\n<h4 id=\"ChannelHandler-与-ChannelPipeline\"><a href=\"#ChannelHandler-与-ChannelPipeline\" class=\"headerlink\" title=\"ChannelHandler 与 ChannelPipeline\"></a>ChannelHandler 与 ChannelPipeline</h4><p>ChannelHandler 是对 Channel 中数据的处理器，这些处理器可以是系统本身定义好的编解码器，也可以是用户自定义的。这些处理器会被统一添加到一个 ChannelPipeline 的对象中，然后按照添加的顺序对 Channel 中的数据进行依次处理。</p>\n<h4 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h4><p>Netty 中所有的 I/O 操作都是异步的，即操作不会立即得到返回结果，所以 Netty 中定义了一个 ChannelFuture 对象作为这个异步操作的“代言人”，表示异步操作本身。如果想获取到该异步操作的返回值，可以通过该异步操作对象的addListener() 方法为该异步操作添加监 NIO 网络编程框架 Netty 听器，为其注册回调：当结果出来后马上调用执行。</p>\n<p>Netty 的异步编程模型都是建立在 Future 与回调概念之上的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#netty%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E4%BA%8C\">netty的一些概念（二）</a></p>\n<ul>\n<li><p><a href=\"#bionioaio\">BIO/NIO/AIO</a></p>\n<ul>\n<li><p>  <a href=\"#%E9%98%BB%E5%A1%9Eblock%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9Enon-block\">阻塞（Block）与非阻塞（Non-Block）</a></p>\n</li>\n<li><p>  <a href=\"#%E5%90%8C%E6%AD%A5synchronous%E4%B8%8E%E5%BC%82%E6%AD%A5asynchronous\">同步（Synchronous）与异步（Asynchronous）</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#reactor-%E6%A8%A1%E5%9E%8B\">Reactor 模型</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84-reactor-%E6%A8%A1%E5%9E%8B\">单线程的 Reactor 模型</a></p>\n</li>\n<li><p>  <a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84-reactor-%E6%A8%A1%E5%9E%8B\">多线程的 Reactor 模型</a></p>\n</li>\n<li><p>  <a href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%BB%E4%BB%8E-reactor-%E6%A8%A1%E5%9E%8B\">多线程主从 Reactor 模型</a></p>\n</li>\n<li><p>  <a href=\"#netty-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\">Netty 执行流程</a></p>\n</li>\n<li><p><a href=\"#netty-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6\">Netty 核心组件</a></p>\n<ul>\n<li><p>  <a href=\"#channel\">Channel</a></p>\n</li>\n<li><p>  <a href=\"#eventloop-%E4%B8%8E-eventloopgroup\">EventLoop 与 EventLoopGroup</a></p>\n</li>\n<li><p>  <a href=\"#serverbootstrap-%E4%B8%8E-bootstrap\">ServerBootstrap 与 Bootstrap</a></p>\n</li>\n<li><p>  <a href=\"#channelhandler-%E4%B8%8E-channelpipeline\">ChannelHandler 与 ChannelPipeline</a></p>\n</li>\n<li><p>  <a href=\"#channelfuture\">ChannelFuture</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"netty的一些概念（二）\"><a href=\"#netty的一些概念（二）\" class=\"headerlink\" title=\"netty的一些概念（二）\"></a>netty的一些概念（二）</h1><h2 id=\"BIO-NIO-AIO\"><a href=\"#BIO-NIO-AIO\" class=\"headerlink\" title=\"BIO/NIO/AIO\"></a>BIO/NIO/AIO</h2><h3 id=\"阻塞（Block）与非阻塞（Non-Block）\"><a href=\"#阻塞（Block）与非阻塞（Non-Block）\" class=\"headerlink\" title=\"阻塞（Block）与非阻塞（Non-Block）\"></a>阻塞（Block）与非阻塞（Non-Block）</h3><p>阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式，当数据没有准备的时候。</p>\n<p><strong>阻塞</strong>：往往需要等待缓冲区中的数据准备好过后才处理其他的事情，否则一直等待在那里。</p>\n<p><strong>非阻塞</strong>:当我们的进程访问我们的数据缓冲区的时候，如果数据没有准备好则直接返回，不会等待。如果数据已经准备好，也直接返回。</p>\n<p><strong>阻塞 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/736d468562784011a28a4ba38d0f7e30~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><strong>非阻塞 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9a7cf5d0b944c7b904e68ee46182baf~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"同步（Synchronous）与异步（Asynchronous）\"><a href=\"#同步（Synchronous）与异步（Asynchronous）\" class=\"headerlink\" title=\"同步（Synchronous）与异步（Asynchronous）\"></a>同步（Synchronous）与异步（Asynchronous）</h3><p>同步和异步都是基于应用程序和操作系统处理 IO 事件所采用的方式。比如</p>\n<p><strong>同步：</strong> 是应用程序要直接参与 IO 读写的操作。</p>\n<p><strong>异步：</strong> 所有的 IO 读写交给操作系统去处理，应用程序只需要等待通知。</p>\n<p>同步方式在处理 IO 事件的时候，必须阻塞在某个方法上面等待我们的 IO 事件完成（阻塞 IO 事件或者通过轮询 IO事件的方式），对于异步来说，所有的 IO 读写都交给了操作系统。这个时候，我们可以去做其他的事情，并不需要去完成真正的 IO 操作，当操作完成 IO 后，会给我们的应用程序一个通知。</p>\n<p>所以异步相比较于同步带来的直接好处就是在我们处理IO数据的时候，异步的方式我们可以把这部分等待所消耗的资源用于处理其他事务，提升我们服务自身的性能。</p>\n<p><strong>同步 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f867c38b0294ef4ab7d7f50297e7612~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><strong>异步 IO ：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54d1ee94e6db40c0a74c8eafe50931da~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h2 id=\"Reactor-模型\"><a href=\"#Reactor-模型\" class=\"headerlink\" title=\"Reactor 模型\"></a>Reactor 模型</h2><h3 id=\"单线程的-Reactor-模型\"><a href=\"#单线程的-Reactor-模型\" class=\"headerlink\" title=\"单线程的 Reactor 模型\"></a>单线程的 Reactor 模型</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b3be289e52c4cb68320c5b50db807aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"多线程的-Reactor-模型\"><a href=\"#多线程的-Reactor-模型\" class=\"headerlink\" title=\"多线程的 Reactor 模型\"></a>多线程的 Reactor 模型</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8853a72373c9489f945a1b808a5c7c8d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"多线程主从-Reactor-模型\"><a href=\"#多线程主从-Reactor-模型\" class=\"headerlink\" title=\"多线程主从 Reactor 模型\"></a>多线程主从 Reactor 模型</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2f319c5019648069feaac3ff71c12db~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"Netty-执行流程\"><a href=\"#Netty-执行流程\" class=\"headerlink\" title=\"Netty 执行流程\"></a>Netty 执行流程</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f692ce289a3e4c518306820fcb6114d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"Netty-核心组件\"><a href=\"#Netty-核心组件\" class=\"headerlink\" title=\"Netty 核心组件\"></a>Netty 核心组件</h3><h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4><p>Channel是 Java NIO 的一个基本构造。可以看作是传入或传出数据的载体。因此，它可以被打开或关闭，连接或者断开连接。</p>\n<h4 id=\"EventLoop-与-EventLoopGroup\"><a href=\"#EventLoop-与-EventLoopGroup\" class=\"headerlink\" title=\"EventLoop 与 EventLoopGroup\"></a>EventLoop 与 EventLoopGroup</h4><p>EventLoop 定义了Netty的核心抽象，用来处理连接的生命周期中所发生的事件，在内部，将会为每个Channel分配一个EventLoop。</p>\n<p>EventLoopGroup 是一个 EventLoop 池，包含很多的 EventLoop。</p>\n<p>Netty 为每个 Channel 分配了一个 EventLoop，用于处理用户连接请求、对用户请求的处理等所有事件。EventLoop 本身只是一个线程驱动，在其生命周期内只会绑定一个线程，让该线程处理一个 Channel 的所有 IO 事件。</p>\n<p>一个 Channel 一旦与一个 EventLoop 相绑定，那么在 Channel 的整个生命周期内是不能改变的。一个 EventLoop 可以与多个 Channel 绑定。即 Channel 与 EventLoop 的关系是 n:1，而 EventLoop 与线程的关系是 1:1。</p>\n<h4 id=\"ServerBootstrap-与-Bootstrap\"><a href=\"#ServerBootstrap-与-Bootstrap\" class=\"headerlink\" title=\"ServerBootstrap 与 Bootstrap\"></a>ServerBootstrap 与 Bootstrap</h4><p>Bootstarp 和 ServerBootstrap 被称为引导类，指对应用程序进行配置，并使他运行起来的过程。Netty处理引导的方式是使你的应用程序和网络层相隔离。</p>\n<p>Bootstrap 是客户端的引导类，Bootstrap 在调用 bind()（连接UDP）和 connect()（连接TCP）方法时，会新创建一个 Channel，仅创建一个单独的、没有父 Channel 的 Channel 来实现所有的网络交换。</p>\n<p>ServerBootstrap 是服务端的引导类，ServerBootstarp 在调用 bind() 方法时会创建一个 ServerChannel 来接受来自客户端的连接，并且该 ServerChannel 管理了多个子 Channel 用于同客户端之间的通信。</p>\n<h4 id=\"ChannelHandler-与-ChannelPipeline\"><a href=\"#ChannelHandler-与-ChannelPipeline\" class=\"headerlink\" title=\"ChannelHandler 与 ChannelPipeline\"></a>ChannelHandler 与 ChannelPipeline</h4><p>ChannelHandler 是对 Channel 中数据的处理器，这些处理器可以是系统本身定义好的编解码器，也可以是用户自定义的。这些处理器会被统一添加到一个 ChannelPipeline 的对象中，然后按照添加的顺序对 Channel 中的数据进行依次处理。</p>\n<h4 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h4><p>Netty 中所有的 I/O 操作都是异步的，即操作不会立即得到返回结果，所以 Netty 中定义了一个 ChannelFuture 对象作为这个异步操作的“代言人”，表示异步操作本身。如果想获取到该异步操作的返回值，可以通过该异步操作对象的addListener() 方法为该异步操作添加监 NIO 网络编程框架 Netty 听器，为其注册回调：当结果出来后马上调用执行。</p>\n<p>Netty 的异步编程模型都是建立在 Future 与回调概念之上的。</p>\n"},{"_content":"## 目录\n\n*   [netty的一些概念（一）](#netty的一些概念一)\n\n    *   [协议](#协议)\n\n    *   [BIO/NIO/AIO](#bionioaio)\n\n        *   *   [1、BIO（同步阻塞IO）](#1bio同步阻塞io)\n\n            *   [2、NIO（同步非阻塞IO）](#2nio同步非阻塞io)\n\n            *   [3、AIO（异步非阻塞IO）](#3aio异步非阻塞io)\n\n    *   [Netty架构](#netty架构)\n\n        *   [1. Core 核心层](#1-core-核心层)\n\n        *   [2. Protocol Support 协议支持层](#2-protocol-support-协议支持层)\n\n        *   [3. Transport Service 传输服务层](#3-transport-service-传输服务层)\n\n    *   [二、Netty 逻辑架构](#二netty-逻辑架构)\n\n        *   [1. 网络通信层](#1-网络通信层)\n\n        *   [2. 事件调度层](#2-事件调度层)\n\n        *   [3. 服务编排层](#3-服务编排层)\n\n    *   [三、组件关系梳理](#三组件关系梳理)\n\n    *   [四、Netty 源码结构](#四netty-源码结构)\n\n        *   *   [Core 核心层模块](#core-核心层模块)\n\n            *   [Protocol Support 协议支持层模块](#protocol-support-协议支持层模块)\n\n            *   [Transport Service 传输服务层模块](#transport-service-传输服务层模块)\n\n# netty的一些概念（一）\n\n## 协议\n\n*   网络协议为计算机网络中进行数据交换而建立的规则、标准或约定的集合 例如平时我们签订的合同，主要用于约束两方的一些行为以及必须遵守的规则和约定，网络协议亦是如此，如果想要双方能够达成通信，必须约束双方，如果两个终端使用的字符集不一样，那么两个终端就不能识别对方发送的消息，所以无法完成通信，为了能进行通信，规定每个终端都要将各自字符集中的字符先变换为标准字符集的字符后，才进入网络传送，到达目的终端之后，再变换为该终端字符集的字符\n\n## BIO/NIO/AIO\n\n#### 1、BIO（同步阻塞IO）\n\n*   服务端创建一个**ServerSocket**，客户端就有一个Socket去链接这个ServerSocket，然后ServerSocket接收到客户端的Socket请求之后就会建立一个专属的**Socket+线程**去和**客户端的Socket**去通信（长时间维护）\n\n*   **同步阻塞通信**：客户端发送一个请求，服务端Socket就进行处理后返回，响应必须是等待处理完毕之后才会返回的，在这之前是什么也做不了。\n\n*   缺点：每次一个客户端的接入就会有一个线程+Socket对其进行通信，这会导致客户端接入太多，服务端线程过多，导致崩溃。\n\n*\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff087c520ea\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n#### 2、NIO（同步非阻塞IO）\n\n*   **Buffer**（缓冲区）：**channel将数据写入Buffer**，然后从Buffer中读取数据，包括int、Long、CharBuffer等多种数据类型。\n\n*   **channel**：通过channel进行数据的读写\n\n*   **selector**（多路复用器）：**selector会轮询channel**，如果某个channel中发生了数据请求，selector就会将通过SelectionKey会哦去有数据请求的channel，进行IO操作。一个Selector（一个线程）可以轮询上千万个channel，也就是客户端可以接入的数量激增。\n\n*   通过一个线程轮询大量的channel，每次获取一批有事件的channel，然后**对每个请求启动一个线程**进行处理，并设置一个线程池，当线程处理完毕以后，就回收线程，就不会像BIO需要一直维持为每个客户端创建的**Socket+线程**。\n\n*\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff2daf38c34\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n#### 3、AIO（异步非阻塞IO）\n\n*   基于Proactor模型，每个连接发送的请求，都会绑定一个Buffer，然后**通知操作系统异步的完成读操作**，此时程序可以去干别的事，操作系统完成数据的读取之后，就会回调接口，将读出的数据给你。\n\n*   将数据进行处理，接着将结果返回\n\n*   写数据的时候也是**给操作系统一个buffer**，让操作系统获取数据完成写操作。\n\n## Netty架构\n\n在 `Netty` 的官网中，给出了一张图，图片如下：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5db436d44a47c58cc97e292cfdb4bc\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n上图摘自 [Netty 官网首页](https://link.juejin.cn?target=https://netty.io/ \"Netty 官网首页\")。\n\n这就是 Netty 的模块划分图，可以清晰的看出，一共分为三个模块：\n\n*   `Core 核心层`；\n\n*   `Protocol Support 协议支持层`；\n\n*   `Transport Services 传输服务层`。\n\n可以看出，Netty 的模块设计具备较高的**通用性和可扩展性**。\n\n### 1. Core 核心层\n\n`Core 核心层`包含了 Netty 最为核心的功能，提供了底层网络通信的通用抽象和实现，包括可**扩展的事件模型、通用的通信 API、支持零拷贝的 ByteBuf 等**。\n\n### 2. Protocol Support 协议支持层\n\n协议支持层基本上覆盖了主流协议的编解码实现，如 `HTTP、SSL、Protobuf、压缩、大文件传输、WebSocket、文本、二进制`等主流协议，此外 Netty 还支持自定义应用层协议。\n\nNetty 丰富的协议支持降低了用户的开发成本，基于 Netty 我们可以快速开发 HTTP、WebSocket 等服务。\n\n### 3. Transport Service 传输服务层\n\n传输服务层提供了网络传输能力的定义和实现方法。它支持 Socket、HTTP 隧道、虚拟机管道等传输方式。\n\nNetty 对 TCP、UDP 等数据传输做了抽象和封装，用户可以更聚焦在业务逻辑实现上，而不必关系底层数据传输的细节。\n\n## 二、Netty 逻辑架构\n\n下图是 Netty 的逻辑处理架构。Netty 的逻辑处理架构为典型网络分层架构设计，共分为`网络通信层、事件调度层、服务编排层`，每一层各司其职。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f8cfaef5caf4855b1fcf59d3f769565\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 1. 网络通信层\n\n**网络通信层的职责是执行网络 I/O 的操作。它支持多种网络协议和 I/O 模型的连接操作。当网络数据读取到内核缓冲区后，会触发各种网络事件，这些网络事件会分发给事件调度层进行处理**。\n\n网络事件有连接事件、读事件、写事件等。\n\n网络通信层的**核心组件**包含 **BootStrap、ServerBootStrap、Channel** 三个组件。\n\n*   **BootStrap & ServerBootStrap**\n\n`Bootstrap` 是“引导”的意思，它主要负责整个 Netty 程序的启动、初始化、服务器连接等过程，它相当于一条主线，串联了 Netty 的其他核心组件。\n\nNetty 中的引导器共分为两种类型：一个为**用于客户端引导的 Bootstrap**，另一个为**用于服务端引导的 ServerBootStrap**，它们都继承自抽象类 `AbstractBootstrap`。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/833253fcd11c4f3f8bc8cf8f7aa02deb\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n`Bootstrap` 和 `ServerBootStrap` 十分相似，两者非常重要的区别在于 `Bootstrap` 可用于连接远端服务器，只绑定一个 `EventLoopGroup`。而 `ServerBootStrap` 则用于服务端启动绑定本地端口，会绑定两个 `EventLoopGroup`，这两个 EventLoopGroup 通常称为 Boss 和 Worker。\n\nServerBootStrap 中的 Boss 和 Worker 是什么角色呢？它们之间又是什么关系？这里的 Boss 和 Worker 可以理解为“老板”和“员工”的关系。每个服务器中都会有一个 Boss，也会有一群做事情的 Worker。Boss 会不停地接收新的连接，然后将连接分配给一个个 Worker 处理连接。\n\n`Boss` 对应 `Reactor` 模型中的 `MainReactor`，`Worker` 对应 `Reactor` 模型的 `SubReactor`。\n\n这里放一下 `Reactor` 的整体流程图。来源于：[gee.cs.oswego.edu/dl/cpjslide…](https://link.juejin.cn?target=https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf \"gee.cs.oswego.edu/dl/cpjslide…\")\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/731e45eadd614f73a6909552e77dd33d\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n总结来说就是客户端使用 `Bootstrap` 引导类，服务端使用 `ServerBootStrap` 引导类。\n\n有了 Bootstrap 组件，我们可以更加方便地配置和启动 Netty 应用程序，它是整个 Netty 的入口，串接了 Netty 所有核心组件的初始化工作。\n\n*   **Channel**\n\n`Channel` 的字面意思是“通道”，它是网络通信的载体。\n\n`Channel` 提供了基本的 API 用于网络 I/O 操作，如 `register、bind、connect、read、write、flush` 等。\n\nNetty 自己实现的 Channel 是以 JDK NIO Channel 为基础的，相比较于 JDK NIO，Netty 的 Channel 提供了更高层次的抽象，同时屏蔽了底层 Socket 的复杂性，赋予了 Channel 更加强大的功能，你在使用 Netty 时基本不需要再与 Java Socket 类直接打交道。\n\n下图是 Channel 家族的图谱。`AbstractChannel` 是整个家族的基类，派生出 `AbstractNioChannel、AbstractOioChannel`、，每一种都代表了不同的 I/O 模型和协议类型。常用的 Channel 实现类有：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81226d36b08b43bea0a42d8baf8babfc\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n*   NioServerSocketChannel 异步 TCP 服务端。\n\n*   NioSocketChannel 异步 TCP 客户端。\n\n*   OioServerSocketChannel 同步 TCP 服务端。\n\n*   OioSocketChannel 同步 TCP 客户端。\n\n*   NioDatagramChannel 异步 UDP 连接。\n\n*   OioDatagramChannel 同步 UDP 连接。\n\n注意：\n\n*   Nio 为前缀的，代表使用的是 NIO 模型，所以是异步的。\n\n*   Oio 为前缀的，代表使用的是 BIO 模型，所以是同步的。\n\nChannel 会有多种状态，如**连接建立、连接注册、数据读写、连接销毁**等。\n\n常见的状态对应事件如下：\n\n| 事件                  | 说明                               |\n| ------------------- | -------------------------------- |\n| channelRegistered   | Channel 创建后被注册到 EventLoop 上      |\n| channelUnregistered | Channel 创建后未注册或者从 EventLoop 取消注册 |\n| channelActive       | Channel 处于就绪状态，可以被读写             |\n| channelInactive     | Channel 处于非就绪状态                  |\n| channelRead         | Channel 可以从远端读取到数据               |\n| channelReadComplete | Channel 读取数据完成                   |\n\n总结一下：\n\n*   BootStrap 和 ServerBootStrap 分别负责客户端和服务端的启动，它们是非常强大的辅助工具类，串联了 Netty 的系列核心组件；\n\n*   Channel 是网络通信的载体，提供了与底层 Socket 交互的能力。\n\n### 2. 事件调度层\n\n**事件调度层的职责是通过 Reactor 线程模型对各类事件进行聚合处理，通过 Selector 主循环线程集成多种事件（ I/O 事件、信号事件、定时事件等），实际的业务处理逻辑是交由服务编排层中相关的 Handler 完成**。\n\n事件调度层的**核心组件**包括 **EventLoopGroup、EventLoop**。\n\n*   **EventLoopGroup & EventLoop**\n\nEventLoopGroup 本质是一个线程池，主要负责接收 I/O 请求，并分配线程执行处理请求。\n\nEventLoopGroup 类图如下：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f171c5963b064ee48424931080803266\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n我们发现它继承了 Executor 类，可以证明它是一个线程池。\n\n那这就说明，由它管理的一个个 EventLoop，就是一个个线程，由 EventLoopGroup 负责分配 EventLoop 进行处理事件。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a4e4c4bf9654c53a8ab2502664aac93\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n从上图中，我们可以总结出 EventLoopGroup、EventLoop、Channel 的几点关系。\n\n1.  一个 EventLoopGroup 往往包含一个或者多个 EventLoop。EventLoop 用于处理 Channel 生命周期内的所有 I/O 事件，如 accept、connect、read、write 等 I/O 事件。\n\n2.  EventLoop 同一时间会与一个线程绑定，每个 EventLoop 负责处理多个 Channel。\n\n3.  每新建一个 Channel，EventLoopGroup 会选择一个 EventLoop 与其绑定。该 Channel 在生命周期内都可以对 EventLoop 进行多次绑定和解绑。\n\n下图是 EventLoopGroup 的家族图谱。可以看出 Netty 提供了 EventLoopGroup 的多种实现，而且 EventLoop 则是 EventLoopGroup 的子接口，所以也可以把 EventLoop 理解为 EventLoopGroup，但是它只包含一个 EventLoop 。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f56d8b8ab04768a6a92f6d1611f1b8\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n`EventLoopGroup` 的实现类是 `NioEventLoopGroup`，`NioEventLoopGroup` 也是 Netty 中最被推荐使用的线程模型。\n\nNioEventLoopGroup 继承于 MultithreadEventLoopGroup，是基于 NIO 模型开发的，可以把 NioEventLoopGroup 理解为一个线程池，每个线程负责处理多个 Channel，而同一个 Channel 只会对应一个线程。\n\nEventLoopGroup 是 Netty 的核心处理引擎，那么 EventLoopGroup 和 Reactor 线程模型到底是什么关系呢？\n\n其实 EventLoopGroup 是 Netty Reactor 线程模型的具体实现方式，Netty 通过创建不同的 EventLoopGroup 参数配置，就可以支持 Reactor 的三种线程模型：\n\n1.  **单线程模型**：EventLoopGroup 只包含`一个 EventLoop`，Boss 和 Worker 使用同一个EventLoopGroup；\n\n2.  **多线程模型**：EventLoopGroup 包含`多个 EventLoop`，Boss 和 Worker 使用同一个EventLoopGroup；\n\n3.  **主从多线程模型**：EventLoopGroup 包含多个 EventLoop，Boss 是主 Reactor，Worker 是从 Reactor，它们分别使用不同的 EventLoopGroup，主 Reactor 负责新的网络连接 Channel 创建，然后把 Channel 注册到从 Reactor。\n\n### 3. 服务编排层\n\n**服务编排层的职责是负责组装各类服务，它是 Netty 的核心处理链，用以实现网络事件的动态编排和有序传播**。\n\n服务编排层的**核心组件**包括 **ChannelPipeline**、**ChannelHandler、ChannelHandlerContext**。\n\n*   **ChannelPipeline**\n\n`ChannelPipeline` 是 Netty 的核心编排组件，**负责组装各种 ChannelHandler**，实际数据的编解码以及加工处理操作都是由 ChannelHandler 完成的。\n\nChannelPipeline 可以理解为**ChannelHandler 的实例列表**——内部通过双向链表将不同的 ChannelHandler 链接在一起。当 I/O 读写事件触发时，ChannelPipeline 会依次调用 ChannelHandler 列表对 Channel 的数据进行拦截和处理。\n\n`ChannelPipeline 是线程安全的`，因为每一个新的 Channel 都会对应绑定一个新的 ChannelPipeline。一个 ChannelPipeline 关联一个 EventLoop，一个 EventLoop 仅会绑定一个线程。\n\nChannelPipeline、ChannelHandler 都是高度可定制的组件。开发者可以通过这两个核心组件掌握对 Channel 数据操作的控制权。下面我们看一下 ChannelPipeline 的结构图：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a386eede45142f79075eed075a3447c\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n从上图可以看出，ChannelPipeline 中包含入站 ChannelInboundHandler 和出站 ChannelOutboundHandler 两种处理器，我们结合客户端和服务端的数据收发流程来理解 Netty 的这两个概念。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94ef10fa0234401196cbe8f16abfd40c\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n客户端和服务端都有各自的 ChannelPipeline。以客户端为例，数据从客户端发向服务端，该过程称为**出站**，反之则称为**入站**。数据入站会由一系列 InBoundHandler 处理，然后再以相反方向的 OutBoundHandler 处理后完成出站。\n\n我们经常使用的编码 Encoder 是出站操作，解码 Decoder 是入站操作。服务端接收到客户端数据后，需要先经过 Decoder 入站处理后，再通过 Encoder 出站通知客户端。所以客户端和服务端一次完整的请求应答过程可以分为三个步骤：客户端出站（请求数据）、服务端入站（解析数据并执行业务逻辑）、服务端出站（响应结果）。\n\n*   **ChannelHandler & ChannelHandlerContext**\n\n下图描述了 Channel 与 ChannelPipeline 的关系，从图中可以看出，每创建一个 Channel 都会绑定一个新的 ChannelPipeline，ChannelPipeline 中每加入一个 ChannelHandler 都会绑定一个 ChannelHandlerContext。\n\n由此可见，ChannelPipeline、ChannelHandlerContext、ChannelHandler 三个组件的关系是密切相关的。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abccbee47d484fd8a066690aaa39d4e7\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\nChannelHandlerContext 用于保存 ChannelHandler 上下文，通过 ChannelHandlerContext 我们可以知道 ChannelPipeline 和 ChannelHandler 的关联关系。\n\nChannelHandlerContext 可以实现 ChannelHandler 之间的交互，ChannelHandlerContext 包含了 ChannelHandler 生命周期的所有事件，如 connect、bind、read、flush、write、close 等。\n\n此外，你可以试想这样一个场景，如果每个 ChannelHandler 都有一些通用的逻辑需要实现，没有 ChannelHandlerContext 这层模型抽象，你是不是需要写很多相同的代码呢？\n\n## 三、组件关系梳理\n\nNetty 组件交互流程图：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001f6025ba3460c83710d0b0b8f9ccd\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n*   服务端启动初始化时有 `Boss EventLoopGroup` 和 `Worker EventLoopGroup` 两个组件，其中 Boss 负责监听网络连接事件。当有新的网络连接事件到达时，则将 Channel 注册到 Worker EventLoopGroup。\n\n*   Worker EventLoopGroup 会被分配一个 EventLoop 负责处理该 Channel 的读写事件。每个 EventLoop 都是单线程的，通过 Selector 进行事件循环。\n\n*   当客户端发起 I/O 读写事件时，服务端 EventLoop 会进行数据的读取，然后通过 Pipeline 触发各种监听器进行数据的加工处理。\n\n*   客户端数据会被传递到 ChannelPipeline 的第一个 ChannelInboundHandler 中，数据处理完成后，将加工完成的数据传递给下一个 ChannelInboundHandler。\n\n*   当数据写回客户端时，会将处理结果在 ChannelPipeline 的 ChannelOutboundHandler 中传播，最后到达客户端。\n\n## 四、Netty 源码结构\n\n[Netty 源码](https://link.juejin.cn?target=https://github.com/netty/netty \"Netty 源码\")\n\nNetty 源码结构和 Netty 的模块划分大体相符合：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e06c191b201542229539f50fd4bc9de3\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n#### Core 核心层模块\n\n**netty-common**模块是 Netty 的核心基础包，提供了丰富的工具类，其他模块都需要依赖它。在 common 模块中，常用的包括**通用工具类**和**自定义并发包**。\n\n*   通用工具类：比如定时器工具 TimerTask、时间轮 HashedWheelTimer 等。\n\n*   自定义并发包：比如异步模型 Future & Promise、相比 JDK 增强的 FastThreadLocal 等。\n\n在 **netty-buffer 模块中**Netty自己实现了的一个更加完备的 **ByteBuf 工具类**，用于网络通信中的数据载体。\n\n由于人性化的 Buffer API 设计，它已经成为 Java ByteBuffer 的完美替代品。ByteBuf 的动态性设计不仅解决了 ByteBuffer 长度固定造成的内存浪费问题，而且更安全地更改了 Buffer 的容量。此外 Netty 针对 ByteBuf 做了很多优化，例如缓存池化、减少数据拷贝的 CompositeByteBuf 等。\n\n**netty-resover**模块主要提供了一些有关**基础设施**的解析工具，包括 IP Address、Hostname、DNS 等。\n\n#### Protocol Support 协议支持层模块\n\n**netty-codec**模块主要负责编解码工作，通过编解码实现原始字节数据与业务实体对象之间的相互转化。\n\n如下图所示，Netty 支持了大多数业界主流协议的编解码器，如 HTTP、HTTP2、Redis、XML 等，为开发者节省了大量的精力。此外该模块提供了抽象的编解码类 ByteToMessageDecoder 和 MessageToByteEncoder，通过继承这两个类我们可以轻松实现自定义的编解码逻辑。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1223bbcec83e462487adf0fa213b9238\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n**netty-handler**模块主要负责数据处理工作。Netty 中关于数据处理的部分，本质上是一串有序 handler 的集合。netty-handler 模块提供了开箱即用的 ChannelHandler 实现类，例如日志、IP 过滤、流量整形等，如果你需要这些功能，仅需在 pipeline 中加入相应的 ChannelHandler 即可。\n\n#### Transport Service 传输服务层模块\n\nnetty-transport 模块可以说是 Netty 提供数据**处理和传输的核心模块**。该模块提供了很多非常重要的接口，如 Bootstrap、Channel、ChannelHandler、EventLoop、EventLoopGroup、ChannelPipeline 等。\n\n其中 Bootstrap 负责客户端或服务端的启动工作，包括创建、初始化 Channel 等；EventLoop 负责向注册的 Channel 发起 I/O 读写操作；ChannelPipeline 负责 ChannelHandler 的有序编排，这些组件在介绍 Netty 逻辑架构的时候都有所涉及。\n","source":"_posts/netty的一些概念（一）.md","raw":"## 目录\n\n*   [netty的一些概念（一）](#netty的一些概念一)\n\n    *   [协议](#协议)\n\n    *   [BIO/NIO/AIO](#bionioaio)\n\n        *   *   [1、BIO（同步阻塞IO）](#1bio同步阻塞io)\n\n            *   [2、NIO（同步非阻塞IO）](#2nio同步非阻塞io)\n\n            *   [3、AIO（异步非阻塞IO）](#3aio异步非阻塞io)\n\n    *   [Netty架构](#netty架构)\n\n        *   [1. Core 核心层](#1-core-核心层)\n\n        *   [2. Protocol Support 协议支持层](#2-protocol-support-协议支持层)\n\n        *   [3. Transport Service 传输服务层](#3-transport-service-传输服务层)\n\n    *   [二、Netty 逻辑架构](#二netty-逻辑架构)\n\n        *   [1. 网络通信层](#1-网络通信层)\n\n        *   [2. 事件调度层](#2-事件调度层)\n\n        *   [3. 服务编排层](#3-服务编排层)\n\n    *   [三、组件关系梳理](#三组件关系梳理)\n\n    *   [四、Netty 源码结构](#四netty-源码结构)\n\n        *   *   [Core 核心层模块](#core-核心层模块)\n\n            *   [Protocol Support 协议支持层模块](#protocol-support-协议支持层模块)\n\n            *   [Transport Service 传输服务层模块](#transport-service-传输服务层模块)\n\n# netty的一些概念（一）\n\n## 协议\n\n*   网络协议为计算机网络中进行数据交换而建立的规则、标准或约定的集合 例如平时我们签订的合同，主要用于约束两方的一些行为以及必须遵守的规则和约定，网络协议亦是如此，如果想要双方能够达成通信，必须约束双方，如果两个终端使用的字符集不一样，那么两个终端就不能识别对方发送的消息，所以无法完成通信，为了能进行通信，规定每个终端都要将各自字符集中的字符先变换为标准字符集的字符后，才进入网络传送，到达目的终端之后，再变换为该终端字符集的字符\n\n## BIO/NIO/AIO\n\n#### 1、BIO（同步阻塞IO）\n\n*   服务端创建一个**ServerSocket**，客户端就有一个Socket去链接这个ServerSocket，然后ServerSocket接收到客户端的Socket请求之后就会建立一个专属的**Socket+线程**去和**客户端的Socket**去通信（长时间维护）\n\n*   **同步阻塞通信**：客户端发送一个请求，服务端Socket就进行处理后返回，响应必须是等待处理完毕之后才会返回的，在这之前是什么也做不了。\n\n*   缺点：每次一个客户端的接入就会有一个线程+Socket对其进行通信，这会导致客户端接入太多，服务端线程过多，导致崩溃。\n\n*\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff087c520ea\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n#### 2、NIO（同步非阻塞IO）\n\n*   **Buffer**（缓冲区）：**channel将数据写入Buffer**，然后从Buffer中读取数据，包括int、Long、CharBuffer等多种数据类型。\n\n*   **channel**：通过channel进行数据的读写\n\n*   **selector**（多路复用器）：**selector会轮询channel**，如果某个channel中发生了数据请求，selector就会将通过SelectionKey会哦去有数据请求的channel，进行IO操作。一个Selector（一个线程）可以轮询上千万个channel，也就是客户端可以接入的数量激增。\n\n*   通过一个线程轮询大量的channel，每次获取一批有事件的channel，然后**对每个请求启动一个线程**进行处理，并设置一个线程池，当线程处理完毕以后，就回收线程，就不会像BIO需要一直维持为每个客户端创建的**Socket+线程**。\n\n*\n\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff2daf38c34\\~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)\n\n#### 3、AIO（异步非阻塞IO）\n\n*   基于Proactor模型，每个连接发送的请求，都会绑定一个Buffer，然后**通知操作系统异步的完成读操作**，此时程序可以去干别的事，操作系统完成数据的读取之后，就会回调接口，将读出的数据给你。\n\n*   将数据进行处理，接着将结果返回\n\n*   写数据的时候也是**给操作系统一个buffer**，让操作系统获取数据完成写操作。\n\n## Netty架构\n\n在 `Netty` 的官网中，给出了一张图，图片如下：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5db436d44a47c58cc97e292cfdb4bc\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n上图摘自 [Netty 官网首页](https://link.juejin.cn?target=https://netty.io/ \"Netty 官网首页\")。\n\n这就是 Netty 的模块划分图，可以清晰的看出，一共分为三个模块：\n\n*   `Core 核心层`；\n\n*   `Protocol Support 协议支持层`；\n\n*   `Transport Services 传输服务层`。\n\n可以看出，Netty 的模块设计具备较高的**通用性和可扩展性**。\n\n### 1. Core 核心层\n\n`Core 核心层`包含了 Netty 最为核心的功能，提供了底层网络通信的通用抽象和实现，包括可**扩展的事件模型、通用的通信 API、支持零拷贝的 ByteBuf 等**。\n\n### 2. Protocol Support 协议支持层\n\n协议支持层基本上覆盖了主流协议的编解码实现，如 `HTTP、SSL、Protobuf、压缩、大文件传输、WebSocket、文本、二进制`等主流协议，此外 Netty 还支持自定义应用层协议。\n\nNetty 丰富的协议支持降低了用户的开发成本，基于 Netty 我们可以快速开发 HTTP、WebSocket 等服务。\n\n### 3. Transport Service 传输服务层\n\n传输服务层提供了网络传输能力的定义和实现方法。它支持 Socket、HTTP 隧道、虚拟机管道等传输方式。\n\nNetty 对 TCP、UDP 等数据传输做了抽象和封装，用户可以更聚焦在业务逻辑实现上，而不必关系底层数据传输的细节。\n\n## 二、Netty 逻辑架构\n\n下图是 Netty 的逻辑处理架构。Netty 的逻辑处理架构为典型网络分层架构设计，共分为`网络通信层、事件调度层、服务编排层`，每一层各司其职。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f8cfaef5caf4855b1fcf59d3f769565\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n### 1. 网络通信层\n\n**网络通信层的职责是执行网络 I/O 的操作。它支持多种网络协议和 I/O 模型的连接操作。当网络数据读取到内核缓冲区后，会触发各种网络事件，这些网络事件会分发给事件调度层进行处理**。\n\n网络事件有连接事件、读事件、写事件等。\n\n网络通信层的**核心组件**包含 **BootStrap、ServerBootStrap、Channel** 三个组件。\n\n*   **BootStrap & ServerBootStrap**\n\n`Bootstrap` 是“引导”的意思，它主要负责整个 Netty 程序的启动、初始化、服务器连接等过程，它相当于一条主线，串联了 Netty 的其他核心组件。\n\nNetty 中的引导器共分为两种类型：一个为**用于客户端引导的 Bootstrap**，另一个为**用于服务端引导的 ServerBootStrap**，它们都继承自抽象类 `AbstractBootstrap`。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/833253fcd11c4f3f8bc8cf8f7aa02deb\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n`Bootstrap` 和 `ServerBootStrap` 十分相似，两者非常重要的区别在于 `Bootstrap` 可用于连接远端服务器，只绑定一个 `EventLoopGroup`。而 `ServerBootStrap` 则用于服务端启动绑定本地端口，会绑定两个 `EventLoopGroup`，这两个 EventLoopGroup 通常称为 Boss 和 Worker。\n\nServerBootStrap 中的 Boss 和 Worker 是什么角色呢？它们之间又是什么关系？这里的 Boss 和 Worker 可以理解为“老板”和“员工”的关系。每个服务器中都会有一个 Boss，也会有一群做事情的 Worker。Boss 会不停地接收新的连接，然后将连接分配给一个个 Worker 处理连接。\n\n`Boss` 对应 `Reactor` 模型中的 `MainReactor`，`Worker` 对应 `Reactor` 模型的 `SubReactor`。\n\n这里放一下 `Reactor` 的整体流程图。来源于：[gee.cs.oswego.edu/dl/cpjslide…](https://link.juejin.cn?target=https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf \"gee.cs.oswego.edu/dl/cpjslide…\")\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/731e45eadd614f73a6909552e77dd33d\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n总结来说就是客户端使用 `Bootstrap` 引导类，服务端使用 `ServerBootStrap` 引导类。\n\n有了 Bootstrap 组件，我们可以更加方便地配置和启动 Netty 应用程序，它是整个 Netty 的入口，串接了 Netty 所有核心组件的初始化工作。\n\n*   **Channel**\n\n`Channel` 的字面意思是“通道”，它是网络通信的载体。\n\n`Channel` 提供了基本的 API 用于网络 I/O 操作，如 `register、bind、connect、read、write、flush` 等。\n\nNetty 自己实现的 Channel 是以 JDK NIO Channel 为基础的，相比较于 JDK NIO，Netty 的 Channel 提供了更高层次的抽象，同时屏蔽了底层 Socket 的复杂性，赋予了 Channel 更加强大的功能，你在使用 Netty 时基本不需要再与 Java Socket 类直接打交道。\n\n下图是 Channel 家族的图谱。`AbstractChannel` 是整个家族的基类，派生出 `AbstractNioChannel、AbstractOioChannel`、，每一种都代表了不同的 I/O 模型和协议类型。常用的 Channel 实现类有：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81226d36b08b43bea0a42d8baf8babfc\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n*   NioServerSocketChannel 异步 TCP 服务端。\n\n*   NioSocketChannel 异步 TCP 客户端。\n\n*   OioServerSocketChannel 同步 TCP 服务端。\n\n*   OioSocketChannel 同步 TCP 客户端。\n\n*   NioDatagramChannel 异步 UDP 连接。\n\n*   OioDatagramChannel 同步 UDP 连接。\n\n注意：\n\n*   Nio 为前缀的，代表使用的是 NIO 模型，所以是异步的。\n\n*   Oio 为前缀的，代表使用的是 BIO 模型，所以是同步的。\n\nChannel 会有多种状态，如**连接建立、连接注册、数据读写、连接销毁**等。\n\n常见的状态对应事件如下：\n\n| 事件                  | 说明                               |\n| ------------------- | -------------------------------- |\n| channelRegistered   | Channel 创建后被注册到 EventLoop 上      |\n| channelUnregistered | Channel 创建后未注册或者从 EventLoop 取消注册 |\n| channelActive       | Channel 处于就绪状态，可以被读写             |\n| channelInactive     | Channel 处于非就绪状态                  |\n| channelRead         | Channel 可以从远端读取到数据               |\n| channelReadComplete | Channel 读取数据完成                   |\n\n总结一下：\n\n*   BootStrap 和 ServerBootStrap 分别负责客户端和服务端的启动，它们是非常强大的辅助工具类，串联了 Netty 的系列核心组件；\n\n*   Channel 是网络通信的载体，提供了与底层 Socket 交互的能力。\n\n### 2. 事件调度层\n\n**事件调度层的职责是通过 Reactor 线程模型对各类事件进行聚合处理，通过 Selector 主循环线程集成多种事件（ I/O 事件、信号事件、定时事件等），实际的业务处理逻辑是交由服务编排层中相关的 Handler 完成**。\n\n事件调度层的**核心组件**包括 **EventLoopGroup、EventLoop**。\n\n*   **EventLoopGroup & EventLoop**\n\nEventLoopGroup 本质是一个线程池，主要负责接收 I/O 请求，并分配线程执行处理请求。\n\nEventLoopGroup 类图如下：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f171c5963b064ee48424931080803266\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n我们发现它继承了 Executor 类，可以证明它是一个线程池。\n\n那这就说明，由它管理的一个个 EventLoop，就是一个个线程，由 EventLoopGroup 负责分配 EventLoop 进行处理事件。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a4e4c4bf9654c53a8ab2502664aac93\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n从上图中，我们可以总结出 EventLoopGroup、EventLoop、Channel 的几点关系。\n\n1.  一个 EventLoopGroup 往往包含一个或者多个 EventLoop。EventLoop 用于处理 Channel 生命周期内的所有 I/O 事件，如 accept、connect、read、write 等 I/O 事件。\n\n2.  EventLoop 同一时间会与一个线程绑定，每个 EventLoop 负责处理多个 Channel。\n\n3.  每新建一个 Channel，EventLoopGroup 会选择一个 EventLoop 与其绑定。该 Channel 在生命周期内都可以对 EventLoop 进行多次绑定和解绑。\n\n下图是 EventLoopGroup 的家族图谱。可以看出 Netty 提供了 EventLoopGroup 的多种实现，而且 EventLoop 则是 EventLoopGroup 的子接口，所以也可以把 EventLoop 理解为 EventLoopGroup，但是它只包含一个 EventLoop 。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f56d8b8ab04768a6a92f6d1611f1b8\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n`EventLoopGroup` 的实现类是 `NioEventLoopGroup`，`NioEventLoopGroup` 也是 Netty 中最被推荐使用的线程模型。\n\nNioEventLoopGroup 继承于 MultithreadEventLoopGroup，是基于 NIO 模型开发的，可以把 NioEventLoopGroup 理解为一个线程池，每个线程负责处理多个 Channel，而同一个 Channel 只会对应一个线程。\n\nEventLoopGroup 是 Netty 的核心处理引擎，那么 EventLoopGroup 和 Reactor 线程模型到底是什么关系呢？\n\n其实 EventLoopGroup 是 Netty Reactor 线程模型的具体实现方式，Netty 通过创建不同的 EventLoopGroup 参数配置，就可以支持 Reactor 的三种线程模型：\n\n1.  **单线程模型**：EventLoopGroup 只包含`一个 EventLoop`，Boss 和 Worker 使用同一个EventLoopGroup；\n\n2.  **多线程模型**：EventLoopGroup 包含`多个 EventLoop`，Boss 和 Worker 使用同一个EventLoopGroup；\n\n3.  **主从多线程模型**：EventLoopGroup 包含多个 EventLoop，Boss 是主 Reactor，Worker 是从 Reactor，它们分别使用不同的 EventLoopGroup，主 Reactor 负责新的网络连接 Channel 创建，然后把 Channel 注册到从 Reactor。\n\n### 3. 服务编排层\n\n**服务编排层的职责是负责组装各类服务，它是 Netty 的核心处理链，用以实现网络事件的动态编排和有序传播**。\n\n服务编排层的**核心组件**包括 **ChannelPipeline**、**ChannelHandler、ChannelHandlerContext**。\n\n*   **ChannelPipeline**\n\n`ChannelPipeline` 是 Netty 的核心编排组件，**负责组装各种 ChannelHandler**，实际数据的编解码以及加工处理操作都是由 ChannelHandler 完成的。\n\nChannelPipeline 可以理解为**ChannelHandler 的实例列表**——内部通过双向链表将不同的 ChannelHandler 链接在一起。当 I/O 读写事件触发时，ChannelPipeline 会依次调用 ChannelHandler 列表对 Channel 的数据进行拦截和处理。\n\n`ChannelPipeline 是线程安全的`，因为每一个新的 Channel 都会对应绑定一个新的 ChannelPipeline。一个 ChannelPipeline 关联一个 EventLoop，一个 EventLoop 仅会绑定一个线程。\n\nChannelPipeline、ChannelHandler 都是高度可定制的组件。开发者可以通过这两个核心组件掌握对 Channel 数据操作的控制权。下面我们看一下 ChannelPipeline 的结构图：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a386eede45142f79075eed075a3447c\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n从上图可以看出，ChannelPipeline 中包含入站 ChannelInboundHandler 和出站 ChannelOutboundHandler 两种处理器，我们结合客户端和服务端的数据收发流程来理解 Netty 的这两个概念。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94ef10fa0234401196cbe8f16abfd40c\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n客户端和服务端都有各自的 ChannelPipeline。以客户端为例，数据从客户端发向服务端，该过程称为**出站**，反之则称为**入站**。数据入站会由一系列 InBoundHandler 处理，然后再以相反方向的 OutBoundHandler 处理后完成出站。\n\n我们经常使用的编码 Encoder 是出站操作，解码 Decoder 是入站操作。服务端接收到客户端数据后，需要先经过 Decoder 入站处理后，再通过 Encoder 出站通知客户端。所以客户端和服务端一次完整的请求应答过程可以分为三个步骤：客户端出站（请求数据）、服务端入站（解析数据并执行业务逻辑）、服务端出站（响应结果）。\n\n*   **ChannelHandler & ChannelHandlerContext**\n\n下图描述了 Channel 与 ChannelPipeline 的关系，从图中可以看出，每创建一个 Channel 都会绑定一个新的 ChannelPipeline，ChannelPipeline 中每加入一个 ChannelHandler 都会绑定一个 ChannelHandlerContext。\n\n由此可见，ChannelPipeline、ChannelHandlerContext、ChannelHandler 三个组件的关系是密切相关的。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abccbee47d484fd8a066690aaa39d4e7\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\nChannelHandlerContext 用于保存 ChannelHandler 上下文，通过 ChannelHandlerContext 我们可以知道 ChannelPipeline 和 ChannelHandler 的关联关系。\n\nChannelHandlerContext 可以实现 ChannelHandler 之间的交互，ChannelHandlerContext 包含了 ChannelHandler 生命周期的所有事件，如 connect、bind、read、flush、write、close 等。\n\n此外，你可以试想这样一个场景，如果每个 ChannelHandler 都有一些通用的逻辑需要实现，没有 ChannelHandlerContext 这层模型抽象，你是不是需要写很多相同的代码呢？\n\n## 三、组件关系梳理\n\nNetty 组件交互流程图：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001f6025ba3460c83710d0b0b8f9ccd\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n*   服务端启动初始化时有 `Boss EventLoopGroup` 和 `Worker EventLoopGroup` 两个组件，其中 Boss 负责监听网络连接事件。当有新的网络连接事件到达时，则将 Channel 注册到 Worker EventLoopGroup。\n\n*   Worker EventLoopGroup 会被分配一个 EventLoop 负责处理该 Channel 的读写事件。每个 EventLoop 都是单线程的，通过 Selector 进行事件循环。\n\n*   当客户端发起 I/O 读写事件时，服务端 EventLoop 会进行数据的读取，然后通过 Pipeline 触发各种监听器进行数据的加工处理。\n\n*   客户端数据会被传递到 ChannelPipeline 的第一个 ChannelInboundHandler 中，数据处理完成后，将加工完成的数据传递给下一个 ChannelInboundHandler。\n\n*   当数据写回客户端时，会将处理结果在 ChannelPipeline 的 ChannelOutboundHandler 中传播，最后到达客户端。\n\n## 四、Netty 源码结构\n\n[Netty 源码](https://link.juejin.cn?target=https://github.com/netty/netty \"Netty 源码\")\n\nNetty 源码结构和 Netty 的模块划分大体相符合：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e06c191b201542229539f50fd4bc9de3\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n#### Core 核心层模块\n\n**netty-common**模块是 Netty 的核心基础包，提供了丰富的工具类，其他模块都需要依赖它。在 common 模块中，常用的包括**通用工具类**和**自定义并发包**。\n\n*   通用工具类：比如定时器工具 TimerTask、时间轮 HashedWheelTimer 等。\n\n*   自定义并发包：比如异步模型 Future & Promise、相比 JDK 增强的 FastThreadLocal 等。\n\n在 **netty-buffer 模块中**Netty自己实现了的一个更加完备的 **ByteBuf 工具类**，用于网络通信中的数据载体。\n\n由于人性化的 Buffer API 设计，它已经成为 Java ByteBuffer 的完美替代品。ByteBuf 的动态性设计不仅解决了 ByteBuffer 长度固定造成的内存浪费问题，而且更安全地更改了 Buffer 的容量。此外 Netty 针对 ByteBuf 做了很多优化，例如缓存池化、减少数据拷贝的 CompositeByteBuf 等。\n\n**netty-resover**模块主要提供了一些有关**基础设施**的解析工具，包括 IP Address、Hostname、DNS 等。\n\n#### Protocol Support 协议支持层模块\n\n**netty-codec**模块主要负责编解码工作，通过编解码实现原始字节数据与业务实体对象之间的相互转化。\n\n如下图所示，Netty 支持了大多数业界主流协议的编解码器，如 HTTP、HTTP2、Redis、XML 等，为开发者节省了大量的精力。此外该模块提供了抽象的编解码类 ByteToMessageDecoder 和 MessageToByteEncoder，通过继承这两个类我们可以轻松实现自定义的编解码逻辑。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1223bbcec83e462487adf0fa213b9238\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n**netty-handler**模块主要负责数据处理工作。Netty 中关于数据处理的部分，本质上是一串有序 handler 的集合。netty-handler 模块提供了开箱即用的 ChannelHandler 实现类，例如日志、IP 过滤、流量整形等，如果你需要这些功能，仅需在 pipeline 中加入相应的 ChannelHandler 即可。\n\n#### Transport Service 传输服务层模块\n\nnetty-transport 模块可以说是 Netty 提供数据**处理和传输的核心模块**。该模块提供了很多非常重要的接口，如 Bootstrap、Channel、ChannelHandler、EventLoop、EventLoopGroup、ChannelPipeline 等。\n\n其中 Bootstrap 负责客户端或服务端的启动工作，包括创建、初始化 Channel 等；EventLoop 负责向注册的 Channel 发起 I/O 读写操作；ChannelPipeline 负责 ChannelHandler 的有序编排，这些组件在介绍 Netty 逻辑架构的时候都有所涉及。\n","slug":"netty的一些概念（一）","published":1,"date":"2022-10-29T05:24:00.615Z","updated":"2022-10-29T05:22:08.504Z","_id":"cl9thabbs0002xotw02gg1g7u","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#netty%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E4%B8%80\">netty的一些概念（一）</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%8D%8F%E8%AE%AE\">协议</a></p>\n</li>\n<li><p><a href=\"#bionioaio\">BIO/NIO/AIO</a></p>\n<ul>\n<li><ul>\n<li><p>  <a href=\"#1bio%E5%90%8C%E6%AD%A5%E9%98%BB%E5%A1%9Eio\">1、BIO（同步阻塞IO）</a></p>\n</li>\n<li><p>  <a href=\"#2nio%E5%90%8C%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9Eio\">2、NIO（同步非阻塞IO）</a></p>\n</li>\n<li><p>  <a href=\"#3aio%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9Eio\">3、AIO（异步非阻塞IO）</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#netty%E6%9E%B6%E6%9E%84\">Netty架构</a></p>\n<ul>\n<li><p>  <a href=\"#1-core-%E6%A0%B8%E5%BF%83%E5%B1%82\">1. Core 核心层</a></p>\n</li>\n<li><p>  <a href=\"#2-protocol-support-%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81%E5%B1%82\">2. Protocol Support 协议支持层</a></p>\n</li>\n<li><p>  <a href=\"#3-transport-service-%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%B1%82\">3. Transport Service 传输服务层</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#%E4%BA%8Cnetty-%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84\">二、Netty 逻辑架构</a></p>\n<ul>\n<li><p>  <a href=\"#1-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%B1%82\">1. 网络通信层</a></p>\n</li>\n<li><p>  <a href=\"#2-%E4%BA%8B%E4%BB%B6%E8%B0%83%E5%BA%A6%E5%B1%82\">2. 事件调度层</a></p>\n</li>\n<li><p>  <a href=\"#3-%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%B1%82\">3. 服务编排层</a></p>\n</li>\n</ul>\n</li>\n<li><p>  <a href=\"#%E4%B8%89%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB%E6%A2%B3%E7%90%86\">三、组件关系梳理</a></p>\n</li>\n<li><p><a href=\"#%E5%9B%9Bnetty-%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84\">四、Netty 源码结构</a></p>\n<ul>\n<li><ul>\n<li><p>  <a href=\"#core-%E6%A0%B8%E5%BF%83%E5%B1%82%E6%A8%A1%E5%9D%97\">Core 核心层模块</a></p>\n</li>\n<li><p>  <a href=\"#protocol-support-%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81%E5%B1%82%E6%A8%A1%E5%9D%97\">Protocol Support 协议支持层模块</a></p>\n</li>\n<li><p>  <a href=\"#transport-service-%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%B1%82%E6%A8%A1%E5%9D%97\">Transport Service 传输服务层模块</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"netty的一些概念（一）\"><a href=\"#netty的一些概念（一）\" class=\"headerlink\" title=\"netty的一些概念（一）\"></a>netty的一些概念（一）</h1><h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><ul>\n<li>  网络协议为计算机网络中进行数据交换而建立的规则、标准或约定的集合 例如平时我们签订的合同，主要用于约束两方的一些行为以及必须遵守的规则和约定，网络协议亦是如此，如果想要双方能够达成通信，必须约束双方，如果两个终端使用的字符集不一样，那么两个终端就不能识别对方发送的消息，所以无法完成通信，为了能进行通信，规定每个终端都要将各自字符集中的字符先变换为标准字符集的字符后，才进入网络传送，到达目的终端之后，再变换为该终端字符集的字符</li>\n</ul>\n<h2 id=\"BIO-NIO-AIO\"><a href=\"#BIO-NIO-AIO\" class=\"headerlink\" title=\"BIO/NIO/AIO\"></a>BIO/NIO/AIO</h2><h4 id=\"1、BIO（同步阻塞IO）\"><a href=\"#1、BIO（同步阻塞IO）\" class=\"headerlink\" title=\"1、BIO（同步阻塞IO）\"></a>1、BIO（同步阻塞IO）</h4><ul>\n<li><p>  服务端创建一个<strong>ServerSocket</strong>，客户端就有一个Socket去链接这个ServerSocket，然后ServerSocket接收到客户端的Socket请求之后就会建立一个专属的<strong>Socket+线程</strong>去和<strong>客户端的Socket</strong>去通信（长时间维护）</p>\n</li>\n<li><p>  <strong>同步阻塞通信</strong>：客户端发送一个请求，服务端Socket就进行处理后返回，响应必须是等待处理完毕之后才会返回的，在这之前是什么也做不了。</p>\n</li>\n<li><p>  缺点：每次一个客户端的接入就会有一个线程+Socket对其进行通信，这会导致客户端接入太多，服务端线程过多，导致崩溃。</p>\n</li>\n</ul>\n<p>*</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff087c520ea~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h4 id=\"2、NIO（同步非阻塞IO）\"><a href=\"#2、NIO（同步非阻塞IO）\" class=\"headerlink\" title=\"2、NIO（同步非阻塞IO）\"></a>2、NIO（同步非阻塞IO）</h4><ul>\n<li><p>  <strong>Buffer</strong>（缓冲区）：<strong>channel将数据写入Buffer</strong>，然后从Buffer中读取数据，包括int、Long、CharBuffer等多种数据类型。</p>\n</li>\n<li><p>  <strong>channel</strong>：通过channel进行数据的读写</p>\n</li>\n<li><p>  <strong>selector</strong>（多路复用器）：<strong>selector会轮询channel</strong>，如果某个channel中发生了数据请求，selector就会将通过SelectionKey会哦去有数据请求的channel，进行IO操作。一个Selector（一个线程）可以轮询上千万个channel，也就是客户端可以接入的数量激增。</p>\n</li>\n<li><p>  通过一个线程轮询大量的channel，每次获取一批有事件的channel，然后<strong>对每个请求启动一个线程</strong>进行处理，并设置一个线程池，当线程处理完毕以后，就回收线程，就不会像BIO需要一直维持为每个客户端创建的<strong>Socket+线程</strong>。</p>\n</li>\n</ul>\n<p>*</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff2daf38c34~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h4 id=\"3、AIO（异步非阻塞IO）\"><a href=\"#3、AIO（异步非阻塞IO）\" class=\"headerlink\" title=\"3、AIO（异步非阻塞IO）\"></a>3、AIO（异步非阻塞IO）</h4><ul>\n<li><p>  基于Proactor模型，每个连接发送的请求，都会绑定一个Buffer，然后<strong>通知操作系统异步的完成读操作</strong>，此时程序可以去干别的事，操作系统完成数据的读取之后，就会回调接口，将读出的数据给你。</p>\n</li>\n<li><p>  将数据进行处理，接着将结果返回</p>\n</li>\n<li><p>  写数据的时候也是<strong>给操作系统一个buffer</strong>，让操作系统获取数据完成写操作。</p>\n</li>\n</ul>\n<h2 id=\"Netty架构\"><a href=\"#Netty架构\" class=\"headerlink\" title=\"Netty架构\"></a>Netty架构</h2><p>在 <code>Netty</code> 的官网中，给出了一张图，图片如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5db436d44a47c58cc97e292cfdb4bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>上图摘自 <a href=\"https://link.juejin.cn/?target=https://netty.io/\" title=\"Netty 官网首页\">Netty 官网首页</a>。</p>\n<p>这就是 Netty 的模块划分图，可以清晰的看出，一共分为三个模块：</p>\n<ul>\n<li><p>  <code>Core 核心层</code>；</p>\n</li>\n<li><p>  <code>Protocol Support 协议支持层</code>；</p>\n</li>\n<li><p>  <code>Transport Services 传输服务层</code>。</p>\n</li>\n</ul>\n<p>可以看出，Netty 的模块设计具备较高的<strong>通用性和可扩展性</strong>。</p>\n<h3 id=\"1-Core-核心层\"><a href=\"#1-Core-核心层\" class=\"headerlink\" title=\"1. Core 核心层\"></a>1. Core 核心层</h3><p><code>Core 核心层</code>包含了 Netty 最为核心的功能，提供了底层网络通信的通用抽象和实现，包括可<strong>扩展的事件模型、通用的通信 API、支持零拷贝的 ByteBuf 等</strong>。</p>\n<h3 id=\"2-Protocol-Support-协议支持层\"><a href=\"#2-Protocol-Support-协议支持层\" class=\"headerlink\" title=\"2. Protocol Support 协议支持层\"></a>2. Protocol Support 协议支持层</h3><p>协议支持层基本上覆盖了主流协议的编解码实现，如 <code>HTTP、SSL、Protobuf、压缩、大文件传输、WebSocket、文本、二进制</code>等主流协议，此外 Netty 还支持自定义应用层协议。</p>\n<p>Netty 丰富的协议支持降低了用户的开发成本，基于 Netty 我们可以快速开发 HTTP、WebSocket 等服务。</p>\n<h3 id=\"3-Transport-Service-传输服务层\"><a href=\"#3-Transport-Service-传输服务层\" class=\"headerlink\" title=\"3. Transport Service 传输服务层\"></a>3. Transport Service 传输服务层</h3><p>传输服务层提供了网络传输能力的定义和实现方法。它支持 Socket、HTTP 隧道、虚拟机管道等传输方式。</p>\n<p>Netty 对 TCP、UDP 等数据传输做了抽象和封装，用户可以更聚焦在业务逻辑实现上，而不必关系底层数据传输的细节。</p>\n<h2 id=\"二、Netty-逻辑架构\"><a href=\"#二、Netty-逻辑架构\" class=\"headerlink\" title=\"二、Netty 逻辑架构\"></a>二、Netty 逻辑架构</h2><p>下图是 Netty 的逻辑处理架构。Netty 的逻辑处理架构为典型网络分层架构设计，共分为<code>网络通信层、事件调度层、服务编排层</code>，每一层各司其职。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f8cfaef5caf4855b1fcf59d3f769565~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"1-网络通信层\"><a href=\"#1-网络通信层\" class=\"headerlink\" title=\"1. 网络通信层\"></a>1. 网络通信层</h3><p><strong>网络通信层的职责是执行网络 I/O 的操作。它支持多种网络协议和 I/O 模型的连接操作。当网络数据读取到内核缓冲区后，会触发各种网络事件，这些网络事件会分发给事件调度层进行处理</strong>。</p>\n<p>网络事件有连接事件、读事件、写事件等。</p>\n<p>网络通信层的<strong>核心组件</strong>包含 <strong>BootStrap、ServerBootStrap、Channel</strong> 三个组件。</p>\n<ul>\n<li>  <strong>BootStrap &amp; ServerBootStrap</strong></li>\n</ul>\n<p><code>Bootstrap</code> 是“引导”的意思，它主要负责整个 Netty 程序的启动、初始化、服务器连接等过程，它相当于一条主线，串联了 Netty 的其他核心组件。</p>\n<p>Netty 中的引导器共分为两种类型：一个为<strong>用于客户端引导的 Bootstrap</strong>，另一个为<strong>用于服务端引导的 ServerBootStrap</strong>，它们都继承自抽象类 <code>AbstractBootstrap</code>。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/833253fcd11c4f3f8bc8cf8f7aa02deb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><code>Bootstrap</code> 和 <code>ServerBootStrap</code> 十分相似，两者非常重要的区别在于 <code>Bootstrap</code> 可用于连接远端服务器，只绑定一个 <code>EventLoopGroup</code>。而 <code>ServerBootStrap</code> 则用于服务端启动绑定本地端口，会绑定两个 <code>EventLoopGroup</code>，这两个 EventLoopGroup 通常称为 Boss 和 Worker。</p>\n<p>ServerBootStrap 中的 Boss 和 Worker 是什么角色呢？它们之间又是什么关系？这里的 Boss 和 Worker 可以理解为“老板”和“员工”的关系。每个服务器中都会有一个 Boss，也会有一群做事情的 Worker。Boss 会不停地接收新的连接，然后将连接分配给一个个 Worker 处理连接。</p>\n<p><code>Boss</code> 对应 <code>Reactor</code> 模型中的 <code>MainReactor</code>，<code>Worker</code> 对应 <code>Reactor</code> 模型的 <code>SubReactor</code>。</p>\n<p>这里放一下 <code>Reactor</code> 的整体流程图。来源于：<a href=\"https://link.juejin.cn/?target=https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf\" title=\"gee.cs.oswego.edu/dl/cpjslide…\">gee.cs.oswego.edu/dl/cpjslide…</a></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/731e45eadd614f73a6909552e77dd33d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>总结来说就是客户端使用 <code>Bootstrap</code> 引导类，服务端使用 <code>ServerBootStrap</code> 引导类。</p>\n<p>有了 Bootstrap 组件，我们可以更加方便地配置和启动 Netty 应用程序，它是整个 Netty 的入口，串接了 Netty 所有核心组件的初始化工作。</p>\n<ul>\n<li>  <strong>Channel</strong></li>\n</ul>\n<p><code>Channel</code> 的字面意思是“通道”，它是网络通信的载体。</p>\n<p><code>Channel</code> 提供了基本的 API 用于网络 I/O 操作，如 <code>register、bind、connect、read、write、flush</code> 等。</p>\n<p>Netty 自己实现的 Channel 是以 JDK NIO Channel 为基础的，相比较于 JDK NIO，Netty 的 Channel 提供了更高层次的抽象，同时屏蔽了底层 Socket 的复杂性，赋予了 Channel 更加强大的功能，你在使用 Netty 时基本不需要再与 Java Socket 类直接打交道。</p>\n<p>下图是 Channel 家族的图谱。<code>AbstractChannel</code> 是整个家族的基类，派生出 <code>AbstractNioChannel、AbstractOioChannel</code>、，每一种都代表了不同的 I/O 模型和协议类型。常用的 Channel 实现类有：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81226d36b08b43bea0a42d8baf8babfc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<ul>\n<li><p>  NioServerSocketChannel 异步 TCP 服务端。</p>\n</li>\n<li><p>  NioSocketChannel 异步 TCP 客户端。</p>\n</li>\n<li><p>  OioServerSocketChannel 同步 TCP 服务端。</p>\n</li>\n<li><p>  OioSocketChannel 同步 TCP 客户端。</p>\n</li>\n<li><p>  NioDatagramChannel 异步 UDP 连接。</p>\n</li>\n<li><p>  OioDatagramChannel 同步 UDP 连接。</p>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li><p>  Nio 为前缀的，代表使用的是 NIO 模型，所以是异步的。</p>\n</li>\n<li><p>  Oio 为前缀的，代表使用的是 BIO 模型，所以是同步的。</p>\n</li>\n</ul>\n<p>Channel 会有多种状态，如<strong>连接建立、连接注册、数据读写、连接销毁</strong>等。</p>\n<p>常见的状态对应事件如下：</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>channelRegistered</td>\n<td>Channel 创建后被注册到 EventLoop 上</td>\n</tr>\n<tr>\n<td>channelUnregistered</td>\n<td>Channel 创建后未注册或者从 EventLoop 取消注册</td>\n</tr>\n<tr>\n<td>channelActive</td>\n<td>Channel 处于就绪状态，可以被读写</td>\n</tr>\n<tr>\n<td>channelInactive</td>\n<td>Channel 处于非就绪状态</td>\n</tr>\n<tr>\n<td>channelRead</td>\n<td>Channel 可以从远端读取到数据</td>\n</tr>\n<tr>\n<td>channelReadComplete</td>\n<td>Channel 读取数据完成</td>\n</tr>\n</tbody></table>\n<p>总结一下：</p>\n<ul>\n<li><p>  BootStrap 和 ServerBootStrap 分别负责客户端和服务端的启动，它们是非常强大的辅助工具类，串联了 Netty 的系列核心组件；</p>\n</li>\n<li><p>  Channel 是网络通信的载体，提供了与底层 Socket 交互的能力。</p>\n</li>\n</ul>\n<h3 id=\"2-事件调度层\"><a href=\"#2-事件调度层\" class=\"headerlink\" title=\"2. 事件调度层\"></a>2. 事件调度层</h3><p><strong>事件调度层的职责是通过 Reactor 线程模型对各类事件进行聚合处理，通过 Selector 主循环线程集成多种事件（ I/O 事件、信号事件、定时事件等），实际的业务处理逻辑是交由服务编排层中相关的 Handler 完成</strong>。</p>\n<p>事件调度层的<strong>核心组件</strong>包括 <strong>EventLoopGroup、EventLoop</strong>。</p>\n<ul>\n<li>  <strong>EventLoopGroup &amp; EventLoop</strong></li>\n</ul>\n<p>EventLoopGroup 本质是一个线程池，主要负责接收 I/O 请求，并分配线程执行处理请求。</p>\n<p>EventLoopGroup 类图如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f171c5963b064ee48424931080803266~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>我们发现它继承了 Executor 类，可以证明它是一个线程池。</p>\n<p>那这就说明，由它管理的一个个 EventLoop，就是一个个线程，由 EventLoopGroup 负责分配 EventLoop 进行处理事件。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a4e4c4bf9654c53a8ab2502664aac93~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>从上图中，我们可以总结出 EventLoopGroup、EventLoop、Channel 的几点关系。</p>\n<ol>\n<li><p> 一个 EventLoopGroup 往往包含一个或者多个 EventLoop。EventLoop 用于处理 Channel 生命周期内的所有 I/O 事件，如 accept、connect、read、write 等 I/O 事件。</p>\n</li>\n<li><p> EventLoop 同一时间会与一个线程绑定，每个 EventLoop 负责处理多个 Channel。</p>\n</li>\n<li><p> 每新建一个 Channel，EventLoopGroup 会选择一个 EventLoop 与其绑定。该 Channel 在生命周期内都可以对 EventLoop 进行多次绑定和解绑。</p>\n</li>\n</ol>\n<p>下图是 EventLoopGroup 的家族图谱。可以看出 Netty 提供了 EventLoopGroup 的多种实现，而且 EventLoop 则是 EventLoopGroup 的子接口，所以也可以把 EventLoop 理解为 EventLoopGroup，但是它只包含一个 EventLoop 。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f56d8b8ab04768a6a92f6d1611f1b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><code>EventLoopGroup</code> 的实现类是 <code>NioEventLoopGroup</code>，<code>NioEventLoopGroup</code> 也是 Netty 中最被推荐使用的线程模型。</p>\n<p>NioEventLoopGroup 继承于 MultithreadEventLoopGroup，是基于 NIO 模型开发的，可以把 NioEventLoopGroup 理解为一个线程池，每个线程负责处理多个 Channel，而同一个 Channel 只会对应一个线程。</p>\n<p>EventLoopGroup 是 Netty 的核心处理引擎，那么 EventLoopGroup 和 Reactor 线程模型到底是什么关系呢？</p>\n<p>其实 EventLoopGroup 是 Netty Reactor 线程模型的具体实现方式，Netty 通过创建不同的 EventLoopGroup 参数配置，就可以支持 Reactor 的三种线程模型：</p>\n<ol>\n<li><p> <strong>单线程模型</strong>：EventLoopGroup 只包含<code>一个 EventLoop</code>，Boss 和 Worker 使用同一个EventLoopGroup；</p>\n</li>\n<li><p> <strong>多线程模型</strong>：EventLoopGroup 包含<code>多个 EventLoop</code>，Boss 和 Worker 使用同一个EventLoopGroup；</p>\n</li>\n<li><p> <strong>主从多线程模型</strong>：EventLoopGroup 包含多个 EventLoop，Boss 是主 Reactor，Worker 是从 Reactor，它们分别使用不同的 EventLoopGroup，主 Reactor 负责新的网络连接 Channel 创建，然后把 Channel 注册到从 Reactor。</p>\n</li>\n</ol>\n<h3 id=\"3-服务编排层\"><a href=\"#3-服务编排层\" class=\"headerlink\" title=\"3. 服务编排层\"></a>3. 服务编排层</h3><p><strong>服务编排层的职责是负责组装各类服务，它是 Netty 的核心处理链，用以实现网络事件的动态编排和有序传播</strong>。</p>\n<p>服务编排层的<strong>核心组件</strong>包括 <strong>ChannelPipeline</strong>、<strong>ChannelHandler、ChannelHandlerContext</strong>。</p>\n<ul>\n<li>  <strong>ChannelPipeline</strong></li>\n</ul>\n<p><code>ChannelPipeline</code> 是 Netty 的核心编排组件，<strong>负责组装各种 ChannelHandler</strong>，实际数据的编解码以及加工处理操作都是由 ChannelHandler 完成的。</p>\n<p>ChannelPipeline 可以理解为<strong>ChannelHandler 的实例列表</strong>——内部通过双向链表将不同的 ChannelHandler 链接在一起。当 I/O 读写事件触发时，ChannelPipeline 会依次调用 ChannelHandler 列表对 Channel 的数据进行拦截和处理。</p>\n<p><code>ChannelPipeline 是线程安全的</code>，因为每一个新的 Channel 都会对应绑定一个新的 ChannelPipeline。一个 ChannelPipeline 关联一个 EventLoop，一个 EventLoop 仅会绑定一个线程。</p>\n<p>ChannelPipeline、ChannelHandler 都是高度可定制的组件。开发者可以通过这两个核心组件掌握对 Channel 数据操作的控制权。下面我们看一下 ChannelPipeline 的结构图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a386eede45142f79075eed075a3447c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>从上图可以看出，ChannelPipeline 中包含入站 ChannelInboundHandler 和出站 ChannelOutboundHandler 两种处理器，我们结合客户端和服务端的数据收发流程来理解 Netty 的这两个概念。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94ef10fa0234401196cbe8f16abfd40c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>客户端和服务端都有各自的 ChannelPipeline。以客户端为例，数据从客户端发向服务端，该过程称为<strong>出站</strong>，反之则称为<strong>入站</strong>。数据入站会由一系列 InBoundHandler 处理，然后再以相反方向的 OutBoundHandler 处理后完成出站。</p>\n<p>我们经常使用的编码 Encoder 是出站操作，解码 Decoder 是入站操作。服务端接收到客户端数据后，需要先经过 Decoder 入站处理后，再通过 Encoder 出站通知客户端。所以客户端和服务端一次完整的请求应答过程可以分为三个步骤：客户端出站（请求数据）、服务端入站（解析数据并执行业务逻辑）、服务端出站（响应结果）。</p>\n<ul>\n<li>  <strong>ChannelHandler &amp; ChannelHandlerContext</strong></li>\n</ul>\n<p>下图描述了 Channel 与 ChannelPipeline 的关系，从图中可以看出，每创建一个 Channel 都会绑定一个新的 ChannelPipeline，ChannelPipeline 中每加入一个 ChannelHandler 都会绑定一个 ChannelHandlerContext。</p>\n<p>由此可见，ChannelPipeline、ChannelHandlerContext、ChannelHandler 三个组件的关系是密切相关的。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abccbee47d484fd8a066690aaa39d4e7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>ChannelHandlerContext 用于保存 ChannelHandler 上下文，通过 ChannelHandlerContext 我们可以知道 ChannelPipeline 和 ChannelHandler 的关联关系。</p>\n<p>ChannelHandlerContext 可以实现 ChannelHandler 之间的交互，ChannelHandlerContext 包含了 ChannelHandler 生命周期的所有事件，如 connect、bind、read、flush、write、close 等。</p>\n<p>此外，你可以试想这样一个场景，如果每个 ChannelHandler 都有一些通用的逻辑需要实现，没有 ChannelHandlerContext 这层模型抽象，你是不是需要写很多相同的代码呢？</p>\n<h2 id=\"三、组件关系梳理\"><a href=\"#三、组件关系梳理\" class=\"headerlink\" title=\"三、组件关系梳理\"></a>三、组件关系梳理</h2><p>Netty 组件交互流程图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001f6025ba3460c83710d0b0b8f9ccd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<ul>\n<li><p>  服务端启动初始化时有 <code>Boss EventLoopGroup</code> 和 <code>Worker EventLoopGroup</code> 两个组件，其中 Boss 负责监听网络连接事件。当有新的网络连接事件到达时，则将 Channel 注册到 Worker EventLoopGroup。</p>\n</li>\n<li><p>  Worker EventLoopGroup 会被分配一个 EventLoop 负责处理该 Channel 的读写事件。每个 EventLoop 都是单线程的，通过 Selector 进行事件循环。</p>\n</li>\n<li><p>  当客户端发起 I/O 读写事件时，服务端 EventLoop 会进行数据的读取，然后通过 Pipeline 触发各种监听器进行数据的加工处理。</p>\n</li>\n<li><p>  客户端数据会被传递到 ChannelPipeline 的第一个 ChannelInboundHandler 中，数据处理完成后，将加工完成的数据传递给下一个 ChannelInboundHandler。</p>\n</li>\n<li><p>  当数据写回客户端时，会将处理结果在 ChannelPipeline 的 ChannelOutboundHandler 中传播，最后到达客户端。</p>\n</li>\n</ul>\n<h2 id=\"四、Netty-源码结构\"><a href=\"#四、Netty-源码结构\" class=\"headerlink\" title=\"四、Netty 源码结构\"></a>四、Netty 源码结构</h2><p><a href=\"https://link.juejin.cn/?target=https://github.com/netty/netty\" title=\"Netty 源码\">Netty 源码</a></p>\n<p>Netty 源码结构和 Netty 的模块划分大体相符合：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e06c191b201542229539f50fd4bc9de3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h4 id=\"Core-核心层模块\"><a href=\"#Core-核心层模块\" class=\"headerlink\" title=\"Core 核心层模块\"></a>Core 核心层模块</h4><p><strong>netty-common</strong>模块是 Netty 的核心基础包，提供了丰富的工具类，其他模块都需要依赖它。在 common 模块中，常用的包括<strong>通用工具类</strong>和<strong>自定义并发包</strong>。</p>\n<ul>\n<li><p>  通用工具类：比如定时器工具 TimerTask、时间轮 HashedWheelTimer 等。</p>\n</li>\n<li><p>  自定义并发包：比如异步模型 Future &amp; Promise、相比 JDK 增强的 FastThreadLocal 等。</p>\n</li>\n</ul>\n<p>在 <strong>netty-buffer 模块中</strong>Netty自己实现了的一个更加完备的 <strong>ByteBuf 工具类</strong>，用于网络通信中的数据载体。</p>\n<p>由于人性化的 Buffer API 设计，它已经成为 Java ByteBuffer 的完美替代品。ByteBuf 的动态性设计不仅解决了 ByteBuffer 长度固定造成的内存浪费问题，而且更安全地更改了 Buffer 的容量。此外 Netty 针对 ByteBuf 做了很多优化，例如缓存池化、减少数据拷贝的 CompositeByteBuf 等。</p>\n<p><strong>netty-resover</strong>模块主要提供了一些有关<strong>基础设施</strong>的解析工具，包括 IP Address、Hostname、DNS 等。</p>\n<h4 id=\"Protocol-Support-协议支持层模块\"><a href=\"#Protocol-Support-协议支持层模块\" class=\"headerlink\" title=\"Protocol Support 协议支持层模块\"></a>Protocol Support 协议支持层模块</h4><p><strong>netty-codec</strong>模块主要负责编解码工作，通过编解码实现原始字节数据与业务实体对象之间的相互转化。</p>\n<p>如下图所示，Netty 支持了大多数业界主流协议的编解码器，如 HTTP、HTTP2、Redis、XML 等，为开发者节省了大量的精力。此外该模块提供了抽象的编解码类 ByteToMessageDecoder 和 MessageToByteEncoder，通过继承这两个类我们可以轻松实现自定义的编解码逻辑。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1223bbcec83e462487adf0fa213b9238~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><strong>netty-handler</strong>模块主要负责数据处理工作。Netty 中关于数据处理的部分，本质上是一串有序 handler 的集合。netty-handler 模块提供了开箱即用的 ChannelHandler 实现类，例如日志、IP 过滤、流量整形等，如果你需要这些功能，仅需在 pipeline 中加入相应的 ChannelHandler 即可。</p>\n<h4 id=\"Transport-Service-传输服务层模块\"><a href=\"#Transport-Service-传输服务层模块\" class=\"headerlink\" title=\"Transport Service 传输服务层模块\"></a>Transport Service 传输服务层模块</h4><p>netty-transport 模块可以说是 Netty 提供数据<strong>处理和传输的核心模块</strong>。该模块提供了很多非常重要的接口，如 Bootstrap、Channel、ChannelHandler、EventLoop、EventLoopGroup、ChannelPipeline 等。</p>\n<p>其中 Bootstrap 负责客户端或服务端的启动工作，包括创建、初始化 Channel 等；EventLoop 负责向注册的 Channel 发起 I/O 读写操作；ChannelPipeline 负责 ChannelHandler 的有序编排，这些组件在介绍 Netty 逻辑架构的时候都有所涉及。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#netty%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E4%B8%80\">netty的一些概念（一）</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%8D%8F%E8%AE%AE\">协议</a></p>\n</li>\n<li><p><a href=\"#bionioaio\">BIO/NIO/AIO</a></p>\n<ul>\n<li><ul>\n<li><p>  <a href=\"#1bio%E5%90%8C%E6%AD%A5%E9%98%BB%E5%A1%9Eio\">1、BIO（同步阻塞IO）</a></p>\n</li>\n<li><p>  <a href=\"#2nio%E5%90%8C%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9Eio\">2、NIO（同步非阻塞IO）</a></p>\n</li>\n<li><p>  <a href=\"#3aio%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9Eio\">3、AIO（异步非阻塞IO）</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#netty%E6%9E%B6%E6%9E%84\">Netty架构</a></p>\n<ul>\n<li><p>  <a href=\"#1-core-%E6%A0%B8%E5%BF%83%E5%B1%82\">1. Core 核心层</a></p>\n</li>\n<li><p>  <a href=\"#2-protocol-support-%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81%E5%B1%82\">2. Protocol Support 协议支持层</a></p>\n</li>\n<li><p>  <a href=\"#3-transport-service-%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%B1%82\">3. Transport Service 传输服务层</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#%E4%BA%8Cnetty-%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84\">二、Netty 逻辑架构</a></p>\n<ul>\n<li><p>  <a href=\"#1-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%B1%82\">1. 网络通信层</a></p>\n</li>\n<li><p>  <a href=\"#2-%E4%BA%8B%E4%BB%B6%E8%B0%83%E5%BA%A6%E5%B1%82\">2. 事件调度层</a></p>\n</li>\n<li><p>  <a href=\"#3-%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E5%B1%82\">3. 服务编排层</a></p>\n</li>\n</ul>\n</li>\n<li><p>  <a href=\"#%E4%B8%89%E7%BB%84%E4%BB%B6%E5%85%B3%E7%B3%BB%E6%A2%B3%E7%90%86\">三、组件关系梳理</a></p>\n</li>\n<li><p><a href=\"#%E5%9B%9Bnetty-%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84\">四、Netty 源码结构</a></p>\n<ul>\n<li><ul>\n<li><p>  <a href=\"#core-%E6%A0%B8%E5%BF%83%E5%B1%82%E6%A8%A1%E5%9D%97\">Core 核心层模块</a></p>\n</li>\n<li><p>  <a href=\"#protocol-support-%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81%E5%B1%82%E6%A8%A1%E5%9D%97\">Protocol Support 协议支持层模块</a></p>\n</li>\n<li><p>  <a href=\"#transport-service-%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1%E5%B1%82%E6%A8%A1%E5%9D%97\">Transport Service 传输服务层模块</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"netty的一些概念（一）\"><a href=\"#netty的一些概念（一）\" class=\"headerlink\" title=\"netty的一些概念（一）\"></a>netty的一些概念（一）</h1><h2 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h2><ul>\n<li>  网络协议为计算机网络中进行数据交换而建立的规则、标准或约定的集合 例如平时我们签订的合同，主要用于约束两方的一些行为以及必须遵守的规则和约定，网络协议亦是如此，如果想要双方能够达成通信，必须约束双方，如果两个终端使用的字符集不一样，那么两个终端就不能识别对方发送的消息，所以无法完成通信，为了能进行通信，规定每个终端都要将各自字符集中的字符先变换为标准字符集的字符后，才进入网络传送，到达目的终端之后，再变换为该终端字符集的字符</li>\n</ul>\n<h2 id=\"BIO-NIO-AIO\"><a href=\"#BIO-NIO-AIO\" class=\"headerlink\" title=\"BIO/NIO/AIO\"></a>BIO/NIO/AIO</h2><h4 id=\"1、BIO（同步阻塞IO）\"><a href=\"#1、BIO（同步阻塞IO）\" class=\"headerlink\" title=\"1、BIO（同步阻塞IO）\"></a>1、BIO（同步阻塞IO）</h4><ul>\n<li><p>  服务端创建一个<strong>ServerSocket</strong>，客户端就有一个Socket去链接这个ServerSocket，然后ServerSocket接收到客户端的Socket请求之后就会建立一个专属的<strong>Socket+线程</strong>去和<strong>客户端的Socket</strong>去通信（长时间维护）</p>\n</li>\n<li><p>  <strong>同步阻塞通信</strong>：客户端发送一个请求，服务端Socket就进行处理后返回，响应必须是等待处理完毕之后才会返回的，在这之前是什么也做不了。</p>\n</li>\n<li><p>  缺点：每次一个客户端的接入就会有一个线程+Socket对其进行通信，这会导致客户端接入太多，服务端线程过多，导致崩溃。</p>\n</li>\n</ul>\n<p>*</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff087c520ea~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h4 id=\"2、NIO（同步非阻塞IO）\"><a href=\"#2、NIO（同步非阻塞IO）\" class=\"headerlink\" title=\"2、NIO（同步非阻塞IO）\"></a>2、NIO（同步非阻塞IO）</h4><ul>\n<li><p>  <strong>Buffer</strong>（缓冲区）：<strong>channel将数据写入Buffer</strong>，然后从Buffer中读取数据，包括int、Long、CharBuffer等多种数据类型。</p>\n</li>\n<li><p>  <strong>channel</strong>：通过channel进行数据的读写</p>\n</li>\n<li><p>  <strong>selector</strong>（多路复用器）：<strong>selector会轮询channel</strong>，如果某个channel中发生了数据请求，selector就会将通过SelectionKey会哦去有数据请求的channel，进行IO操作。一个Selector（一个线程）可以轮询上千万个channel，也就是客户端可以接入的数量激增。</p>\n</li>\n<li><p>  通过一个线程轮询大量的channel，每次获取一批有事件的channel，然后<strong>对每个请求启动一个线程</strong>进行处理，并设置一个线程池，当线程处理完毕以后，就回收线程，就不会像BIO需要一直维持为每个客户端创建的<strong>Socket+线程</strong>。</p>\n</li>\n</ul>\n<p>*</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/7/17153ff2daf38c34~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h4 id=\"3、AIO（异步非阻塞IO）\"><a href=\"#3、AIO（异步非阻塞IO）\" class=\"headerlink\" title=\"3、AIO（异步非阻塞IO）\"></a>3、AIO（异步非阻塞IO）</h4><ul>\n<li><p>  基于Proactor模型，每个连接发送的请求，都会绑定一个Buffer，然后<strong>通知操作系统异步的完成读操作</strong>，此时程序可以去干别的事，操作系统完成数据的读取之后，就会回调接口，将读出的数据给你。</p>\n</li>\n<li><p>  将数据进行处理，接着将结果返回</p>\n</li>\n<li><p>  写数据的时候也是<strong>给操作系统一个buffer</strong>，让操作系统获取数据完成写操作。</p>\n</li>\n</ul>\n<h2 id=\"Netty架构\"><a href=\"#Netty架构\" class=\"headerlink\" title=\"Netty架构\"></a>Netty架构</h2><p>在 <code>Netty</code> 的官网中，给出了一张图，图片如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5db436d44a47c58cc97e292cfdb4bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>上图摘自 <a href=\"https://link.juejin.cn/?target=https://netty.io/\" title=\"Netty 官网首页\">Netty 官网首页</a>。</p>\n<p>这就是 Netty 的模块划分图，可以清晰的看出，一共分为三个模块：</p>\n<ul>\n<li><p>  <code>Core 核心层</code>；</p>\n</li>\n<li><p>  <code>Protocol Support 协议支持层</code>；</p>\n</li>\n<li><p>  <code>Transport Services 传输服务层</code>。</p>\n</li>\n</ul>\n<p>可以看出，Netty 的模块设计具备较高的<strong>通用性和可扩展性</strong>。</p>\n<h3 id=\"1-Core-核心层\"><a href=\"#1-Core-核心层\" class=\"headerlink\" title=\"1. Core 核心层\"></a>1. Core 核心层</h3><p><code>Core 核心层</code>包含了 Netty 最为核心的功能，提供了底层网络通信的通用抽象和实现，包括可<strong>扩展的事件模型、通用的通信 API、支持零拷贝的 ByteBuf 等</strong>。</p>\n<h3 id=\"2-Protocol-Support-协议支持层\"><a href=\"#2-Protocol-Support-协议支持层\" class=\"headerlink\" title=\"2. Protocol Support 协议支持层\"></a>2. Protocol Support 协议支持层</h3><p>协议支持层基本上覆盖了主流协议的编解码实现，如 <code>HTTP、SSL、Protobuf、压缩、大文件传输、WebSocket、文本、二进制</code>等主流协议，此外 Netty 还支持自定义应用层协议。</p>\n<p>Netty 丰富的协议支持降低了用户的开发成本，基于 Netty 我们可以快速开发 HTTP、WebSocket 等服务。</p>\n<h3 id=\"3-Transport-Service-传输服务层\"><a href=\"#3-Transport-Service-传输服务层\" class=\"headerlink\" title=\"3. Transport Service 传输服务层\"></a>3. Transport Service 传输服务层</h3><p>传输服务层提供了网络传输能力的定义和实现方法。它支持 Socket、HTTP 隧道、虚拟机管道等传输方式。</p>\n<p>Netty 对 TCP、UDP 等数据传输做了抽象和封装，用户可以更聚焦在业务逻辑实现上，而不必关系底层数据传输的细节。</p>\n<h2 id=\"二、Netty-逻辑架构\"><a href=\"#二、Netty-逻辑架构\" class=\"headerlink\" title=\"二、Netty 逻辑架构\"></a>二、Netty 逻辑架构</h2><p>下图是 Netty 的逻辑处理架构。Netty 的逻辑处理架构为典型网络分层架构设计，共分为<code>网络通信层、事件调度层、服务编排层</code>，每一层各司其职。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f8cfaef5caf4855b1fcf59d3f769565~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h3 id=\"1-网络通信层\"><a href=\"#1-网络通信层\" class=\"headerlink\" title=\"1. 网络通信层\"></a>1. 网络通信层</h3><p><strong>网络通信层的职责是执行网络 I/O 的操作。它支持多种网络协议和 I/O 模型的连接操作。当网络数据读取到内核缓冲区后，会触发各种网络事件，这些网络事件会分发给事件调度层进行处理</strong>。</p>\n<p>网络事件有连接事件、读事件、写事件等。</p>\n<p>网络通信层的<strong>核心组件</strong>包含 <strong>BootStrap、ServerBootStrap、Channel</strong> 三个组件。</p>\n<ul>\n<li>  <strong>BootStrap &amp; ServerBootStrap</strong></li>\n</ul>\n<p><code>Bootstrap</code> 是“引导”的意思，它主要负责整个 Netty 程序的启动、初始化、服务器连接等过程，它相当于一条主线，串联了 Netty 的其他核心组件。</p>\n<p>Netty 中的引导器共分为两种类型：一个为<strong>用于客户端引导的 Bootstrap</strong>，另一个为<strong>用于服务端引导的 ServerBootStrap</strong>，它们都继承自抽象类 <code>AbstractBootstrap</code>。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/833253fcd11c4f3f8bc8cf8f7aa02deb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><code>Bootstrap</code> 和 <code>ServerBootStrap</code> 十分相似，两者非常重要的区别在于 <code>Bootstrap</code> 可用于连接远端服务器，只绑定一个 <code>EventLoopGroup</code>。而 <code>ServerBootStrap</code> 则用于服务端启动绑定本地端口，会绑定两个 <code>EventLoopGroup</code>，这两个 EventLoopGroup 通常称为 Boss 和 Worker。</p>\n<p>ServerBootStrap 中的 Boss 和 Worker 是什么角色呢？它们之间又是什么关系？这里的 Boss 和 Worker 可以理解为“老板”和“员工”的关系。每个服务器中都会有一个 Boss，也会有一群做事情的 Worker。Boss 会不停地接收新的连接，然后将连接分配给一个个 Worker 处理连接。</p>\n<p><code>Boss</code> 对应 <code>Reactor</code> 模型中的 <code>MainReactor</code>，<code>Worker</code> 对应 <code>Reactor</code> 模型的 <code>SubReactor</code>。</p>\n<p>这里放一下 <code>Reactor</code> 的整体流程图。来源于：<a href=\"https://link.juejin.cn/?target=https://gee.cs.oswego.edu/dl/cpjslides/nio.pdf\" title=\"gee.cs.oswego.edu/dl/cpjslide…\">gee.cs.oswego.edu/dl/cpjslide…</a></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/731e45eadd614f73a6909552e77dd33d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>总结来说就是客户端使用 <code>Bootstrap</code> 引导类，服务端使用 <code>ServerBootStrap</code> 引导类。</p>\n<p>有了 Bootstrap 组件，我们可以更加方便地配置和启动 Netty 应用程序，它是整个 Netty 的入口，串接了 Netty 所有核心组件的初始化工作。</p>\n<ul>\n<li>  <strong>Channel</strong></li>\n</ul>\n<p><code>Channel</code> 的字面意思是“通道”，它是网络通信的载体。</p>\n<p><code>Channel</code> 提供了基本的 API 用于网络 I/O 操作，如 <code>register、bind、connect、read、write、flush</code> 等。</p>\n<p>Netty 自己实现的 Channel 是以 JDK NIO Channel 为基础的，相比较于 JDK NIO，Netty 的 Channel 提供了更高层次的抽象，同时屏蔽了底层 Socket 的复杂性，赋予了 Channel 更加强大的功能，你在使用 Netty 时基本不需要再与 Java Socket 类直接打交道。</p>\n<p>下图是 Channel 家族的图谱。<code>AbstractChannel</code> 是整个家族的基类，派生出 <code>AbstractNioChannel、AbstractOioChannel</code>、，每一种都代表了不同的 I/O 模型和协议类型。常用的 Channel 实现类有：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81226d36b08b43bea0a42d8baf8babfc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<ul>\n<li><p>  NioServerSocketChannel 异步 TCP 服务端。</p>\n</li>\n<li><p>  NioSocketChannel 异步 TCP 客户端。</p>\n</li>\n<li><p>  OioServerSocketChannel 同步 TCP 服务端。</p>\n</li>\n<li><p>  OioSocketChannel 同步 TCP 客户端。</p>\n</li>\n<li><p>  NioDatagramChannel 异步 UDP 连接。</p>\n</li>\n<li><p>  OioDatagramChannel 同步 UDP 连接。</p>\n</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li><p>  Nio 为前缀的，代表使用的是 NIO 模型，所以是异步的。</p>\n</li>\n<li><p>  Oio 为前缀的，代表使用的是 BIO 模型，所以是同步的。</p>\n</li>\n</ul>\n<p>Channel 会有多种状态，如<strong>连接建立、连接注册、数据读写、连接销毁</strong>等。</p>\n<p>常见的状态对应事件如下：</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>channelRegistered</td>\n<td>Channel 创建后被注册到 EventLoop 上</td>\n</tr>\n<tr>\n<td>channelUnregistered</td>\n<td>Channel 创建后未注册或者从 EventLoop 取消注册</td>\n</tr>\n<tr>\n<td>channelActive</td>\n<td>Channel 处于就绪状态，可以被读写</td>\n</tr>\n<tr>\n<td>channelInactive</td>\n<td>Channel 处于非就绪状态</td>\n</tr>\n<tr>\n<td>channelRead</td>\n<td>Channel 可以从远端读取到数据</td>\n</tr>\n<tr>\n<td>channelReadComplete</td>\n<td>Channel 读取数据完成</td>\n</tr>\n</tbody></table>\n<p>总结一下：</p>\n<ul>\n<li><p>  BootStrap 和 ServerBootStrap 分别负责客户端和服务端的启动，它们是非常强大的辅助工具类，串联了 Netty 的系列核心组件；</p>\n</li>\n<li><p>  Channel 是网络通信的载体，提供了与底层 Socket 交互的能力。</p>\n</li>\n</ul>\n<h3 id=\"2-事件调度层\"><a href=\"#2-事件调度层\" class=\"headerlink\" title=\"2. 事件调度层\"></a>2. 事件调度层</h3><p><strong>事件调度层的职责是通过 Reactor 线程模型对各类事件进行聚合处理，通过 Selector 主循环线程集成多种事件（ I/O 事件、信号事件、定时事件等），实际的业务处理逻辑是交由服务编排层中相关的 Handler 完成</strong>。</p>\n<p>事件调度层的<strong>核心组件</strong>包括 <strong>EventLoopGroup、EventLoop</strong>。</p>\n<ul>\n<li>  <strong>EventLoopGroup &amp; EventLoop</strong></li>\n</ul>\n<p>EventLoopGroup 本质是一个线程池，主要负责接收 I/O 请求，并分配线程执行处理请求。</p>\n<p>EventLoopGroup 类图如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f171c5963b064ee48424931080803266~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>我们发现它继承了 Executor 类，可以证明它是一个线程池。</p>\n<p>那这就说明，由它管理的一个个 EventLoop，就是一个个线程，由 EventLoopGroup 负责分配 EventLoop 进行处理事件。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a4e4c4bf9654c53a8ab2502664aac93~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>从上图中，我们可以总结出 EventLoopGroup、EventLoop、Channel 的几点关系。</p>\n<ol>\n<li><p> 一个 EventLoopGroup 往往包含一个或者多个 EventLoop。EventLoop 用于处理 Channel 生命周期内的所有 I/O 事件，如 accept、connect、read、write 等 I/O 事件。</p>\n</li>\n<li><p> EventLoop 同一时间会与一个线程绑定，每个 EventLoop 负责处理多个 Channel。</p>\n</li>\n<li><p> 每新建一个 Channel，EventLoopGroup 会选择一个 EventLoop 与其绑定。该 Channel 在生命周期内都可以对 EventLoop 进行多次绑定和解绑。</p>\n</li>\n</ol>\n<p>下图是 EventLoopGroup 的家族图谱。可以看出 Netty 提供了 EventLoopGroup 的多种实现，而且 EventLoop 则是 EventLoopGroup 的子接口，所以也可以把 EventLoop 理解为 EventLoopGroup，但是它只包含一个 EventLoop 。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f56d8b8ab04768a6a92f6d1611f1b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><code>EventLoopGroup</code> 的实现类是 <code>NioEventLoopGroup</code>，<code>NioEventLoopGroup</code> 也是 Netty 中最被推荐使用的线程模型。</p>\n<p>NioEventLoopGroup 继承于 MultithreadEventLoopGroup，是基于 NIO 模型开发的，可以把 NioEventLoopGroup 理解为一个线程池，每个线程负责处理多个 Channel，而同一个 Channel 只会对应一个线程。</p>\n<p>EventLoopGroup 是 Netty 的核心处理引擎，那么 EventLoopGroup 和 Reactor 线程模型到底是什么关系呢？</p>\n<p>其实 EventLoopGroup 是 Netty Reactor 线程模型的具体实现方式，Netty 通过创建不同的 EventLoopGroup 参数配置，就可以支持 Reactor 的三种线程模型：</p>\n<ol>\n<li><p> <strong>单线程模型</strong>：EventLoopGroup 只包含<code>一个 EventLoop</code>，Boss 和 Worker 使用同一个EventLoopGroup；</p>\n</li>\n<li><p> <strong>多线程模型</strong>：EventLoopGroup 包含<code>多个 EventLoop</code>，Boss 和 Worker 使用同一个EventLoopGroup；</p>\n</li>\n<li><p> <strong>主从多线程模型</strong>：EventLoopGroup 包含多个 EventLoop，Boss 是主 Reactor，Worker 是从 Reactor，它们分别使用不同的 EventLoopGroup，主 Reactor 负责新的网络连接 Channel 创建，然后把 Channel 注册到从 Reactor。</p>\n</li>\n</ol>\n<h3 id=\"3-服务编排层\"><a href=\"#3-服务编排层\" class=\"headerlink\" title=\"3. 服务编排层\"></a>3. 服务编排层</h3><p><strong>服务编排层的职责是负责组装各类服务，它是 Netty 的核心处理链，用以实现网络事件的动态编排和有序传播</strong>。</p>\n<p>服务编排层的<strong>核心组件</strong>包括 <strong>ChannelPipeline</strong>、<strong>ChannelHandler、ChannelHandlerContext</strong>。</p>\n<ul>\n<li>  <strong>ChannelPipeline</strong></li>\n</ul>\n<p><code>ChannelPipeline</code> 是 Netty 的核心编排组件，<strong>负责组装各种 ChannelHandler</strong>，实际数据的编解码以及加工处理操作都是由 ChannelHandler 完成的。</p>\n<p>ChannelPipeline 可以理解为<strong>ChannelHandler 的实例列表</strong>——内部通过双向链表将不同的 ChannelHandler 链接在一起。当 I/O 读写事件触发时，ChannelPipeline 会依次调用 ChannelHandler 列表对 Channel 的数据进行拦截和处理。</p>\n<p><code>ChannelPipeline 是线程安全的</code>，因为每一个新的 Channel 都会对应绑定一个新的 ChannelPipeline。一个 ChannelPipeline 关联一个 EventLoop，一个 EventLoop 仅会绑定一个线程。</p>\n<p>ChannelPipeline、ChannelHandler 都是高度可定制的组件。开发者可以通过这两个核心组件掌握对 Channel 数据操作的控制权。下面我们看一下 ChannelPipeline 的结构图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a386eede45142f79075eed075a3447c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>从上图可以看出，ChannelPipeline 中包含入站 ChannelInboundHandler 和出站 ChannelOutboundHandler 两种处理器，我们结合客户端和服务端的数据收发流程来理解 Netty 的这两个概念。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94ef10fa0234401196cbe8f16abfd40c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>客户端和服务端都有各自的 ChannelPipeline。以客户端为例，数据从客户端发向服务端，该过程称为<strong>出站</strong>，反之则称为<strong>入站</strong>。数据入站会由一系列 InBoundHandler 处理，然后再以相反方向的 OutBoundHandler 处理后完成出站。</p>\n<p>我们经常使用的编码 Encoder 是出站操作，解码 Decoder 是入站操作。服务端接收到客户端数据后，需要先经过 Decoder 入站处理后，再通过 Encoder 出站通知客户端。所以客户端和服务端一次完整的请求应答过程可以分为三个步骤：客户端出站（请求数据）、服务端入站（解析数据并执行业务逻辑）、服务端出站（响应结果）。</p>\n<ul>\n<li>  <strong>ChannelHandler &amp; ChannelHandlerContext</strong></li>\n</ul>\n<p>下图描述了 Channel 与 ChannelPipeline 的关系，从图中可以看出，每创建一个 Channel 都会绑定一个新的 ChannelPipeline，ChannelPipeline 中每加入一个 ChannelHandler 都会绑定一个 ChannelHandlerContext。</p>\n<p>由此可见，ChannelPipeline、ChannelHandlerContext、ChannelHandler 三个组件的关系是密切相关的。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abccbee47d484fd8a066690aaa39d4e7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>ChannelHandlerContext 用于保存 ChannelHandler 上下文，通过 ChannelHandlerContext 我们可以知道 ChannelPipeline 和 ChannelHandler 的关联关系。</p>\n<p>ChannelHandlerContext 可以实现 ChannelHandler 之间的交互，ChannelHandlerContext 包含了 ChannelHandler 生命周期的所有事件，如 connect、bind、read、flush、write、close 等。</p>\n<p>此外，你可以试想这样一个场景，如果每个 ChannelHandler 都有一些通用的逻辑需要实现，没有 ChannelHandlerContext 这层模型抽象，你是不是需要写很多相同的代码呢？</p>\n<h2 id=\"三、组件关系梳理\"><a href=\"#三、组件关系梳理\" class=\"headerlink\" title=\"三、组件关系梳理\"></a>三、组件关系梳理</h2><p>Netty 组件交互流程图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001f6025ba3460c83710d0b0b8f9ccd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<ul>\n<li><p>  服务端启动初始化时有 <code>Boss EventLoopGroup</code> 和 <code>Worker EventLoopGroup</code> 两个组件，其中 Boss 负责监听网络连接事件。当有新的网络连接事件到达时，则将 Channel 注册到 Worker EventLoopGroup。</p>\n</li>\n<li><p>  Worker EventLoopGroup 会被分配一个 EventLoop 负责处理该 Channel 的读写事件。每个 EventLoop 都是单线程的，通过 Selector 进行事件循环。</p>\n</li>\n<li><p>  当客户端发起 I/O 读写事件时，服务端 EventLoop 会进行数据的读取，然后通过 Pipeline 触发各种监听器进行数据的加工处理。</p>\n</li>\n<li><p>  客户端数据会被传递到 ChannelPipeline 的第一个 ChannelInboundHandler 中，数据处理完成后，将加工完成的数据传递给下一个 ChannelInboundHandler。</p>\n</li>\n<li><p>  当数据写回客户端时，会将处理结果在 ChannelPipeline 的 ChannelOutboundHandler 中传播，最后到达客户端。</p>\n</li>\n</ul>\n<h2 id=\"四、Netty-源码结构\"><a href=\"#四、Netty-源码结构\" class=\"headerlink\" title=\"四、Netty 源码结构\"></a>四、Netty 源码结构</h2><p><a href=\"https://link.juejin.cn/?target=https://github.com/netty/netty\" title=\"Netty 源码\">Netty 源码</a></p>\n<p>Netty 源码结构和 Netty 的模块划分大体相符合：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e06c191b201542229539f50fd4bc9de3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<h4 id=\"Core-核心层模块\"><a href=\"#Core-核心层模块\" class=\"headerlink\" title=\"Core 核心层模块\"></a>Core 核心层模块</h4><p><strong>netty-common</strong>模块是 Netty 的核心基础包，提供了丰富的工具类，其他模块都需要依赖它。在 common 模块中，常用的包括<strong>通用工具类</strong>和<strong>自定义并发包</strong>。</p>\n<ul>\n<li><p>  通用工具类：比如定时器工具 TimerTask、时间轮 HashedWheelTimer 等。</p>\n</li>\n<li><p>  自定义并发包：比如异步模型 Future &amp; Promise、相比 JDK 增强的 FastThreadLocal 等。</p>\n</li>\n</ul>\n<p>在 <strong>netty-buffer 模块中</strong>Netty自己实现了的一个更加完备的 <strong>ByteBuf 工具类</strong>，用于网络通信中的数据载体。</p>\n<p>由于人性化的 Buffer API 设计，它已经成为 Java ByteBuffer 的完美替代品。ByteBuf 的动态性设计不仅解决了 ByteBuffer 长度固定造成的内存浪费问题，而且更安全地更改了 Buffer 的容量。此外 Netty 针对 ByteBuf 做了很多优化，例如缓存池化、减少数据拷贝的 CompositeByteBuf 等。</p>\n<p><strong>netty-resover</strong>模块主要提供了一些有关<strong>基础设施</strong>的解析工具，包括 IP Address、Hostname、DNS 等。</p>\n<h4 id=\"Protocol-Support-协议支持层模块\"><a href=\"#Protocol-Support-协议支持层模块\" class=\"headerlink\" title=\"Protocol Support 协议支持层模块\"></a>Protocol Support 协议支持层模块</h4><p><strong>netty-codec</strong>模块主要负责编解码工作，通过编解码实现原始字节数据与业务实体对象之间的相互转化。</p>\n<p>如下图所示，Netty 支持了大多数业界主流协议的编解码器，如 HTTP、HTTP2、Redis、XML 等，为开发者节省了大量的精力。此外该模块提供了抽象的编解码类 ByteToMessageDecoder 和 MessageToByteEncoder，通过继承这两个类我们可以轻松实现自定义的编解码逻辑。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1223bbcec83e462487adf0fa213b9238~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p><strong>netty-handler</strong>模块主要负责数据处理工作。Netty 中关于数据处理的部分，本质上是一串有序 handler 的集合。netty-handler 模块提供了开箱即用的 ChannelHandler 实现类，例如日志、IP 过滤、流量整形等，如果你需要这些功能，仅需在 pipeline 中加入相应的 ChannelHandler 即可。</p>\n<h4 id=\"Transport-Service-传输服务层模块\"><a href=\"#Transport-Service-传输服务层模块\" class=\"headerlink\" title=\"Transport Service 传输服务层模块\"></a>Transport Service 传输服务层模块</h4><p>netty-transport 模块可以说是 Netty 提供数据<strong>处理和传输的核心模块</strong>。该模块提供了很多非常重要的接口，如 Bootstrap、Channel、ChannelHandler、EventLoop、EventLoopGroup、ChannelPipeline 等。</p>\n<p>其中 Bootstrap 负责客户端或服务端的启动工作，包括创建、初始化 Channel 等；EventLoop 负责向注册的 Channel 发起 I/O 读写操作；ChannelPipeline 负责 ChannelHandler 的有序编排，这些组件在介绍 Netty 逻辑架构的时候都有所涉及。</p>\n"},{"_content":"# netty\n\n[netty的一些概念（一）](https://www.wolai.com/9DVKXTsrxmqmw5gpWcMvkL \"netty的一些概念（一）\")\n\n[netty的一些概念（二）](https://www.wolai.com/ivN7qMxvGesvGNGCZEBfHS \"netty的一些概念（二）\")\n\n[ByteBuffer](https://www.wolai.com/bzLrQrb5q8pbZx2tkkXgGs \"ByteBuffer\")\n\n[EventLoopGroup](https://www.wolai.com/dmwZrjR6Xfi4174g8WYMvJ \"EventLoopGroup\")\n\n[Channel](https://www.wolai.com/x12MANAkkuPHqiYFgCfg5B \"Channel\")\n\n[Pipeline和ChannelHandler](https://www.wolai.com/ut7UK7uRjbhHutS2QNGtHr \"Pipeline和ChannelHandler\")\n","source":"_posts/netty.md","raw":"# netty\n\n[netty的一些概念（一）](https://www.wolai.com/9DVKXTsrxmqmw5gpWcMvkL \"netty的一些概念（一）\")\n\n[netty的一些概念（二）](https://www.wolai.com/ivN7qMxvGesvGNGCZEBfHS \"netty的一些概念（二）\")\n\n[ByteBuffer](https://www.wolai.com/bzLrQrb5q8pbZx2tkkXgGs \"ByteBuffer\")\n\n[EventLoopGroup](https://www.wolai.com/dmwZrjR6Xfi4174g8WYMvJ \"EventLoopGroup\")\n\n[Channel](https://www.wolai.com/x12MANAkkuPHqiYFgCfg5B \"Channel\")\n\n[Pipeline和ChannelHandler](https://www.wolai.com/ut7UK7uRjbhHutS2QNGtHr \"Pipeline和ChannelHandler\")\n","slug":"netty","published":1,"date":"2022-10-29T05:24:00.624Z","updated":"2022-10-29T05:21:45.447Z","_id":"cl9thabbw0003xotw89grb70c","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"netty\"><a href=\"#netty\" class=\"headerlink\" title=\"netty\"></a>netty</h1><p><a href=\"https://www.wolai.com/9DVKXTsrxmqmw5gpWcMvkL\" title=\"netty的一些概念（一）\">netty的一些概念（一）</a></p>\n<p><a href=\"https://www.wolai.com/ivN7qMxvGesvGNGCZEBfHS\" title=\"netty的一些概念（二）\">netty的一些概念（二）</a></p>\n<p><a href=\"https://www.wolai.com/bzLrQrb5q8pbZx2tkkXgGs\" title=\"ByteBuffer\">ByteBuffer</a></p>\n<p><a href=\"https://www.wolai.com/dmwZrjR6Xfi4174g8WYMvJ\" title=\"EventLoopGroup\">EventLoopGroup</a></p>\n<p><a href=\"https://www.wolai.com/x12MANAkkuPHqiYFgCfg5B\" title=\"Channel\">Channel</a></p>\n<p><a href=\"https://www.wolai.com/ut7UK7uRjbhHutS2QNGtHr\" title=\"Pipeline和ChannelHandler\">Pipeline和ChannelHandler</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"netty\"><a href=\"#netty\" class=\"headerlink\" title=\"netty\"></a>netty</h1><p><a href=\"https://www.wolai.com/9DVKXTsrxmqmw5gpWcMvkL\" title=\"netty的一些概念（一）\">netty的一些概念（一）</a></p>\n<p><a href=\"https://www.wolai.com/ivN7qMxvGesvGNGCZEBfHS\" title=\"netty的一些概念（二）\">netty的一些概念（二）</a></p>\n<p><a href=\"https://www.wolai.com/bzLrQrb5q8pbZx2tkkXgGs\" title=\"ByteBuffer\">ByteBuffer</a></p>\n<p><a href=\"https://www.wolai.com/dmwZrjR6Xfi4174g8WYMvJ\" title=\"EventLoopGroup\">EventLoopGroup</a></p>\n<p><a href=\"https://www.wolai.com/x12MANAkkuPHqiYFgCfg5B\" title=\"Channel\">Channel</a></p>\n<p><a href=\"https://www.wolai.com/ut7UK7uRjbhHutS2QNGtHr\" title=\"Pipeline和ChannelHandler\">Pipeline和ChannelHandler</a></p>\n"},{"_content":"## 目录\n\n*   [Channel](#channel)\n\n    *   [Channel工作原理](#channel工作原理)\n\n    *   [Channel核心功能](#channel核心功能)\n\n        *   [网络I/O操作](#网络io操作)\n\n        *   [其他](#其他)\n\n        *   [Channel中的Unsafe](#channel中的unsafe)\n\n# Channel\n\n提起Channel，我们并不陌生，在JDK NIO中也有Channel通道的概念。Channel是网络通信的载体，提供了基本的用于I/O操作的API，如：register、bind、connect、read、write、flush等。\n\nNetty的Channel是在JDK的NIO Channel基础上进行封装的，提供了更高层次的抽象，同时屏蔽了底层Socket的复杂性，赋予了Channel更加强大的功能。\n\nNetty为什么不使用JDK NIO原生的Channel呢？主要是基于以下几个原因：\n\n*   JDK中的SocketChannel和ServerSocketChannel没有统一的Channel接口供业务开发者使用，对于用户而言，没有统一的操作视图，使用起来并不方便\n\n*   JDK中的SocketChannel和ServerSocketChannel的主要职责是网络I/O操作，由于它们是SPI类接口，由具体的虚拟机厂家来提供，所以通过继承SPI功能类来扩展其功能的难度很大；直接实现SocketChannel和ServerSocketChannel，其工作量和重新开发一个新的Channel功能更类是差不多的\n\n*   Netty的Channel需要能够跟Netty的整体架构融合在一起，例如I/O模型、基于ChannelPipeLine的定制模型，以及基于元数据描述配置化的TCP参数等，这些JDK的SocketChannel和ServerSocketChannel都没有提供，需要重新进行封装\n\n*   自定义的Channel，功能实现更加灵活\n\n基于以上原因，Netty自行封装了Channel接口，来代替JDK NIO原生的Channel，使得Channel能够更好地适配Netty整体框架，并且其扩展性也更强。\n\n在Netty中，提供了多种不同的Channel实现，主要的几种实现如下：\n\n*   FileChannel：用于文件操作\n\n*   SelectableChannel：用于网络连接，根据网络协议不同，可以分为：\n\n*   \\*   ServerSocketChannel和SocketChannle：用于TCP协议的数据读写，分别对应服务端和客户端的通道\n\n    *   DatagramChannel：用于UDP协议的数据读写\n\n## Channel工作原理\n\n*   一旦有客户端成功与服务端建立连接，将新建一个Channel与该客户端进行绑定\n\n*   Channel从线程组NioEventloopGroup中获取一个NioEventloop，并注册到该NioEventloop，后续该Channel的生命周期内都与该NioEventloop绑定在一起\n\n*   Channel同客户端进行网络连接、关闭和读写，生成对应的even事件，由Selector轮询到后，交给Worker线程组中的调度线程去执行\n\n在不同的生命周期阶段，Channel会有不同的状态，并且能够在不同的状态之间进行流转和切换。\n\nChannel的状态有四种：\n\n*   ChannelUnregistered：已创建但还未被注册到监听器中\n\n*   ChannelRegistered ：已注册到监听器EventLoop中\n\n*   ChannelActive ：连接完成处于活跃状态，此时可以接收和发送数据\n\n*   ChannelInactive ：非活跃状态，代表连接未建立或者已断开\n\n## Channel核心功能\n\n我们先来看一下Channel接口的顶层定义：\n\npublic interface Channel extends AttributeMap, ChannelOutboundInvoker, Comparable\\<Channel> {\n\nChannelId id();\n\nEventLoop eventLoop();\n\nChannel parent();\n\nChannelConfig config();\n\nboolean isOpen();\n\nboolean isRegistered();\n\nboolean isActive();\n\nChannelMetadata metadata();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nChannelFuture closeFuture();\n\nboolean isWritable();\n\nlong bytesBeforeUnwritable();\n\nlong bytesBeforeWritable();\n\nChannel.Unsafe unsafe();\n\nChannelPipeline pipeline();\n\nByteBufAllocator alloc();\n\nChannel read();\n\nChannel flush();\n\npublic interface Unsafe {\n\nHandle recvBufAllocHandle();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nvoid register(EventLoop var1, ChannelPromise var2);\n\nvoid bind(SocketAddress var1, ChannelPromise var2);\n\nvoid connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);\n\nvoid disconnect(ChannelPromise var1);\n\nvoid close(ChannelPromise var1);\n\nvoid closeForcibly();\n\nvoid deregister(ChannelPromise var1);\n\nvoid beginRead();\n\nvoid write(Object var1, ChannelPromise var2);\n\nvoid flush();\n\nChannelPromise voidPromise();\n\nChannelOutboundBuffer outboundBuffer();\n\n}\n\n}\n\n可以将Channel的功能大概分为两大类：\n\n*   网络I/O操作：完成网络I/O的读写、连接关闭等操作\n\n*   获取Channel通道元数据信息\n\n### 网络I/O操作\n\n针对网络I/O相关的方法如下：\n\nboolean isOpen();\n\nboolean isRegistered();\n\nboolean isActive();\n\nChannelFuture closeFuture();\n\nboolean isWritable();\n\nlong bytesBeforeUnwritable();\n\nlong bytesBeforeWritable();\n\nChannel read();\n\nChannel flush();\n\n复制代码\n\n对这些方法的介绍如下：\n\n判断Channel通道状态：\n\n*   isOpen()：判断当前Channel是否已经打开\n\n*   isRegistered()：判断当Channel是否已经注册到NioEventLoop上\n\n*   isActive()：判断当前Channel是否已经处于激活状态\n\n操作：\n\n*   read()：从当前的Channel中读取数据到第一个inbound缓冲区中，如果数据被成功读取，触发ChannelHandler.channelRead(ChannelHandlerContext, Object)事件，读取操作API调用完成之后，紧接着会触发ChannelHandler.channelReadComplete(ChannelHandlerContext)事件，这样业务的ChannelHandler可以决定是否需要继续读取数据。如果已经有读操作请求被挂起，则后续的读操作会被忽略。\n\n*   flush()：将写入的数据刷入Channel\n\n### 其他\n\nChannelId id();\n\nEventLoop eventLoop();\n\nChannel parent();\n\nChannelConfig config();\n\nChannelMetadata metadata();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nChannelPipeline pipeline();\n\n复制代码\n\n相关API介绍如下：\n\n*   id()：在客户端连接建立后，生成Channel通道的时候会为每一个Channel分配一个唯一的ID，该ID可能的生成策略有：\n\n*   \\*   机器的MAC地址（EUI-48或者EUI-64）等可以代表全局唯一的信息\n\n    *   当前的进程ID\n\n    *   当前系统时间的毫秒\n\n    *   当前系统时间纳秒数\n\n    *   32位的随机整型数\n\n    *   32位自增的序列数\n\n*   eventLoop()：在上面说过Channel建立后会与EventLoopGroop中分配的一个EventLoop线程绑定，该方法就可以获取到Channel绑定的EventLoop。EventLoop本质上就是处理网络I/O读写事件的Reactor线程。在Netty中，它不仅用来处理网络事件，也可以用来执行定时任务和用户自定义NioTask任务等。\n\n*   parent()：返回该Channel的父Channel。对于服务端的Channel而言，它的父Channel为空；对于客户端Channel而言，它的父Channel就是创建它的ServerSocketChannel\n\n*   config()：获取当前Channel的配置信息，例如：CONNECT\\_TIMEOUT\\_MILLIS\n\n*   metadata()：获取当前Channel的元数据描述信息，包括TCP参数配置等\n\n*   localAddress()：获取当前Channel的本地绑定地址\n\n*   remoteAddress()：获取当前Channel通信的远程Socket地址\n\n*   pipeline()：通过pipeline()方法，可以获取到Channel的ChannelPipeline对象，ChannelPipeline也是Netty的核心组件，它可以理解为是ChannelHandler的容器，用于处理Channel的所有事件\n\n总的来说，Channel顶层接口只定义了一些基础的核心能力，在开发过程中，比较常用的NioServerSocketChannel和NioSocketChannel这两个服务端和客户端的类均继承于：AbstractChannel。Channel的初始化核心操作都是交由该父类来完成的，并且扩充了很多Channel接口中的能力。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4961706b190540fc80737925e4bda4aa\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n在该类中维护了Channel的父Channel，ID，pipeline等重要组件，并且通过构造方法来完成初始化。通过变量定义可以看出，AbstractChannel聚合了所有Channel使用到的能力对象，由AbstractChannel提供初始化和统一的封装，如果功能和子类强相关，则定义为抽象方法由子类来实现。\n\n### Channel中的Unsafe\n\n我们在Channel接口中可以看到内部定义了一个Unsafe类，并且里面定义了很多与Channel功能很像的方法，那这个类到底有什么用呢？\n\nChannel接口中Unsafe接口的定义：\n\npublic interface Unsafe {\n\nHandle recvBufAllocHandle();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nvoid register(EventLoop var1, ChannelPromise var2);\n\nvoid bind(SocketAddress var1, ChannelPromise var2);\n\nvoid connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);\n\nvoid disconnect(ChannelPromise var1);\n\nvoid close(ChannelPromise var1);\n\nvoid closeForcibly();\n\nvoid deregister(ChannelPromise var1);\n\nvoid beginRead();\n\nvoid write(Object var1, ChannelPromise var2);\n\nvoid flush();\n\nChannelPromise voidPromise();\n\nChannelOutboundBuffer outboundBuffer();\n\n}\n\n复制代码\n\n实际上Unsafe是Channel的一个辅助类，它不直接暴露给用户使用，它是Channel的一个辅助类，但是实际上Channel的网络I/O操作基本上都是由Unsafe负责实现的。\n\nUnsafe继承关系如图：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c177cccac324024940a3b0e535146a6\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\nUnsafe中的核心方法介绍：\n\n*   register()：用于将当前Unsafe对应的Channel注册到EventLoop的多路复用器上，然后调用DefaultChannelPipeLine的fireChannelRegistered方法。如果Channel被激活，则调用DefaultChannelPipeLine的fireChannelActive方法\n\n*   bind()：主要用于绑定指定的端口，对于服务端，用于绑定监听端口，可以设置backlog参数；对于客户端，主要用于指定客户端Channel的本地绑定Socket地址\n\n*   connect()：首先获取当前的连接状态进行缓存，然后发起连接操作，如果连接成功，则返回true；如果没连接上，服务端没有返回ACK应答，连接结果不确定，返回false；连接失败的话直接抛出I/O异常\n\n*   finishConnect方法()：客户端接收到服务端的TCP握手应答消息，通过SocketChannel的finishConnect方法对连接结果进行判断\n\n*   disconnect()：用于客户端或者服务器主动关闭连接\n\n*   close()：在链路关闭之前需要先判断是否处于刷新状态，如果处于刷新状态，说明还有消息尚未发送出去，需要等到所有消息发送完成后再关闭链路，因此将关闭操作封装成Runnable稍后再执行\n\n*   write()：将消息添加到环形发送数组中，并不是真正的写Channel，真正的写入需要调用flush方法\n\n*   flush()方法：将发送缓冲区中待发送的消息全部写入Channel中，并发送给通信方\n","source":"_posts/Channel.md","raw":"## 目录\n\n*   [Channel](#channel)\n\n    *   [Channel工作原理](#channel工作原理)\n\n    *   [Channel核心功能](#channel核心功能)\n\n        *   [网络I/O操作](#网络io操作)\n\n        *   [其他](#其他)\n\n        *   [Channel中的Unsafe](#channel中的unsafe)\n\n# Channel\n\n提起Channel，我们并不陌生，在JDK NIO中也有Channel通道的概念。Channel是网络通信的载体，提供了基本的用于I/O操作的API，如：register、bind、connect、read、write、flush等。\n\nNetty的Channel是在JDK的NIO Channel基础上进行封装的，提供了更高层次的抽象，同时屏蔽了底层Socket的复杂性，赋予了Channel更加强大的功能。\n\nNetty为什么不使用JDK NIO原生的Channel呢？主要是基于以下几个原因：\n\n*   JDK中的SocketChannel和ServerSocketChannel没有统一的Channel接口供业务开发者使用，对于用户而言，没有统一的操作视图，使用起来并不方便\n\n*   JDK中的SocketChannel和ServerSocketChannel的主要职责是网络I/O操作，由于它们是SPI类接口，由具体的虚拟机厂家来提供，所以通过继承SPI功能类来扩展其功能的难度很大；直接实现SocketChannel和ServerSocketChannel，其工作量和重新开发一个新的Channel功能更类是差不多的\n\n*   Netty的Channel需要能够跟Netty的整体架构融合在一起，例如I/O模型、基于ChannelPipeLine的定制模型，以及基于元数据描述配置化的TCP参数等，这些JDK的SocketChannel和ServerSocketChannel都没有提供，需要重新进行封装\n\n*   自定义的Channel，功能实现更加灵活\n\n基于以上原因，Netty自行封装了Channel接口，来代替JDK NIO原生的Channel，使得Channel能够更好地适配Netty整体框架，并且其扩展性也更强。\n\n在Netty中，提供了多种不同的Channel实现，主要的几种实现如下：\n\n*   FileChannel：用于文件操作\n\n*   SelectableChannel：用于网络连接，根据网络协议不同，可以分为：\n\n*   \\*   ServerSocketChannel和SocketChannle：用于TCP协议的数据读写，分别对应服务端和客户端的通道\n\n    *   DatagramChannel：用于UDP协议的数据读写\n\n## Channel工作原理\n\n*   一旦有客户端成功与服务端建立连接，将新建一个Channel与该客户端进行绑定\n\n*   Channel从线程组NioEventloopGroup中获取一个NioEventloop，并注册到该NioEventloop，后续该Channel的生命周期内都与该NioEventloop绑定在一起\n\n*   Channel同客户端进行网络连接、关闭和读写，生成对应的even事件，由Selector轮询到后，交给Worker线程组中的调度线程去执行\n\n在不同的生命周期阶段，Channel会有不同的状态，并且能够在不同的状态之间进行流转和切换。\n\nChannel的状态有四种：\n\n*   ChannelUnregistered：已创建但还未被注册到监听器中\n\n*   ChannelRegistered ：已注册到监听器EventLoop中\n\n*   ChannelActive ：连接完成处于活跃状态，此时可以接收和发送数据\n\n*   ChannelInactive ：非活跃状态，代表连接未建立或者已断开\n\n## Channel核心功能\n\n我们先来看一下Channel接口的顶层定义：\n\npublic interface Channel extends AttributeMap, ChannelOutboundInvoker, Comparable\\<Channel> {\n\nChannelId id();\n\nEventLoop eventLoop();\n\nChannel parent();\n\nChannelConfig config();\n\nboolean isOpen();\n\nboolean isRegistered();\n\nboolean isActive();\n\nChannelMetadata metadata();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nChannelFuture closeFuture();\n\nboolean isWritable();\n\nlong bytesBeforeUnwritable();\n\nlong bytesBeforeWritable();\n\nChannel.Unsafe unsafe();\n\nChannelPipeline pipeline();\n\nByteBufAllocator alloc();\n\nChannel read();\n\nChannel flush();\n\npublic interface Unsafe {\n\nHandle recvBufAllocHandle();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nvoid register(EventLoop var1, ChannelPromise var2);\n\nvoid bind(SocketAddress var1, ChannelPromise var2);\n\nvoid connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);\n\nvoid disconnect(ChannelPromise var1);\n\nvoid close(ChannelPromise var1);\n\nvoid closeForcibly();\n\nvoid deregister(ChannelPromise var1);\n\nvoid beginRead();\n\nvoid write(Object var1, ChannelPromise var2);\n\nvoid flush();\n\nChannelPromise voidPromise();\n\nChannelOutboundBuffer outboundBuffer();\n\n}\n\n}\n\n可以将Channel的功能大概分为两大类：\n\n*   网络I/O操作：完成网络I/O的读写、连接关闭等操作\n\n*   获取Channel通道元数据信息\n\n### 网络I/O操作\n\n针对网络I/O相关的方法如下：\n\nboolean isOpen();\n\nboolean isRegistered();\n\nboolean isActive();\n\nChannelFuture closeFuture();\n\nboolean isWritable();\n\nlong bytesBeforeUnwritable();\n\nlong bytesBeforeWritable();\n\nChannel read();\n\nChannel flush();\n\n复制代码\n\n对这些方法的介绍如下：\n\n判断Channel通道状态：\n\n*   isOpen()：判断当前Channel是否已经打开\n\n*   isRegistered()：判断当Channel是否已经注册到NioEventLoop上\n\n*   isActive()：判断当前Channel是否已经处于激活状态\n\n操作：\n\n*   read()：从当前的Channel中读取数据到第一个inbound缓冲区中，如果数据被成功读取，触发ChannelHandler.channelRead(ChannelHandlerContext, Object)事件，读取操作API调用完成之后，紧接着会触发ChannelHandler.channelReadComplete(ChannelHandlerContext)事件，这样业务的ChannelHandler可以决定是否需要继续读取数据。如果已经有读操作请求被挂起，则后续的读操作会被忽略。\n\n*   flush()：将写入的数据刷入Channel\n\n### 其他\n\nChannelId id();\n\nEventLoop eventLoop();\n\nChannel parent();\n\nChannelConfig config();\n\nChannelMetadata metadata();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nChannelPipeline pipeline();\n\n复制代码\n\n相关API介绍如下：\n\n*   id()：在客户端连接建立后，生成Channel通道的时候会为每一个Channel分配一个唯一的ID，该ID可能的生成策略有：\n\n*   \\*   机器的MAC地址（EUI-48或者EUI-64）等可以代表全局唯一的信息\n\n    *   当前的进程ID\n\n    *   当前系统时间的毫秒\n\n    *   当前系统时间纳秒数\n\n    *   32位的随机整型数\n\n    *   32位自增的序列数\n\n*   eventLoop()：在上面说过Channel建立后会与EventLoopGroop中分配的一个EventLoop线程绑定，该方法就可以获取到Channel绑定的EventLoop。EventLoop本质上就是处理网络I/O读写事件的Reactor线程。在Netty中，它不仅用来处理网络事件，也可以用来执行定时任务和用户自定义NioTask任务等。\n\n*   parent()：返回该Channel的父Channel。对于服务端的Channel而言，它的父Channel为空；对于客户端Channel而言，它的父Channel就是创建它的ServerSocketChannel\n\n*   config()：获取当前Channel的配置信息，例如：CONNECT\\_TIMEOUT\\_MILLIS\n\n*   metadata()：获取当前Channel的元数据描述信息，包括TCP参数配置等\n\n*   localAddress()：获取当前Channel的本地绑定地址\n\n*   remoteAddress()：获取当前Channel通信的远程Socket地址\n\n*   pipeline()：通过pipeline()方法，可以获取到Channel的ChannelPipeline对象，ChannelPipeline也是Netty的核心组件，它可以理解为是ChannelHandler的容器，用于处理Channel的所有事件\n\n总的来说，Channel顶层接口只定义了一些基础的核心能力，在开发过程中，比较常用的NioServerSocketChannel和NioSocketChannel这两个服务端和客户端的类均继承于：AbstractChannel。Channel的初始化核心操作都是交由该父类来完成的，并且扩充了很多Channel接口中的能力。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4961706b190540fc80737925e4bda4aa\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n在该类中维护了Channel的父Channel，ID，pipeline等重要组件，并且通过构造方法来完成初始化。通过变量定义可以看出，AbstractChannel聚合了所有Channel使用到的能力对象，由AbstractChannel提供初始化和统一的封装，如果功能和子类强相关，则定义为抽象方法由子类来实现。\n\n### Channel中的Unsafe\n\n我们在Channel接口中可以看到内部定义了一个Unsafe类，并且里面定义了很多与Channel功能很像的方法，那这个类到底有什么用呢？\n\nChannel接口中Unsafe接口的定义：\n\npublic interface Unsafe {\n\nHandle recvBufAllocHandle();\n\nSocketAddress localAddress();\n\nSocketAddress remoteAddress();\n\nvoid register(EventLoop var1, ChannelPromise var2);\n\nvoid bind(SocketAddress var1, ChannelPromise var2);\n\nvoid connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);\n\nvoid disconnect(ChannelPromise var1);\n\nvoid close(ChannelPromise var1);\n\nvoid closeForcibly();\n\nvoid deregister(ChannelPromise var1);\n\nvoid beginRead();\n\nvoid write(Object var1, ChannelPromise var2);\n\nvoid flush();\n\nChannelPromise voidPromise();\n\nChannelOutboundBuffer outboundBuffer();\n\n}\n\n复制代码\n\n实际上Unsafe是Channel的一个辅助类，它不直接暴露给用户使用，它是Channel的一个辅助类，但是实际上Channel的网络I/O操作基本上都是由Unsafe负责实现的。\n\nUnsafe继承关系如图：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c177cccac324024940a3b0e535146a6\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\nUnsafe中的核心方法介绍：\n\n*   register()：用于将当前Unsafe对应的Channel注册到EventLoop的多路复用器上，然后调用DefaultChannelPipeLine的fireChannelRegistered方法。如果Channel被激活，则调用DefaultChannelPipeLine的fireChannelActive方法\n\n*   bind()：主要用于绑定指定的端口，对于服务端，用于绑定监听端口，可以设置backlog参数；对于客户端，主要用于指定客户端Channel的本地绑定Socket地址\n\n*   connect()：首先获取当前的连接状态进行缓存，然后发起连接操作，如果连接成功，则返回true；如果没连接上，服务端没有返回ACK应答，连接结果不确定，返回false；连接失败的话直接抛出I/O异常\n\n*   finishConnect方法()：客户端接收到服务端的TCP握手应答消息，通过SocketChannel的finishConnect方法对连接结果进行判断\n\n*   disconnect()：用于客户端或者服务器主动关闭连接\n\n*   close()：在链路关闭之前需要先判断是否处于刷新状态，如果处于刷新状态，说明还有消息尚未发送出去，需要等到所有消息发送完成后再关闭链路，因此将关闭操作封装成Runnable稍后再执行\n\n*   write()：将消息添加到环形发送数组中，并不是真正的写Channel，真正的写入需要调用flush方法\n\n*   flush()方法：将发送缓冲区中待发送的消息全部写入Channel中，并发送给通信方\n","slug":"Channel","published":1,"date":"2022-10-29T05:24:00.633Z","updated":"2022-10-29T05:23:15.104Z","_id":"cl9thabbx0004xotw60nxantc","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#channel\">Channel</a></p>\n<ul>\n<li><p>  <a href=\"#channel%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">Channel工作原理</a></p>\n</li>\n<li><p><a href=\"#channel%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD\">Channel核心功能</a></p>\n<ul>\n<li><p>  <a href=\"#%E7%BD%91%E7%BB%9Cio%E6%93%8D%E4%BD%9C\">网络I/O操作</a></p>\n</li>\n<li><p>  <a href=\"#%E5%85%B6%E4%BB%96\">其他</a></p>\n</li>\n<li><p>  <a href=\"#channel%E4%B8%AD%E7%9A%84unsafe\">Channel中的Unsafe</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h1><p>提起Channel，我们并不陌生，在JDK NIO中也有Channel通道的概念。Channel是网络通信的载体，提供了基本的用于I/O操作的API，如：register、bind、connect、read、write、flush等。</p>\n<p>Netty的Channel是在JDK的NIO Channel基础上进行封装的，提供了更高层次的抽象，同时屏蔽了底层Socket的复杂性，赋予了Channel更加强大的功能。</p>\n<p>Netty为什么不使用JDK NIO原生的Channel呢？主要是基于以下几个原因：</p>\n<ul>\n<li><p>  JDK中的SocketChannel和ServerSocketChannel没有统一的Channel接口供业务开发者使用，对于用户而言，没有统一的操作视图，使用起来并不方便</p>\n</li>\n<li><p>  JDK中的SocketChannel和ServerSocketChannel的主要职责是网络I/O操作，由于它们是SPI类接口，由具体的虚拟机厂家来提供，所以通过继承SPI功能类来扩展其功能的难度很大；直接实现SocketChannel和ServerSocketChannel，其工作量和重新开发一个新的Channel功能更类是差不多的</p>\n</li>\n<li><p>  Netty的Channel需要能够跟Netty的整体架构融合在一起，例如I/O模型、基于ChannelPipeLine的定制模型，以及基于元数据描述配置化的TCP参数等，这些JDK的SocketChannel和ServerSocketChannel都没有提供，需要重新进行封装</p>\n</li>\n<li><p>  自定义的Channel，功能实现更加灵活</p>\n</li>\n</ul>\n<p>基于以上原因，Netty自行封装了Channel接口，来代替JDK NIO原生的Channel，使得Channel能够更好地适配Netty整体框架，并且其扩展性也更强。</p>\n<p>在Netty中，提供了多种不同的Channel实现，主要的几种实现如下：</p>\n<ul>\n<li><p>  FileChannel：用于文件操作</p>\n</li>\n<li><p>  SelectableChannel：用于网络连接，根据网络协议不同，可以分为：</p>\n</li>\n<li><p>*   ServerSocketChannel和SocketChannle：用于TCP协议的数据读写，分别对应服务端和客户端的通道</p>\n<ul>\n<li>  DatagramChannel：用于UDP协议的数据读写</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Channel工作原理\"><a href=\"#Channel工作原理\" class=\"headerlink\" title=\"Channel工作原理\"></a>Channel工作原理</h2><ul>\n<li><p>  一旦有客户端成功与服务端建立连接，将新建一个Channel与该客户端进行绑定</p>\n</li>\n<li><p>  Channel从线程组NioEventloopGroup中获取一个NioEventloop，并注册到该NioEventloop，后续该Channel的生命周期内都与该NioEventloop绑定在一起</p>\n</li>\n<li><p>  Channel同客户端进行网络连接、关闭和读写，生成对应的even事件，由Selector轮询到后，交给Worker线程组中的调度线程去执行</p>\n</li>\n</ul>\n<p>在不同的生命周期阶段，Channel会有不同的状态，并且能够在不同的状态之间进行流转和切换。</p>\n<p>Channel的状态有四种：</p>\n<ul>\n<li><p>  ChannelUnregistered：已创建但还未被注册到监听器中</p>\n</li>\n<li><p>  ChannelRegistered ：已注册到监听器EventLoop中</p>\n</li>\n<li><p>  ChannelActive ：连接完成处于活跃状态，此时可以接收和发送数据</p>\n</li>\n<li><p>  ChannelInactive ：非活跃状态，代表连接未建立或者已断开</p>\n</li>\n</ul>\n<h2 id=\"Channel核心功能\"><a href=\"#Channel核心功能\" class=\"headerlink\" title=\"Channel核心功能\"></a>Channel核心功能</h2><p>我们先来看一下Channel接口的顶层定义：</p>\n<p>public interface Channel extends AttributeMap, ChannelOutboundInvoker, Comparable&lt;Channel&gt; {</p>\n<p>ChannelId id();</p>\n<p>EventLoop eventLoop();</p>\n<p>Channel parent();</p>\n<p>ChannelConfig config();</p>\n<p>boolean isOpen();</p>\n<p>boolean isRegistered();</p>\n<p>boolean isActive();</p>\n<p>ChannelMetadata metadata();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>ChannelFuture closeFuture();</p>\n<p>boolean isWritable();</p>\n<p>long bytesBeforeUnwritable();</p>\n<p>long bytesBeforeWritable();</p>\n<p>Channel.Unsafe unsafe();</p>\n<p>ChannelPipeline pipeline();</p>\n<p>ByteBufAllocator alloc();</p>\n<p>Channel read();</p>\n<p>Channel flush();</p>\n<p>public interface Unsafe {</p>\n<p>Handle recvBufAllocHandle();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>void register(EventLoop var1, ChannelPromise var2);</p>\n<p>void bind(SocketAddress var1, ChannelPromise var2);</p>\n<p>void connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);</p>\n<p>void disconnect(ChannelPromise var1);</p>\n<p>void close(ChannelPromise var1);</p>\n<p>void closeForcibly();</p>\n<p>void deregister(ChannelPromise var1);</p>\n<p>void beginRead();</p>\n<p>void write(Object var1, ChannelPromise var2);</p>\n<p>void flush();</p>\n<p>ChannelPromise voidPromise();</p>\n<p>ChannelOutboundBuffer outboundBuffer();</p>\n<p>}</p>\n<p>}</p>\n<p>可以将Channel的功能大概分为两大类：</p>\n<ul>\n<li><p>  网络I/O操作：完成网络I/O的读写、连接关闭等操作</p>\n</li>\n<li><p>  获取Channel通道元数据信息</p>\n</li>\n</ul>\n<h3 id=\"网络I-O操作\"><a href=\"#网络I-O操作\" class=\"headerlink\" title=\"网络I/O操作\"></a>网络I/O操作</h3><p>针对网络I/O相关的方法如下：</p>\n<p>boolean isOpen();</p>\n<p>boolean isRegistered();</p>\n<p>boolean isActive();</p>\n<p>ChannelFuture closeFuture();</p>\n<p>boolean isWritable();</p>\n<p>long bytesBeforeUnwritable();</p>\n<p>long bytesBeforeWritable();</p>\n<p>Channel read();</p>\n<p>Channel flush();</p>\n<p>复制代码</p>\n<p>对这些方法的介绍如下：</p>\n<p>判断Channel通道状态：</p>\n<ul>\n<li><p>  isOpen()：判断当前Channel是否已经打开</p>\n</li>\n<li><p>  isRegistered()：判断当Channel是否已经注册到NioEventLoop上</p>\n</li>\n<li><p>  isActive()：判断当前Channel是否已经处于激活状态</p>\n</li>\n</ul>\n<p>操作：</p>\n<ul>\n<li><p>  read()：从当前的Channel中读取数据到第一个inbound缓冲区中，如果数据被成功读取，触发ChannelHandler.channelRead(ChannelHandlerContext, Object)事件，读取操作API调用完成之后，紧接着会触发ChannelHandler.channelReadComplete(ChannelHandlerContext)事件，这样业务的ChannelHandler可以决定是否需要继续读取数据。如果已经有读操作请求被挂起，则后续的读操作会被忽略。</p>\n</li>\n<li><p>  flush()：将写入的数据刷入Channel</p>\n</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>ChannelId id();</p>\n<p>EventLoop eventLoop();</p>\n<p>Channel parent();</p>\n<p>ChannelConfig config();</p>\n<p>ChannelMetadata metadata();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>ChannelPipeline pipeline();</p>\n<p>复制代码</p>\n<p>相关API介绍如下：</p>\n<ul>\n<li><p>  id()：在客户端连接建立后，生成Channel通道的时候会为每一个Channel分配一个唯一的ID，该ID可能的生成策略有：</p>\n</li>\n<li><p>*   机器的MAC地址（EUI-48或者EUI-64）等可以代表全局唯一的信息</p>\n<ul>\n<li><p>  当前的进程ID</p>\n</li>\n<li><p>  当前系统时间的毫秒</p>\n</li>\n<li><p>  当前系统时间纳秒数</p>\n</li>\n<li><p>  32位的随机整型数</p>\n</li>\n<li><p>  32位自增的序列数</p>\n</li>\n</ul>\n</li>\n<li><p>  eventLoop()：在上面说过Channel建立后会与EventLoopGroop中分配的一个EventLoop线程绑定，该方法就可以获取到Channel绑定的EventLoop。EventLoop本质上就是处理网络I/O读写事件的Reactor线程。在Netty中，它不仅用来处理网络事件，也可以用来执行定时任务和用户自定义NioTask任务等。</p>\n</li>\n<li><p>  parent()：返回该Channel的父Channel。对于服务端的Channel而言，它的父Channel为空；对于客户端Channel而言，它的父Channel就是创建它的ServerSocketChannel</p>\n</li>\n<li><p>  config()：获取当前Channel的配置信息，例如：CONNECT_TIMEOUT_MILLIS</p>\n</li>\n<li><p>  metadata()：获取当前Channel的元数据描述信息，包括TCP参数配置等</p>\n</li>\n<li><p>  localAddress()：获取当前Channel的本地绑定地址</p>\n</li>\n<li><p>  remoteAddress()：获取当前Channel通信的远程Socket地址</p>\n</li>\n<li><p>  pipeline()：通过pipeline()方法，可以获取到Channel的ChannelPipeline对象，ChannelPipeline也是Netty的核心组件，它可以理解为是ChannelHandler的容器，用于处理Channel的所有事件</p>\n</li>\n</ul>\n<p>总的来说，Channel顶层接口只定义了一些基础的核心能力，在开发过程中，比较常用的NioServerSocketChannel和NioSocketChannel这两个服务端和客户端的类均继承于：AbstractChannel。Channel的初始化核心操作都是交由该父类来完成的，并且扩充了很多Channel接口中的能力。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4961706b190540fc80737925e4bda4aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在该类中维护了Channel的父Channel，ID，pipeline等重要组件，并且通过构造方法来完成初始化。通过变量定义可以看出，AbstractChannel聚合了所有Channel使用到的能力对象，由AbstractChannel提供初始化和统一的封装，如果功能和子类强相关，则定义为抽象方法由子类来实现。</p>\n<h3 id=\"Channel中的Unsafe\"><a href=\"#Channel中的Unsafe\" class=\"headerlink\" title=\"Channel中的Unsafe\"></a>Channel中的Unsafe</h3><p>我们在Channel接口中可以看到内部定义了一个Unsafe类，并且里面定义了很多与Channel功能很像的方法，那这个类到底有什么用呢？</p>\n<p>Channel接口中Unsafe接口的定义：</p>\n<p>public interface Unsafe {</p>\n<p>Handle recvBufAllocHandle();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>void register(EventLoop var1, ChannelPromise var2);</p>\n<p>void bind(SocketAddress var1, ChannelPromise var2);</p>\n<p>void connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);</p>\n<p>void disconnect(ChannelPromise var1);</p>\n<p>void close(ChannelPromise var1);</p>\n<p>void closeForcibly();</p>\n<p>void deregister(ChannelPromise var1);</p>\n<p>void beginRead();</p>\n<p>void write(Object var1, ChannelPromise var2);</p>\n<p>void flush();</p>\n<p>ChannelPromise voidPromise();</p>\n<p>ChannelOutboundBuffer outboundBuffer();</p>\n<p>}</p>\n<p>复制代码</p>\n<p>实际上Unsafe是Channel的一个辅助类，它不直接暴露给用户使用，它是Channel的一个辅助类，但是实际上Channel的网络I/O操作基本上都是由Unsafe负责实现的。</p>\n<p>Unsafe继承关系如图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c177cccac324024940a3b0e535146a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>Unsafe中的核心方法介绍：</p>\n<ul>\n<li><p>  register()：用于将当前Unsafe对应的Channel注册到EventLoop的多路复用器上，然后调用DefaultChannelPipeLine的fireChannelRegistered方法。如果Channel被激活，则调用DefaultChannelPipeLine的fireChannelActive方法</p>\n</li>\n<li><p>  bind()：主要用于绑定指定的端口，对于服务端，用于绑定监听端口，可以设置backlog参数；对于客户端，主要用于指定客户端Channel的本地绑定Socket地址</p>\n</li>\n<li><p>  connect()：首先获取当前的连接状态进行缓存，然后发起连接操作，如果连接成功，则返回true；如果没连接上，服务端没有返回ACK应答，连接结果不确定，返回false；连接失败的话直接抛出I/O异常</p>\n</li>\n<li><p>  finishConnect方法()：客户端接收到服务端的TCP握手应答消息，通过SocketChannel的finishConnect方法对连接结果进行判断</p>\n</li>\n<li><p>  disconnect()：用于客户端或者服务器主动关闭连接</p>\n</li>\n<li><p>  close()：在链路关闭之前需要先判断是否处于刷新状态，如果处于刷新状态，说明还有消息尚未发送出去，需要等到所有消息发送完成后再关闭链路，因此将关闭操作封装成Runnable稍后再执行</p>\n</li>\n<li><p>  write()：将消息添加到环形发送数组中，并不是真正的写Channel，真正的写入需要调用flush方法</p>\n</li>\n<li><p>  flush()方法：将发送缓冲区中待发送的消息全部写入Channel中，并发送给通信方</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#channel\">Channel</a></p>\n<ul>\n<li><p>  <a href=\"#channel%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">Channel工作原理</a></p>\n</li>\n<li><p><a href=\"#channel%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD\">Channel核心功能</a></p>\n<ul>\n<li><p>  <a href=\"#%E7%BD%91%E7%BB%9Cio%E6%93%8D%E4%BD%9C\">网络I/O操作</a></p>\n</li>\n<li><p>  <a href=\"#%E5%85%B6%E4%BB%96\">其他</a></p>\n</li>\n<li><p>  <a href=\"#channel%E4%B8%AD%E7%9A%84unsafe\">Channel中的Unsafe</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h1><p>提起Channel，我们并不陌生，在JDK NIO中也有Channel通道的概念。Channel是网络通信的载体，提供了基本的用于I/O操作的API，如：register、bind、connect、read、write、flush等。</p>\n<p>Netty的Channel是在JDK的NIO Channel基础上进行封装的，提供了更高层次的抽象，同时屏蔽了底层Socket的复杂性，赋予了Channel更加强大的功能。</p>\n<p>Netty为什么不使用JDK NIO原生的Channel呢？主要是基于以下几个原因：</p>\n<ul>\n<li><p>  JDK中的SocketChannel和ServerSocketChannel没有统一的Channel接口供业务开发者使用，对于用户而言，没有统一的操作视图，使用起来并不方便</p>\n</li>\n<li><p>  JDK中的SocketChannel和ServerSocketChannel的主要职责是网络I/O操作，由于它们是SPI类接口，由具体的虚拟机厂家来提供，所以通过继承SPI功能类来扩展其功能的难度很大；直接实现SocketChannel和ServerSocketChannel，其工作量和重新开发一个新的Channel功能更类是差不多的</p>\n</li>\n<li><p>  Netty的Channel需要能够跟Netty的整体架构融合在一起，例如I/O模型、基于ChannelPipeLine的定制模型，以及基于元数据描述配置化的TCP参数等，这些JDK的SocketChannel和ServerSocketChannel都没有提供，需要重新进行封装</p>\n</li>\n<li><p>  自定义的Channel，功能实现更加灵活</p>\n</li>\n</ul>\n<p>基于以上原因，Netty自行封装了Channel接口，来代替JDK NIO原生的Channel，使得Channel能够更好地适配Netty整体框架，并且其扩展性也更强。</p>\n<p>在Netty中，提供了多种不同的Channel实现，主要的几种实现如下：</p>\n<ul>\n<li><p>  FileChannel：用于文件操作</p>\n</li>\n<li><p>  SelectableChannel：用于网络连接，根据网络协议不同，可以分为：</p>\n</li>\n<li><p>*   ServerSocketChannel和SocketChannle：用于TCP协议的数据读写，分别对应服务端和客户端的通道</p>\n<ul>\n<li>  DatagramChannel：用于UDP协议的数据读写</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Channel工作原理\"><a href=\"#Channel工作原理\" class=\"headerlink\" title=\"Channel工作原理\"></a>Channel工作原理</h2><ul>\n<li><p>  一旦有客户端成功与服务端建立连接，将新建一个Channel与该客户端进行绑定</p>\n</li>\n<li><p>  Channel从线程组NioEventloopGroup中获取一个NioEventloop，并注册到该NioEventloop，后续该Channel的生命周期内都与该NioEventloop绑定在一起</p>\n</li>\n<li><p>  Channel同客户端进行网络连接、关闭和读写，生成对应的even事件，由Selector轮询到后，交给Worker线程组中的调度线程去执行</p>\n</li>\n</ul>\n<p>在不同的生命周期阶段，Channel会有不同的状态，并且能够在不同的状态之间进行流转和切换。</p>\n<p>Channel的状态有四种：</p>\n<ul>\n<li><p>  ChannelUnregistered：已创建但还未被注册到监听器中</p>\n</li>\n<li><p>  ChannelRegistered ：已注册到监听器EventLoop中</p>\n</li>\n<li><p>  ChannelActive ：连接完成处于活跃状态，此时可以接收和发送数据</p>\n</li>\n<li><p>  ChannelInactive ：非活跃状态，代表连接未建立或者已断开</p>\n</li>\n</ul>\n<h2 id=\"Channel核心功能\"><a href=\"#Channel核心功能\" class=\"headerlink\" title=\"Channel核心功能\"></a>Channel核心功能</h2><p>我们先来看一下Channel接口的顶层定义：</p>\n<p>public interface Channel extends AttributeMap, ChannelOutboundInvoker, Comparable&lt;Channel&gt; {</p>\n<p>ChannelId id();</p>\n<p>EventLoop eventLoop();</p>\n<p>Channel parent();</p>\n<p>ChannelConfig config();</p>\n<p>boolean isOpen();</p>\n<p>boolean isRegistered();</p>\n<p>boolean isActive();</p>\n<p>ChannelMetadata metadata();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>ChannelFuture closeFuture();</p>\n<p>boolean isWritable();</p>\n<p>long bytesBeforeUnwritable();</p>\n<p>long bytesBeforeWritable();</p>\n<p>Channel.Unsafe unsafe();</p>\n<p>ChannelPipeline pipeline();</p>\n<p>ByteBufAllocator alloc();</p>\n<p>Channel read();</p>\n<p>Channel flush();</p>\n<p>public interface Unsafe {</p>\n<p>Handle recvBufAllocHandle();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>void register(EventLoop var1, ChannelPromise var2);</p>\n<p>void bind(SocketAddress var1, ChannelPromise var2);</p>\n<p>void connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);</p>\n<p>void disconnect(ChannelPromise var1);</p>\n<p>void close(ChannelPromise var1);</p>\n<p>void closeForcibly();</p>\n<p>void deregister(ChannelPromise var1);</p>\n<p>void beginRead();</p>\n<p>void write(Object var1, ChannelPromise var2);</p>\n<p>void flush();</p>\n<p>ChannelPromise voidPromise();</p>\n<p>ChannelOutboundBuffer outboundBuffer();</p>\n<p>}</p>\n<p>}</p>\n<p>可以将Channel的功能大概分为两大类：</p>\n<ul>\n<li><p>  网络I/O操作：完成网络I/O的读写、连接关闭等操作</p>\n</li>\n<li><p>  获取Channel通道元数据信息</p>\n</li>\n</ul>\n<h3 id=\"网络I-O操作\"><a href=\"#网络I-O操作\" class=\"headerlink\" title=\"网络I/O操作\"></a>网络I/O操作</h3><p>针对网络I/O相关的方法如下：</p>\n<p>boolean isOpen();</p>\n<p>boolean isRegistered();</p>\n<p>boolean isActive();</p>\n<p>ChannelFuture closeFuture();</p>\n<p>boolean isWritable();</p>\n<p>long bytesBeforeUnwritable();</p>\n<p>long bytesBeforeWritable();</p>\n<p>Channel read();</p>\n<p>Channel flush();</p>\n<p>复制代码</p>\n<p>对这些方法的介绍如下：</p>\n<p>判断Channel通道状态：</p>\n<ul>\n<li><p>  isOpen()：判断当前Channel是否已经打开</p>\n</li>\n<li><p>  isRegistered()：判断当Channel是否已经注册到NioEventLoop上</p>\n</li>\n<li><p>  isActive()：判断当前Channel是否已经处于激活状态</p>\n</li>\n</ul>\n<p>操作：</p>\n<ul>\n<li><p>  read()：从当前的Channel中读取数据到第一个inbound缓冲区中，如果数据被成功读取，触发ChannelHandler.channelRead(ChannelHandlerContext, Object)事件，读取操作API调用完成之后，紧接着会触发ChannelHandler.channelReadComplete(ChannelHandlerContext)事件，这样业务的ChannelHandler可以决定是否需要继续读取数据。如果已经有读操作请求被挂起，则后续的读操作会被忽略。</p>\n</li>\n<li><p>  flush()：将写入的数据刷入Channel</p>\n</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>ChannelId id();</p>\n<p>EventLoop eventLoop();</p>\n<p>Channel parent();</p>\n<p>ChannelConfig config();</p>\n<p>ChannelMetadata metadata();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>ChannelPipeline pipeline();</p>\n<p>复制代码</p>\n<p>相关API介绍如下：</p>\n<ul>\n<li><p>  id()：在客户端连接建立后，生成Channel通道的时候会为每一个Channel分配一个唯一的ID，该ID可能的生成策略有：</p>\n</li>\n<li><p>*   机器的MAC地址（EUI-48或者EUI-64）等可以代表全局唯一的信息</p>\n<ul>\n<li><p>  当前的进程ID</p>\n</li>\n<li><p>  当前系统时间的毫秒</p>\n</li>\n<li><p>  当前系统时间纳秒数</p>\n</li>\n<li><p>  32位的随机整型数</p>\n</li>\n<li><p>  32位自增的序列数</p>\n</li>\n</ul>\n</li>\n<li><p>  eventLoop()：在上面说过Channel建立后会与EventLoopGroop中分配的一个EventLoop线程绑定，该方法就可以获取到Channel绑定的EventLoop。EventLoop本质上就是处理网络I/O读写事件的Reactor线程。在Netty中，它不仅用来处理网络事件，也可以用来执行定时任务和用户自定义NioTask任务等。</p>\n</li>\n<li><p>  parent()：返回该Channel的父Channel。对于服务端的Channel而言，它的父Channel为空；对于客户端Channel而言，它的父Channel就是创建它的ServerSocketChannel</p>\n</li>\n<li><p>  config()：获取当前Channel的配置信息，例如：CONNECT_TIMEOUT_MILLIS</p>\n</li>\n<li><p>  metadata()：获取当前Channel的元数据描述信息，包括TCP参数配置等</p>\n</li>\n<li><p>  localAddress()：获取当前Channel的本地绑定地址</p>\n</li>\n<li><p>  remoteAddress()：获取当前Channel通信的远程Socket地址</p>\n</li>\n<li><p>  pipeline()：通过pipeline()方法，可以获取到Channel的ChannelPipeline对象，ChannelPipeline也是Netty的核心组件，它可以理解为是ChannelHandler的容器，用于处理Channel的所有事件</p>\n</li>\n</ul>\n<p>总的来说，Channel顶层接口只定义了一些基础的核心能力，在开发过程中，比较常用的NioServerSocketChannel和NioSocketChannel这两个服务端和客户端的类均继承于：AbstractChannel。Channel的初始化核心操作都是交由该父类来完成的，并且扩充了很多Channel接口中的能力。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4961706b190540fc80737925e4bda4aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在该类中维护了Channel的父Channel，ID，pipeline等重要组件，并且通过构造方法来完成初始化。通过变量定义可以看出，AbstractChannel聚合了所有Channel使用到的能力对象，由AbstractChannel提供初始化和统一的封装，如果功能和子类强相关，则定义为抽象方法由子类来实现。</p>\n<h3 id=\"Channel中的Unsafe\"><a href=\"#Channel中的Unsafe\" class=\"headerlink\" title=\"Channel中的Unsafe\"></a>Channel中的Unsafe</h3><p>我们在Channel接口中可以看到内部定义了一个Unsafe类，并且里面定义了很多与Channel功能很像的方法，那这个类到底有什么用呢？</p>\n<p>Channel接口中Unsafe接口的定义：</p>\n<p>public interface Unsafe {</p>\n<p>Handle recvBufAllocHandle();</p>\n<p>SocketAddress localAddress();</p>\n<p>SocketAddress remoteAddress();</p>\n<p>void register(EventLoop var1, ChannelPromise var2);</p>\n<p>void bind(SocketAddress var1, ChannelPromise var2);</p>\n<p>void connect(SocketAddress var1, SocketAddress var2, ChannelPromise var3);</p>\n<p>void disconnect(ChannelPromise var1);</p>\n<p>void close(ChannelPromise var1);</p>\n<p>void closeForcibly();</p>\n<p>void deregister(ChannelPromise var1);</p>\n<p>void beginRead();</p>\n<p>void write(Object var1, ChannelPromise var2);</p>\n<p>void flush();</p>\n<p>ChannelPromise voidPromise();</p>\n<p>ChannelOutboundBuffer outboundBuffer();</p>\n<p>}</p>\n<p>复制代码</p>\n<p>实际上Unsafe是Channel的一个辅助类，它不直接暴露给用户使用，它是Channel的一个辅助类，但是实际上Channel的网络I/O操作基本上都是由Unsafe负责实现的。</p>\n<p>Unsafe继承关系如图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c177cccac324024940a3b0e535146a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>Unsafe中的核心方法介绍：</p>\n<ul>\n<li><p>  register()：用于将当前Unsafe对应的Channel注册到EventLoop的多路复用器上，然后调用DefaultChannelPipeLine的fireChannelRegistered方法。如果Channel被激活，则调用DefaultChannelPipeLine的fireChannelActive方法</p>\n</li>\n<li><p>  bind()：主要用于绑定指定的端口，对于服务端，用于绑定监听端口，可以设置backlog参数；对于客户端，主要用于指定客户端Channel的本地绑定Socket地址</p>\n</li>\n<li><p>  connect()：首先获取当前的连接状态进行缓存，然后发起连接操作，如果连接成功，则返回true；如果没连接上，服务端没有返回ACK应答，连接结果不确定，返回false；连接失败的话直接抛出I/O异常</p>\n</li>\n<li><p>  finishConnect方法()：客户端接收到服务端的TCP握手应答消息，通过SocketChannel的finishConnect方法对连接结果进行判断</p>\n</li>\n<li><p>  disconnect()：用于客户端或者服务器主动关闭连接</p>\n</li>\n<li><p>  close()：在链路关闭之前需要先判断是否处于刷新状态，如果处于刷新状态，说明还有消息尚未发送出去，需要等到所有消息发送完成后再关闭链路，因此将关闭操作封装成Runnable稍后再执行</p>\n</li>\n<li><p>  write()：将消息添加到环形发送数组中，并不是真正的写Channel，真正的写入需要调用flush方法</p>\n</li>\n<li><p>  flush()方法：将发送缓冲区中待发送的消息全部写入Channel中，并发送给通信方</p>\n</li>\n</ul>\n"},{"_content":"## 目录\n\n*   [Pipeline和ChannelHandler](#pipeline和channelhandler)\n\n    *   [ChannelPipeline](#channelpipeline)\n\n        *   [事件处理](#事件处理)\n\n        *   [事件类型](#事件类型)\n\n        *   [ChannelPipeline特性](#channelpipeline特性)\n\n    *   [ChannelHandler](#channelhandler)\n\n        *   [ChannelHandlerAdapter](#channelhandleradapter)\n\n        *   [ByteToMessageDecoder](#bytetomessagedecoder)\n\n        *   [MessageToMessageDecoder](#messagetomessagedecoder)\n\n        *   [LengthFieldBasedFrameDecoder](#lengthfieldbasedframedecoder)\n\n        *   [MessageToByteEncoder](#messagetobyteencoder)\n\n        *   [MessageToMessageEncoder](#messagetomessageencoder)\n\n        *   [LengthFieledPrepender](#lengthfieledprepender)\n\n# Pipeline和ChannelHandler\n\nChannelPipeline和ChannelHandler是Netty在进行业务处理时的重要组成组件，简单来说，ChannelHandler是进行一个业务处理的处理器，而Pipeline负责将一个个的处理器串联起来，相当于一个容器，Channel中的数据会进入Pipeline，在容器中的各个处理器中按照顺序进行流转。\n\nChannelPipelie和ChannelHandler的关系图示：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64979057476941388430f708ec975dd7\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n在Netty中，一个请求会创建一个Channel通道，每个Channel会绑定一个Pipeline,Pipeline是一个双向链表结构，它们是一一对应的关系。ChannelHandlerContext是ChannelHandler的上下文对象，通过该对象可以获取处理器的上下文信息，如：绑定的Channel、Pipeline等。\n\nNetty的ChannelPipeline和ChannelHandler机制类似于Servlet和Filter过滤器，这类拦截器实际上是职责链模式的一种变形，主要是为了方便事件的拦截和用户业务逻辑的定制。\n\nNetty将Channel的数据管道抽象为ChannelPileline，消息在ChannelPileline中流动和传递，ChannelPileline持有I/O事件拦截器ChannelHandler的链表，由ChannelPileline进行I/O事件拦截和处理，可以方便地通过新增和删除ChannelHandler实现不同的业务逻辑定制，不需要对已有的ChannelHandler进行修改，能够实现对修改封闭和对扩展的支持。\n\n## ChannelPipeline\n\nChannelPipeline是ChannelHandler的容器，它负责ChannelHandler的管理和事件拦截。\n\n### 事件处理\n\nChannelPipeline事件处理的流程：\n\n*   底层的SocketChannel read()方法读取ByteBuf，触发ChannelRead事件，由I/O线程NioEventLoop调用ChannelPipeline的fireChannelRead(Object msg)方法，将消息(ByteBuf)传输到ChannelPipeline中\n\n*   消息依次被ChannelPipeline中的处理器：(例如)HeadHandler、ChannelHandler1、ChannelHandler2....TailHandler拦截和处理，在这个过程中，任何ChannelHandler都可以中断当前的流程，结束消息的传递\n\n*   调用ChannelHandlerContext的write方法发送消息，消息依次经过：TailHandler、ChannelHandlerN...ChannelHandler2、ChannelHandler1、HeadHandler，最终被添加到消息发送缓冲区中等待刷新和发送，在此过程中也可以中断消息传递，例如当编码失败时，就需要中断消息传递，然后构造异常的Future返回\n\n### 事件类型\n\nNetty的事件类型分为inbound和outbound事件两大类。\n\n**inbound事件**\n\ninbound事件通常由I/O线程触发，例如TCP链路建立、链路关闭事件、读事件、异常通知事件等。触发Inbound事件的方法如下：\n\n*   `ChannelHandlerContext.fireChannelRegistered()`：Channel注册事件\n\n*   `ChannelHandlerContext.fireChannelActive()`：TCP链路建立成功，Channel激活事件\n\n*   `ChannelHandlerContext.fireChannelRead(Object)`：读事件\n\n*   `ChannelHandlerContext.fireChannelReadComplete()`：读操作完成通知事件\n\n*   `ChannelHandlerContext.ExceptionCaught(Throwable)`：异常通知事件\n\n*   `ChannelHandlerContext.fireUserEventTriggered(Object)`：用户自定义事件\n\n*   `ChannelHandlerContext.fireChannelWritabilityChanged()`：Channel的可写状态变化通知事件\n\n*   `ChannelHandlerContext.fireChannelInactive()`：TCP连接关闭，链路不可用通知事件\n\n**outbound事件**\n\noutbound事件通常是由用户主动发起的网络I/O操作，例如用户发起的连接操作，绑定操作，消息发送等，触发outbound事件的方法如下：\n\n*   `ChannelHandlerContext.bind(SocketAddress, ChannelPromis)`：绑定本地地址事件\n\n*   `ChannelHandlerContext.connect(SocketAddress, SocketAddress, ChannelPromis)`：连接服务器事件\n\n*   `ChannelHandlerContext.write(Object, ChannelPromis)`：发送事件\n\n*   `ChannelHandlerContext.flush()`：刷新事件\n\n*   `ChannelHandlerContext.read()`：读事件\n\n*   `ChannelHandlerContext.disconnect(ChannelPromis)`：断开连接事件\n\n*   `ChannelHandlerContext.close(ChannelPromis)`：关闭当前Channel事件\n\n### ChannelPipeline特性\n\n*   支持运行态动态的添加或者删除ChannelHandler。例如在业务高峰期需要对系统做拥堵保护时，就可以根据当前的系统时间进行判断，如果处于业务高峰期，则动态地将系统拥堵保护ChannelHandler添加到当前的ChannelPipeline中，高峰期过后，就可以动态删除拥堵保护ChannelHandler\n\n*   ChannelPipeline是线程安全的。这意味着N个业务线程可以并发地操作ChannelPipeline而不存在多线程并发问题。但是ChannelHandler却不是线程安全的，这意味着尽管ChannelPipeline是线程安全的，但是用户仍然要自己保证ChannelHandler的线程安全。\n\n## ChannelHandler\n\nChannelHandler类似于Servlet的Filter过滤器，负责对I/O事件或者I/O操作进行拦截和处理，它可以选择性地进行拦截和处理自己感兴趣的事件，也可以透传和终止事件的传递。\n\n基于ChannelHandler接口，用户可以方便地进行业务逻辑定制，例如打印日志、统一封装异常信息，性能统计和消息编解码等。\n\n### ChannelHandlerAdapter\n\nChannelHandlerAdapter是handler的基类，它的所有接口实现都是事件透传，如果用户ChannelHandler关心某个事件，只需要覆盖ChannelHandlerAdapter对应的方法即可，对于不关心的方法，无需覆盖直接使用父类的方法，这样子类的代码就会非常简洁和清晰。\n\n在Netty中的Handler可以分为以下两大类：\n\n*   `ChannelInboundHandler`：对应上文中的inbound事件处理。主要负责读事件的逻辑处理，比如，我们在一端读到一段数据，首先要解析这段数据，然后对这些数据做一系列逻辑处理，最终把响应写到对端， 在开始组装响应之前的所有的逻辑，都可以放置在 ChannelInboundHandler 里处理，它的一个最重要的方法就是 channelRead()。可以将 ChannelInboundHandler 的逻辑处理过程与 TCP 的七层协议的解析联系起来，收到的数据一层层从物理层上升到我们的应用层。\n\n*   `ChannelOutBoundHandler`：对应上文中的outbound事件处理。是处理写数据的逻辑，它是定义我们一端在组装完响应之后，把数据写到对端的逻辑，比如，我们封装好一个 response 对象，接下来我们有可能对这个 response 做一些其他的特殊逻辑，然后，再编码成 ByteBuf，最终写到对端，它里面最核心的一个方法就是 write()，读者可以将 ChannelOutBoundHandler 的逻辑处理过程与 TCP 的七层协议的封装过程联系起来，我们在应用层组装响应之后，通过层层协议的封装，直到最底层的物理层。\n\n这两个接口都有默认的实现类，分别是：\n\n*   `ChannelInboundHandlerAdapter`\n\n*   `ChanneloutBoundHandlerAdapter`\n\n它们分别实现两个大类接口的所有方法，默认情况下会把读写事件传播到下一个handler。\n\n在开发中，会有一些比较常用的Netty提供的handler供我们使用，方便快速开发，例如：\n\n*   `ByteToMessageDecoder`\n\n*   `MessageToMessageDecoder`\n\n*   `LengthFieledBasedFrameDecoder`\n\n*   `MessageToByteEncoder`\n\n*   `MessageToMessageEncoder`\n\n*   `LengthFieledPrepender`\n\n下面我们会一一介绍它们各自的用途。\n\n### ByteToMessageDecoder\n\n利用NIO进行网络编程时，往往需要将读取到的字节数组或者字节缓冲区解码为业务可以使用的POJO对象，为了方便业务将ByteBuf解码为业务POJO对象，Netty提供了ByteToMessageDecoder抽象工具解码类。\n\n用户解码器handler继承ByteToMessageDecoder，然`后实现void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)`抽象方法即可完成ByteBuf到POJO类的转换。\n\n由于ByteToMessageDecoder并没有考虑TCP粘包和拆包的问题， 使用该解码器时需要用户自行处理该问题。正因为如此，对于大多数场景不会直接继承ByteToMessageDecoder，而是继承其他更高级的解码器来解决粘包拆包问题。\n\n### MessageToMessageDecoder\n\nMessageToMessageDecoder是Netty的二次解码器，它的职责是将一个对象二次解码为其他对象。\n\n为什么叫做二次解码器？从SocketChannel读取到的TCP数据报是ByteBuf，实际上就是字节数组，我们首先需要将ByteBuf字节数组读取处理，转换为Java对象，然后对Java对象根据某些规则进行二次解码，将其解码为另一个POJO对象。因为MessageToMessageDecoder在ByteToMessageDecoder之后，所以称之为二次解码器。\n\n例如：以HTTP+XML协议栈为例，第一次解码往往是将字节数组解码为HttpRequest对象，然后对HttpRequest消息中的消息体字符串进行二次解码，将XML格式的字符串解码为POJO对象，这就用到了二次解码器。\n\n在使用的时候，用户的解码器只需要实现void decode(ChannelHandlerContext ctx, I msg, List out)抽象方法即可，由于它是将一个POJO解码为另一个POJO，所以不存在粘包拆包问题。\n\n### LengthFieldBasedFrameDecoder\n\n该解码器是一个比较常用的解决TCP粘包拆包问题的解码器。\n\n如何区分一个整包消息，通常由如下4种做法：\n\n*   固定长度，例如120个字节代码一个整包消息，不足的前面补0，解码器在处理这类定长消息的时候比较简单，每次读取到指定长度的字节后进行解码\n\n*   通过回车换行符区分消息，例如FTP协议，这类区分消息的方式多用于文本协议\n\n*   通过分隔符区分整包消息\n\n*   通过指定长度来标识整包消息\n\n由于TCP本身存在粘包和拆包问题，所以通常情况下必须自己处理半包消息。利用LengthFieldBasedFrameDecoder解码器可以自动解决半包问题，通常的用法如下：\n\npipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 0, 4));\n\npipeline.addLast(new StringDecoder());\n\n复制代码\n\n将LengthFieldBasedFrameDecoder解码器加入ChannelPipeline，指定正确的参数组合，它可以将Netty的ByteBuf解码成单个的整包消息，后面的业务解码器拿到的就是完整的数据报，正常进行解码即可，不需要再考虑半包问题，方便了业务消息的解码。\n\n### MessageToByteEncoder\n\nMessageToByteEncoder负责将POJO对象编码成ByteBuf，用户的编码器继承MessageToByteEncoder，实现`void encode(ChannelHandlerContext ctx, I msg, ByteBuf out)`接口,示例代码：\n\npublic class IntegerEncoder extends MessageToByteEncoder\\<Integer> {\n\n@Override\n\nprotected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n\nbyteBuf.writeInt(integer);\n\n}\n\n}\n\n复制代码\n\n### MessageToMessageEncoder\n\n将一个POJO对象编码为另一个对象，以HTTP+XML协议为例，它的一种实现发送是：先将POJO对象编码为XML字符串，再将字符串编码为HTTP请求或者应答消息。对于复杂协议，往往需要经历多次编码，为了便于功能扩展，可以通过多个编码器组合来实现相关功能。\n\n用户的解码器继承MessageToMessageEncoder解码器，实现`void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List<Object> list)`方法列表。示例代码如下：\n\npublic class IntegerToStringEncoder extends MessageToMessageEncoder\\<Integer> {\n\n@Override\n\nprotected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List\\<Object> list) throws Exception {\n\nlist.add(integer.toString());\n\n}\n\n}\n\n复制代码\n\n### LengthFieledPrepender\n\n如果协议中的第一个字段为长度字段，Netty提供了LengthFieledPrepender编码器， 它可以计算当前待发送的消息的二进制字节长度，将该长度添加到ByteBuf的缓冲区头中。\n\n例如编码前的字符为\"HELLO,WORLD\"占12字节，通过LengthFieledPrepender编码后，消息组成为消息长度字段+消息字符串本身，总的占14个字节。\n","source":"_posts/Pipeline和ChannelHandler.md","raw":"## 目录\n\n*   [Pipeline和ChannelHandler](#pipeline和channelhandler)\n\n    *   [ChannelPipeline](#channelpipeline)\n\n        *   [事件处理](#事件处理)\n\n        *   [事件类型](#事件类型)\n\n        *   [ChannelPipeline特性](#channelpipeline特性)\n\n    *   [ChannelHandler](#channelhandler)\n\n        *   [ChannelHandlerAdapter](#channelhandleradapter)\n\n        *   [ByteToMessageDecoder](#bytetomessagedecoder)\n\n        *   [MessageToMessageDecoder](#messagetomessagedecoder)\n\n        *   [LengthFieldBasedFrameDecoder](#lengthfieldbasedframedecoder)\n\n        *   [MessageToByteEncoder](#messagetobyteencoder)\n\n        *   [MessageToMessageEncoder](#messagetomessageencoder)\n\n        *   [LengthFieledPrepender](#lengthfieledprepender)\n\n# Pipeline和ChannelHandler\n\nChannelPipeline和ChannelHandler是Netty在进行业务处理时的重要组成组件，简单来说，ChannelHandler是进行一个业务处理的处理器，而Pipeline负责将一个个的处理器串联起来，相当于一个容器，Channel中的数据会进入Pipeline，在容器中的各个处理器中按照顺序进行流转。\n\nChannelPipelie和ChannelHandler的关系图示：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64979057476941388430f708ec975dd7\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)\n\n在Netty中，一个请求会创建一个Channel通道，每个Channel会绑定一个Pipeline,Pipeline是一个双向链表结构，它们是一一对应的关系。ChannelHandlerContext是ChannelHandler的上下文对象，通过该对象可以获取处理器的上下文信息，如：绑定的Channel、Pipeline等。\n\nNetty的ChannelPipeline和ChannelHandler机制类似于Servlet和Filter过滤器，这类拦截器实际上是职责链模式的一种变形，主要是为了方便事件的拦截和用户业务逻辑的定制。\n\nNetty将Channel的数据管道抽象为ChannelPileline，消息在ChannelPileline中流动和传递，ChannelPileline持有I/O事件拦截器ChannelHandler的链表，由ChannelPileline进行I/O事件拦截和处理，可以方便地通过新增和删除ChannelHandler实现不同的业务逻辑定制，不需要对已有的ChannelHandler进行修改，能够实现对修改封闭和对扩展的支持。\n\n## ChannelPipeline\n\nChannelPipeline是ChannelHandler的容器，它负责ChannelHandler的管理和事件拦截。\n\n### 事件处理\n\nChannelPipeline事件处理的流程：\n\n*   底层的SocketChannel read()方法读取ByteBuf，触发ChannelRead事件，由I/O线程NioEventLoop调用ChannelPipeline的fireChannelRead(Object msg)方法，将消息(ByteBuf)传输到ChannelPipeline中\n\n*   消息依次被ChannelPipeline中的处理器：(例如)HeadHandler、ChannelHandler1、ChannelHandler2....TailHandler拦截和处理，在这个过程中，任何ChannelHandler都可以中断当前的流程，结束消息的传递\n\n*   调用ChannelHandlerContext的write方法发送消息，消息依次经过：TailHandler、ChannelHandlerN...ChannelHandler2、ChannelHandler1、HeadHandler，最终被添加到消息发送缓冲区中等待刷新和发送，在此过程中也可以中断消息传递，例如当编码失败时，就需要中断消息传递，然后构造异常的Future返回\n\n### 事件类型\n\nNetty的事件类型分为inbound和outbound事件两大类。\n\n**inbound事件**\n\ninbound事件通常由I/O线程触发，例如TCP链路建立、链路关闭事件、读事件、异常通知事件等。触发Inbound事件的方法如下：\n\n*   `ChannelHandlerContext.fireChannelRegistered()`：Channel注册事件\n\n*   `ChannelHandlerContext.fireChannelActive()`：TCP链路建立成功，Channel激活事件\n\n*   `ChannelHandlerContext.fireChannelRead(Object)`：读事件\n\n*   `ChannelHandlerContext.fireChannelReadComplete()`：读操作完成通知事件\n\n*   `ChannelHandlerContext.ExceptionCaught(Throwable)`：异常通知事件\n\n*   `ChannelHandlerContext.fireUserEventTriggered(Object)`：用户自定义事件\n\n*   `ChannelHandlerContext.fireChannelWritabilityChanged()`：Channel的可写状态变化通知事件\n\n*   `ChannelHandlerContext.fireChannelInactive()`：TCP连接关闭，链路不可用通知事件\n\n**outbound事件**\n\noutbound事件通常是由用户主动发起的网络I/O操作，例如用户发起的连接操作，绑定操作，消息发送等，触发outbound事件的方法如下：\n\n*   `ChannelHandlerContext.bind(SocketAddress, ChannelPromis)`：绑定本地地址事件\n\n*   `ChannelHandlerContext.connect(SocketAddress, SocketAddress, ChannelPromis)`：连接服务器事件\n\n*   `ChannelHandlerContext.write(Object, ChannelPromis)`：发送事件\n\n*   `ChannelHandlerContext.flush()`：刷新事件\n\n*   `ChannelHandlerContext.read()`：读事件\n\n*   `ChannelHandlerContext.disconnect(ChannelPromis)`：断开连接事件\n\n*   `ChannelHandlerContext.close(ChannelPromis)`：关闭当前Channel事件\n\n### ChannelPipeline特性\n\n*   支持运行态动态的添加或者删除ChannelHandler。例如在业务高峰期需要对系统做拥堵保护时，就可以根据当前的系统时间进行判断，如果处于业务高峰期，则动态地将系统拥堵保护ChannelHandler添加到当前的ChannelPipeline中，高峰期过后，就可以动态删除拥堵保护ChannelHandler\n\n*   ChannelPipeline是线程安全的。这意味着N个业务线程可以并发地操作ChannelPipeline而不存在多线程并发问题。但是ChannelHandler却不是线程安全的，这意味着尽管ChannelPipeline是线程安全的，但是用户仍然要自己保证ChannelHandler的线程安全。\n\n## ChannelHandler\n\nChannelHandler类似于Servlet的Filter过滤器，负责对I/O事件或者I/O操作进行拦截和处理，它可以选择性地进行拦截和处理自己感兴趣的事件，也可以透传和终止事件的传递。\n\n基于ChannelHandler接口，用户可以方便地进行业务逻辑定制，例如打印日志、统一封装异常信息，性能统计和消息编解码等。\n\n### ChannelHandlerAdapter\n\nChannelHandlerAdapter是handler的基类，它的所有接口实现都是事件透传，如果用户ChannelHandler关心某个事件，只需要覆盖ChannelHandlerAdapter对应的方法即可，对于不关心的方法，无需覆盖直接使用父类的方法，这样子类的代码就会非常简洁和清晰。\n\n在Netty中的Handler可以分为以下两大类：\n\n*   `ChannelInboundHandler`：对应上文中的inbound事件处理。主要负责读事件的逻辑处理，比如，我们在一端读到一段数据，首先要解析这段数据，然后对这些数据做一系列逻辑处理，最终把响应写到对端， 在开始组装响应之前的所有的逻辑，都可以放置在 ChannelInboundHandler 里处理，它的一个最重要的方法就是 channelRead()。可以将 ChannelInboundHandler 的逻辑处理过程与 TCP 的七层协议的解析联系起来，收到的数据一层层从物理层上升到我们的应用层。\n\n*   `ChannelOutBoundHandler`：对应上文中的outbound事件处理。是处理写数据的逻辑，它是定义我们一端在组装完响应之后，把数据写到对端的逻辑，比如，我们封装好一个 response 对象，接下来我们有可能对这个 response 做一些其他的特殊逻辑，然后，再编码成 ByteBuf，最终写到对端，它里面最核心的一个方法就是 write()，读者可以将 ChannelOutBoundHandler 的逻辑处理过程与 TCP 的七层协议的封装过程联系起来，我们在应用层组装响应之后，通过层层协议的封装，直到最底层的物理层。\n\n这两个接口都有默认的实现类，分别是：\n\n*   `ChannelInboundHandlerAdapter`\n\n*   `ChanneloutBoundHandlerAdapter`\n\n它们分别实现两个大类接口的所有方法，默认情况下会把读写事件传播到下一个handler。\n\n在开发中，会有一些比较常用的Netty提供的handler供我们使用，方便快速开发，例如：\n\n*   `ByteToMessageDecoder`\n\n*   `MessageToMessageDecoder`\n\n*   `LengthFieledBasedFrameDecoder`\n\n*   `MessageToByteEncoder`\n\n*   `MessageToMessageEncoder`\n\n*   `LengthFieledPrepender`\n\n下面我们会一一介绍它们各自的用途。\n\n### ByteToMessageDecoder\n\n利用NIO进行网络编程时，往往需要将读取到的字节数组或者字节缓冲区解码为业务可以使用的POJO对象，为了方便业务将ByteBuf解码为业务POJO对象，Netty提供了ByteToMessageDecoder抽象工具解码类。\n\n用户解码器handler继承ByteToMessageDecoder，然`后实现void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)`抽象方法即可完成ByteBuf到POJO类的转换。\n\n由于ByteToMessageDecoder并没有考虑TCP粘包和拆包的问题， 使用该解码器时需要用户自行处理该问题。正因为如此，对于大多数场景不会直接继承ByteToMessageDecoder，而是继承其他更高级的解码器来解决粘包拆包问题。\n\n### MessageToMessageDecoder\n\nMessageToMessageDecoder是Netty的二次解码器，它的职责是将一个对象二次解码为其他对象。\n\n为什么叫做二次解码器？从SocketChannel读取到的TCP数据报是ByteBuf，实际上就是字节数组，我们首先需要将ByteBuf字节数组读取处理，转换为Java对象，然后对Java对象根据某些规则进行二次解码，将其解码为另一个POJO对象。因为MessageToMessageDecoder在ByteToMessageDecoder之后，所以称之为二次解码器。\n\n例如：以HTTP+XML协议栈为例，第一次解码往往是将字节数组解码为HttpRequest对象，然后对HttpRequest消息中的消息体字符串进行二次解码，将XML格式的字符串解码为POJO对象，这就用到了二次解码器。\n\n在使用的时候，用户的解码器只需要实现void decode(ChannelHandlerContext ctx, I msg, List out)抽象方法即可，由于它是将一个POJO解码为另一个POJO，所以不存在粘包拆包问题。\n\n### LengthFieldBasedFrameDecoder\n\n该解码器是一个比较常用的解决TCP粘包拆包问题的解码器。\n\n如何区分一个整包消息，通常由如下4种做法：\n\n*   固定长度，例如120个字节代码一个整包消息，不足的前面补0，解码器在处理这类定长消息的时候比较简单，每次读取到指定长度的字节后进行解码\n\n*   通过回车换行符区分消息，例如FTP协议，这类区分消息的方式多用于文本协议\n\n*   通过分隔符区分整包消息\n\n*   通过指定长度来标识整包消息\n\n由于TCP本身存在粘包和拆包问题，所以通常情况下必须自己处理半包消息。利用LengthFieldBasedFrameDecoder解码器可以自动解决半包问题，通常的用法如下：\n\npipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 0, 4));\n\npipeline.addLast(new StringDecoder());\n\n复制代码\n\n将LengthFieldBasedFrameDecoder解码器加入ChannelPipeline，指定正确的参数组合，它可以将Netty的ByteBuf解码成单个的整包消息，后面的业务解码器拿到的就是完整的数据报，正常进行解码即可，不需要再考虑半包问题，方便了业务消息的解码。\n\n### MessageToByteEncoder\n\nMessageToByteEncoder负责将POJO对象编码成ByteBuf，用户的编码器继承MessageToByteEncoder，实现`void encode(ChannelHandlerContext ctx, I msg, ByteBuf out)`接口,示例代码：\n\npublic class IntegerEncoder extends MessageToByteEncoder\\<Integer> {\n\n@Override\n\nprotected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {\n\nbyteBuf.writeInt(integer);\n\n}\n\n}\n\n复制代码\n\n### MessageToMessageEncoder\n\n将一个POJO对象编码为另一个对象，以HTTP+XML协议为例，它的一种实现发送是：先将POJO对象编码为XML字符串，再将字符串编码为HTTP请求或者应答消息。对于复杂协议，往往需要经历多次编码，为了便于功能扩展，可以通过多个编码器组合来实现相关功能。\n\n用户的解码器继承MessageToMessageEncoder解码器，实现`void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List<Object> list)`方法列表。示例代码如下：\n\npublic class IntegerToStringEncoder extends MessageToMessageEncoder\\<Integer> {\n\n@Override\n\nprotected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List\\<Object> list) throws Exception {\n\nlist.add(integer.toString());\n\n}\n\n}\n\n复制代码\n\n### LengthFieledPrepender\n\n如果协议中的第一个字段为长度字段，Netty提供了LengthFieledPrepender编码器， 它可以计算当前待发送的消息的二进制字节长度，将该长度添加到ByteBuf的缓冲区头中。\n\n例如编码前的字符为\"HELLO,WORLD\"占12字节，通过LengthFieledPrepender编码后，消息组成为消息长度字段+消息字符串本身，总的占14个字节。\n","slug":"Pipeline和ChannelHandler","published":1,"date":"2022-10-29T05:24:00.628Z","updated":"2022-10-29T05:23:21.712Z","_id":"cl9thabby0005xotwfwx7crie","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#pipeline%E5%92%8Cchannelhandler\">Pipeline和ChannelHandler</a></p>\n<ul>\n<li><p><a href=\"#channelpipeline\">ChannelPipeline</a></p>\n<ul>\n<li><p>  <a href=\"#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\">事件处理</a></p>\n</li>\n<li><p>  <a href=\"#%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B\">事件类型</a></p>\n</li>\n<li><p>  <a href=\"#channelpipeline%E7%89%B9%E6%80%A7\">ChannelPipeline特性</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#channelhandler\">ChannelHandler</a></p>\n<ul>\n<li><p>  <a href=\"#channelhandleradapter\">ChannelHandlerAdapter</a></p>\n</li>\n<li><p>  <a href=\"#bytetomessagedecoder\">ByteToMessageDecoder</a></p>\n</li>\n<li><p>  <a href=\"#messagetomessagedecoder\">MessageToMessageDecoder</a></p>\n</li>\n<li><p>  <a href=\"#lengthfieldbasedframedecoder\">LengthFieldBasedFrameDecoder</a></p>\n</li>\n<li><p>  <a href=\"#messagetobyteencoder\">MessageToByteEncoder</a></p>\n</li>\n<li><p>  <a href=\"#messagetomessageencoder\">MessageToMessageEncoder</a></p>\n</li>\n<li><p>  <a href=\"#lengthfieledprepender\">LengthFieledPrepender</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Pipeline和ChannelHandler\"><a href=\"#Pipeline和ChannelHandler\" class=\"headerlink\" title=\"Pipeline和ChannelHandler\"></a>Pipeline和ChannelHandler</h1><p>ChannelPipeline和ChannelHandler是Netty在进行业务处理时的重要组成组件，简单来说，ChannelHandler是进行一个业务处理的处理器，而Pipeline负责将一个个的处理器串联起来，相当于一个容器，Channel中的数据会进入Pipeline，在容器中的各个处理器中按照顺序进行流转。</p>\n<p>ChannelPipelie和ChannelHandler的关系图示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64979057476941388430f708ec975dd7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在Netty中，一个请求会创建一个Channel通道，每个Channel会绑定一个Pipeline,Pipeline是一个双向链表结构，它们是一一对应的关系。ChannelHandlerContext是ChannelHandler的上下文对象，通过该对象可以获取处理器的上下文信息，如：绑定的Channel、Pipeline等。</p>\n<p>Netty的ChannelPipeline和ChannelHandler机制类似于Servlet和Filter过滤器，这类拦截器实际上是职责链模式的一种变形，主要是为了方便事件的拦截和用户业务逻辑的定制。</p>\n<p>Netty将Channel的数据管道抽象为ChannelPileline，消息在ChannelPileline中流动和传递，ChannelPileline持有I/O事件拦截器ChannelHandler的链表，由ChannelPileline进行I/O事件拦截和处理，可以方便地通过新增和删除ChannelHandler实现不同的业务逻辑定制，不需要对已有的ChannelHandler进行修改，能够实现对修改封闭和对扩展的支持。</p>\n<h2 id=\"ChannelPipeline\"><a href=\"#ChannelPipeline\" class=\"headerlink\" title=\"ChannelPipeline\"></a>ChannelPipeline</h2><p>ChannelPipeline是ChannelHandler的容器，它负责ChannelHandler的管理和事件拦截。</p>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><p>ChannelPipeline事件处理的流程：</p>\n<ul>\n<li><p>  底层的SocketChannel read()方法读取ByteBuf，触发ChannelRead事件，由I/O线程NioEventLoop调用ChannelPipeline的fireChannelRead(Object msg)方法，将消息(ByteBuf)传输到ChannelPipeline中</p>\n</li>\n<li><p>  消息依次被ChannelPipeline中的处理器：(例如)HeadHandler、ChannelHandler1、ChannelHandler2….TailHandler拦截和处理，在这个过程中，任何ChannelHandler都可以中断当前的流程，结束消息的传递</p>\n</li>\n<li><p>  调用ChannelHandlerContext的write方法发送消息，消息依次经过：TailHandler、ChannelHandlerN…ChannelHandler2、ChannelHandler1、HeadHandler，最终被添加到消息发送缓冲区中等待刷新和发送，在此过程中也可以中断消息传递，例如当编码失败时，就需要中断消息传递，然后构造异常的Future返回</p>\n</li>\n</ul>\n<h3 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><p>Netty的事件类型分为inbound和outbound事件两大类。</p>\n<p><strong>inbound事件</strong></p>\n<p>inbound事件通常由I/O线程触发，例如TCP链路建立、链路关闭事件、读事件、异常通知事件等。触发Inbound事件的方法如下：</p>\n<ul>\n<li><p>  <code>ChannelHandlerContext.fireChannelRegistered()</code>：Channel注册事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelActive()</code>：TCP链路建立成功，Channel激活事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelRead(Object)</code>：读事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelReadComplete()</code>：读操作完成通知事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.ExceptionCaught(Throwable)</code>：异常通知事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireUserEventTriggered(Object)</code>：用户自定义事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelWritabilityChanged()</code>：Channel的可写状态变化通知事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelInactive()</code>：TCP连接关闭，链路不可用通知事件</p>\n</li>\n</ul>\n<p><strong>outbound事件</strong></p>\n<p>outbound事件通常是由用户主动发起的网络I/O操作，例如用户发起的连接操作，绑定操作，消息发送等，触发outbound事件的方法如下：</p>\n<ul>\n<li><p>  <code>ChannelHandlerContext.bind(SocketAddress, ChannelPromis)</code>：绑定本地地址事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.connect(SocketAddress, SocketAddress, ChannelPromis)</code>：连接服务器事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.write(Object, ChannelPromis)</code>：发送事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.flush()</code>：刷新事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.read()</code>：读事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.disconnect(ChannelPromis)</code>：断开连接事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.close(ChannelPromis)</code>：关闭当前Channel事件</p>\n</li>\n</ul>\n<h3 id=\"ChannelPipeline特性\"><a href=\"#ChannelPipeline特性\" class=\"headerlink\" title=\"ChannelPipeline特性\"></a>ChannelPipeline特性</h3><ul>\n<li><p>  支持运行态动态的添加或者删除ChannelHandler。例如在业务高峰期需要对系统做拥堵保护时，就可以根据当前的系统时间进行判断，如果处于业务高峰期，则动态地将系统拥堵保护ChannelHandler添加到当前的ChannelPipeline中，高峰期过后，就可以动态删除拥堵保护ChannelHandler</p>\n</li>\n<li><p>  ChannelPipeline是线程安全的。这意味着N个业务线程可以并发地操作ChannelPipeline而不存在多线程并发问题。但是ChannelHandler却不是线程安全的，这意味着尽管ChannelPipeline是线程安全的，但是用户仍然要自己保证ChannelHandler的线程安全。</p>\n</li>\n</ul>\n<h2 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h2><p>ChannelHandler类似于Servlet的Filter过滤器，负责对I/O事件或者I/O操作进行拦截和处理，它可以选择性地进行拦截和处理自己感兴趣的事件，也可以透传和终止事件的传递。</p>\n<p>基于ChannelHandler接口，用户可以方便地进行业务逻辑定制，例如打印日志、统一封装异常信息，性能统计和消息编解码等。</p>\n<h3 id=\"ChannelHandlerAdapter\"><a href=\"#ChannelHandlerAdapter\" class=\"headerlink\" title=\"ChannelHandlerAdapter\"></a>ChannelHandlerAdapter</h3><p>ChannelHandlerAdapter是handler的基类，它的所有接口实现都是事件透传，如果用户ChannelHandler关心某个事件，只需要覆盖ChannelHandlerAdapter对应的方法即可，对于不关心的方法，无需覆盖直接使用父类的方法，这样子类的代码就会非常简洁和清晰。</p>\n<p>在Netty中的Handler可以分为以下两大类：</p>\n<ul>\n<li><p>  <code>ChannelInboundHandler</code>：对应上文中的inbound事件处理。主要负责读事件的逻辑处理，比如，我们在一端读到一段数据，首先要解析这段数据，然后对这些数据做一系列逻辑处理，最终把响应写到对端， 在开始组装响应之前的所有的逻辑，都可以放置在 ChannelInboundHandler 里处理，它的一个最重要的方法就是 channelRead()。可以将 ChannelInboundHandler 的逻辑处理过程与 TCP 的七层协议的解析联系起来，收到的数据一层层从物理层上升到我们的应用层。</p>\n</li>\n<li><p>  <code>ChannelOutBoundHandler</code>：对应上文中的outbound事件处理。是处理写数据的逻辑，它是定义我们一端在组装完响应之后，把数据写到对端的逻辑，比如，我们封装好一个 response 对象，接下来我们有可能对这个 response 做一些其他的特殊逻辑，然后，再编码成 ByteBuf，最终写到对端，它里面最核心的一个方法就是 write()，读者可以将 ChannelOutBoundHandler 的逻辑处理过程与 TCP 的七层协议的封装过程联系起来，我们在应用层组装响应之后，通过层层协议的封装，直到最底层的物理层。</p>\n</li>\n</ul>\n<p>这两个接口都有默认的实现类，分别是：</p>\n<ul>\n<li><p>  <code>ChannelInboundHandlerAdapter</code></p>\n</li>\n<li><p>  <code>ChanneloutBoundHandlerAdapter</code></p>\n</li>\n</ul>\n<p>它们分别实现两个大类接口的所有方法，默认情况下会把读写事件传播到下一个handler。</p>\n<p>在开发中，会有一些比较常用的Netty提供的handler供我们使用，方便快速开发，例如：</p>\n<ul>\n<li><p>  <code>ByteToMessageDecoder</code></p>\n</li>\n<li><p>  <code>MessageToMessageDecoder</code></p>\n</li>\n<li><p>  <code>LengthFieledBasedFrameDecoder</code></p>\n</li>\n<li><p>  <code>MessageToByteEncoder</code></p>\n</li>\n<li><p>  <code>MessageToMessageEncoder</code></p>\n</li>\n<li><p>  <code>LengthFieledPrepender</code></p>\n</li>\n</ul>\n<p>下面我们会一一介绍它们各自的用途。</p>\n<h3 id=\"ByteToMessageDecoder\"><a href=\"#ByteToMessageDecoder\" class=\"headerlink\" title=\"ByteToMessageDecoder\"></a>ByteToMessageDecoder</h3><p>利用NIO进行网络编程时，往往需要将读取到的字节数组或者字节缓冲区解码为业务可以使用的POJO对象，为了方便业务将ByteBuf解码为业务POJO对象，Netty提供了ByteToMessageDecoder抽象工具解码类。</p>\n<p>用户解码器handler继承ByteToMessageDecoder，然<code>后实现void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</code>抽象方法即可完成ByteBuf到POJO类的转换。</p>\n<p>由于ByteToMessageDecoder并没有考虑TCP粘包和拆包的问题， 使用该解码器时需要用户自行处理该问题。正因为如此，对于大多数场景不会直接继承ByteToMessageDecoder，而是继承其他更高级的解码器来解决粘包拆包问题。</p>\n<h3 id=\"MessageToMessageDecoder\"><a href=\"#MessageToMessageDecoder\" class=\"headerlink\" title=\"MessageToMessageDecoder\"></a>MessageToMessageDecoder</h3><p>MessageToMessageDecoder是Netty的二次解码器，它的职责是将一个对象二次解码为其他对象。</p>\n<p>为什么叫做二次解码器？从SocketChannel读取到的TCP数据报是ByteBuf，实际上就是字节数组，我们首先需要将ByteBuf字节数组读取处理，转换为Java对象，然后对Java对象根据某些规则进行二次解码，将其解码为另一个POJO对象。因为MessageToMessageDecoder在ByteToMessageDecoder之后，所以称之为二次解码器。</p>\n<p>例如：以HTTP+XML协议栈为例，第一次解码往往是将字节数组解码为HttpRequest对象，然后对HttpRequest消息中的消息体字符串进行二次解码，将XML格式的字符串解码为POJO对象，这就用到了二次解码器。</p>\n<p>在使用的时候，用户的解码器只需要实现void decode(ChannelHandlerContext ctx, I msg, List out)抽象方法即可，由于它是将一个POJO解码为另一个POJO，所以不存在粘包拆包问题。</p>\n<h3 id=\"LengthFieldBasedFrameDecoder\"><a href=\"#LengthFieldBasedFrameDecoder\" class=\"headerlink\" title=\"LengthFieldBasedFrameDecoder\"></a>LengthFieldBasedFrameDecoder</h3><p>该解码器是一个比较常用的解决TCP粘包拆包问题的解码器。</p>\n<p>如何区分一个整包消息，通常由如下4种做法：</p>\n<ul>\n<li><p>  固定长度，例如120个字节代码一个整包消息，不足的前面补0，解码器在处理这类定长消息的时候比较简单，每次读取到指定长度的字节后进行解码</p>\n</li>\n<li><p>  通过回车换行符区分消息，例如FTP协议，这类区分消息的方式多用于文本协议</p>\n</li>\n<li><p>  通过分隔符区分整包消息</p>\n</li>\n<li><p>  通过指定长度来标识整包消息</p>\n</li>\n</ul>\n<p>由于TCP本身存在粘包和拆包问题，所以通常情况下必须自己处理半包消息。利用LengthFieldBasedFrameDecoder解码器可以自动解决半包问题，通常的用法如下：</p>\n<p>pipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 0, 4));</p>\n<p>pipeline.addLast(new StringDecoder());</p>\n<p>复制代码</p>\n<p>将LengthFieldBasedFrameDecoder解码器加入ChannelPipeline，指定正确的参数组合，它可以将Netty的ByteBuf解码成单个的整包消息，后面的业务解码器拿到的就是完整的数据报，正常进行解码即可，不需要再考虑半包问题，方便了业务消息的解码。</p>\n<h3 id=\"MessageToByteEncoder\"><a href=\"#MessageToByteEncoder\" class=\"headerlink\" title=\"MessageToByteEncoder\"></a>MessageToByteEncoder</h3><p>MessageToByteEncoder负责将POJO对象编码成ByteBuf，用户的编码器继承MessageToByteEncoder，实现<code>void encode(ChannelHandlerContext ctx, I msg, ByteBuf out)</code>接口,示例代码：</p>\n<p>public class IntegerEncoder extends MessageToByteEncoder&lt;Integer&gt; {</p>\n<p>@Override</p>\n<p>protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {</p>\n<p>byteBuf.writeInt(integer);</p>\n<p>}</p>\n<p>}</p>\n<p>复制代码</p>\n<h3 id=\"MessageToMessageEncoder\"><a href=\"#MessageToMessageEncoder\" class=\"headerlink\" title=\"MessageToMessageEncoder\"></a>MessageToMessageEncoder</h3><p>将一个POJO对象编码为另一个对象，以HTTP+XML协议为例，它的一种实现发送是：先将POJO对象编码为XML字符串，再将字符串编码为HTTP请求或者应答消息。对于复杂协议，往往需要经历多次编码，为了便于功能扩展，可以通过多个编码器组合来实现相关功能。</p>\n<p>用户的解码器继承MessageToMessageEncoder解码器，实现<code>void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List&lt;Object&gt; list)</code>方法列表。示例代码如下：</p>\n<p>public class IntegerToStringEncoder extends MessageToMessageEncoder&lt;Integer&gt; {</p>\n<p>@Override</p>\n<p>protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List&lt;Object&gt; list) throws Exception {</p>\n<p>list.add(integer.toString());</p>\n<p>}</p>\n<p>}</p>\n<p>复制代码</p>\n<h3 id=\"LengthFieledPrepender\"><a href=\"#LengthFieledPrepender\" class=\"headerlink\" title=\"LengthFieledPrepender\"></a>LengthFieledPrepender</h3><p>如果协议中的第一个字段为长度字段，Netty提供了LengthFieledPrepender编码器， 它可以计算当前待发送的消息的二进制字节长度，将该长度添加到ByteBuf的缓冲区头中。</p>\n<p>例如编码前的字符为”HELLO,WORLD”占12字节，通过LengthFieledPrepender编码后，消息组成为消息长度字段+消息字符串本身，总的占14个字节。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#pipeline%E5%92%8Cchannelhandler\">Pipeline和ChannelHandler</a></p>\n<ul>\n<li><p><a href=\"#channelpipeline\">ChannelPipeline</a></p>\n<ul>\n<li><p>  <a href=\"#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\">事件处理</a></p>\n</li>\n<li><p>  <a href=\"#%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B\">事件类型</a></p>\n</li>\n<li><p>  <a href=\"#channelpipeline%E7%89%B9%E6%80%A7\">ChannelPipeline特性</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#channelhandler\">ChannelHandler</a></p>\n<ul>\n<li><p>  <a href=\"#channelhandleradapter\">ChannelHandlerAdapter</a></p>\n</li>\n<li><p>  <a href=\"#bytetomessagedecoder\">ByteToMessageDecoder</a></p>\n</li>\n<li><p>  <a href=\"#messagetomessagedecoder\">MessageToMessageDecoder</a></p>\n</li>\n<li><p>  <a href=\"#lengthfieldbasedframedecoder\">LengthFieldBasedFrameDecoder</a></p>\n</li>\n<li><p>  <a href=\"#messagetobyteencoder\">MessageToByteEncoder</a></p>\n</li>\n<li><p>  <a href=\"#messagetomessageencoder\">MessageToMessageEncoder</a></p>\n</li>\n<li><p>  <a href=\"#lengthfieledprepender\">LengthFieledPrepender</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Pipeline和ChannelHandler\"><a href=\"#Pipeline和ChannelHandler\" class=\"headerlink\" title=\"Pipeline和ChannelHandler\"></a>Pipeline和ChannelHandler</h1><p>ChannelPipeline和ChannelHandler是Netty在进行业务处理时的重要组成组件，简单来说，ChannelHandler是进行一个业务处理的处理器，而Pipeline负责将一个个的处理器串联起来，相当于一个容器，Channel中的数据会进入Pipeline，在容器中的各个处理器中按照顺序进行流转。</p>\n<p>ChannelPipelie和ChannelHandler的关系图示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64979057476941388430f708ec975dd7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image\"></p>\n<p>在Netty中，一个请求会创建一个Channel通道，每个Channel会绑定一个Pipeline,Pipeline是一个双向链表结构，它们是一一对应的关系。ChannelHandlerContext是ChannelHandler的上下文对象，通过该对象可以获取处理器的上下文信息，如：绑定的Channel、Pipeline等。</p>\n<p>Netty的ChannelPipeline和ChannelHandler机制类似于Servlet和Filter过滤器，这类拦截器实际上是职责链模式的一种变形，主要是为了方便事件的拦截和用户业务逻辑的定制。</p>\n<p>Netty将Channel的数据管道抽象为ChannelPileline，消息在ChannelPileline中流动和传递，ChannelPileline持有I/O事件拦截器ChannelHandler的链表，由ChannelPileline进行I/O事件拦截和处理，可以方便地通过新增和删除ChannelHandler实现不同的业务逻辑定制，不需要对已有的ChannelHandler进行修改，能够实现对修改封闭和对扩展的支持。</p>\n<h2 id=\"ChannelPipeline\"><a href=\"#ChannelPipeline\" class=\"headerlink\" title=\"ChannelPipeline\"></a>ChannelPipeline</h2><p>ChannelPipeline是ChannelHandler的容器，它负责ChannelHandler的管理和事件拦截。</p>\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><p>ChannelPipeline事件处理的流程：</p>\n<ul>\n<li><p>  底层的SocketChannel read()方法读取ByteBuf，触发ChannelRead事件，由I/O线程NioEventLoop调用ChannelPipeline的fireChannelRead(Object msg)方法，将消息(ByteBuf)传输到ChannelPipeline中</p>\n</li>\n<li><p>  消息依次被ChannelPipeline中的处理器：(例如)HeadHandler、ChannelHandler1、ChannelHandler2….TailHandler拦截和处理，在这个过程中，任何ChannelHandler都可以中断当前的流程，结束消息的传递</p>\n</li>\n<li><p>  调用ChannelHandlerContext的write方法发送消息，消息依次经过：TailHandler、ChannelHandlerN…ChannelHandler2、ChannelHandler1、HeadHandler，最终被添加到消息发送缓冲区中等待刷新和发送，在此过程中也可以中断消息传递，例如当编码失败时，就需要中断消息传递，然后构造异常的Future返回</p>\n</li>\n</ul>\n<h3 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h3><p>Netty的事件类型分为inbound和outbound事件两大类。</p>\n<p><strong>inbound事件</strong></p>\n<p>inbound事件通常由I/O线程触发，例如TCP链路建立、链路关闭事件、读事件、异常通知事件等。触发Inbound事件的方法如下：</p>\n<ul>\n<li><p>  <code>ChannelHandlerContext.fireChannelRegistered()</code>：Channel注册事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelActive()</code>：TCP链路建立成功，Channel激活事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelRead(Object)</code>：读事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelReadComplete()</code>：读操作完成通知事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.ExceptionCaught(Throwable)</code>：异常通知事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireUserEventTriggered(Object)</code>：用户自定义事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelWritabilityChanged()</code>：Channel的可写状态变化通知事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.fireChannelInactive()</code>：TCP连接关闭，链路不可用通知事件</p>\n</li>\n</ul>\n<p><strong>outbound事件</strong></p>\n<p>outbound事件通常是由用户主动发起的网络I/O操作，例如用户发起的连接操作，绑定操作，消息发送等，触发outbound事件的方法如下：</p>\n<ul>\n<li><p>  <code>ChannelHandlerContext.bind(SocketAddress, ChannelPromis)</code>：绑定本地地址事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.connect(SocketAddress, SocketAddress, ChannelPromis)</code>：连接服务器事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.write(Object, ChannelPromis)</code>：发送事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.flush()</code>：刷新事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.read()</code>：读事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.disconnect(ChannelPromis)</code>：断开连接事件</p>\n</li>\n<li><p>  <code>ChannelHandlerContext.close(ChannelPromis)</code>：关闭当前Channel事件</p>\n</li>\n</ul>\n<h3 id=\"ChannelPipeline特性\"><a href=\"#ChannelPipeline特性\" class=\"headerlink\" title=\"ChannelPipeline特性\"></a>ChannelPipeline特性</h3><ul>\n<li><p>  支持运行态动态的添加或者删除ChannelHandler。例如在业务高峰期需要对系统做拥堵保护时，就可以根据当前的系统时间进行判断，如果处于业务高峰期，则动态地将系统拥堵保护ChannelHandler添加到当前的ChannelPipeline中，高峰期过后，就可以动态删除拥堵保护ChannelHandler</p>\n</li>\n<li><p>  ChannelPipeline是线程安全的。这意味着N个业务线程可以并发地操作ChannelPipeline而不存在多线程并发问题。但是ChannelHandler却不是线程安全的，这意味着尽管ChannelPipeline是线程安全的，但是用户仍然要自己保证ChannelHandler的线程安全。</p>\n</li>\n</ul>\n<h2 id=\"ChannelHandler\"><a href=\"#ChannelHandler\" class=\"headerlink\" title=\"ChannelHandler\"></a>ChannelHandler</h2><p>ChannelHandler类似于Servlet的Filter过滤器，负责对I/O事件或者I/O操作进行拦截和处理，它可以选择性地进行拦截和处理自己感兴趣的事件，也可以透传和终止事件的传递。</p>\n<p>基于ChannelHandler接口，用户可以方便地进行业务逻辑定制，例如打印日志、统一封装异常信息，性能统计和消息编解码等。</p>\n<h3 id=\"ChannelHandlerAdapter\"><a href=\"#ChannelHandlerAdapter\" class=\"headerlink\" title=\"ChannelHandlerAdapter\"></a>ChannelHandlerAdapter</h3><p>ChannelHandlerAdapter是handler的基类，它的所有接口实现都是事件透传，如果用户ChannelHandler关心某个事件，只需要覆盖ChannelHandlerAdapter对应的方法即可，对于不关心的方法，无需覆盖直接使用父类的方法，这样子类的代码就会非常简洁和清晰。</p>\n<p>在Netty中的Handler可以分为以下两大类：</p>\n<ul>\n<li><p>  <code>ChannelInboundHandler</code>：对应上文中的inbound事件处理。主要负责读事件的逻辑处理，比如，我们在一端读到一段数据，首先要解析这段数据，然后对这些数据做一系列逻辑处理，最终把响应写到对端， 在开始组装响应之前的所有的逻辑，都可以放置在 ChannelInboundHandler 里处理，它的一个最重要的方法就是 channelRead()。可以将 ChannelInboundHandler 的逻辑处理过程与 TCP 的七层协议的解析联系起来，收到的数据一层层从物理层上升到我们的应用层。</p>\n</li>\n<li><p>  <code>ChannelOutBoundHandler</code>：对应上文中的outbound事件处理。是处理写数据的逻辑，它是定义我们一端在组装完响应之后，把数据写到对端的逻辑，比如，我们封装好一个 response 对象，接下来我们有可能对这个 response 做一些其他的特殊逻辑，然后，再编码成 ByteBuf，最终写到对端，它里面最核心的一个方法就是 write()，读者可以将 ChannelOutBoundHandler 的逻辑处理过程与 TCP 的七层协议的封装过程联系起来，我们在应用层组装响应之后，通过层层协议的封装，直到最底层的物理层。</p>\n</li>\n</ul>\n<p>这两个接口都有默认的实现类，分别是：</p>\n<ul>\n<li><p>  <code>ChannelInboundHandlerAdapter</code></p>\n</li>\n<li><p>  <code>ChanneloutBoundHandlerAdapter</code></p>\n</li>\n</ul>\n<p>它们分别实现两个大类接口的所有方法，默认情况下会把读写事件传播到下一个handler。</p>\n<p>在开发中，会有一些比较常用的Netty提供的handler供我们使用，方便快速开发，例如：</p>\n<ul>\n<li><p>  <code>ByteToMessageDecoder</code></p>\n</li>\n<li><p>  <code>MessageToMessageDecoder</code></p>\n</li>\n<li><p>  <code>LengthFieledBasedFrameDecoder</code></p>\n</li>\n<li><p>  <code>MessageToByteEncoder</code></p>\n</li>\n<li><p>  <code>MessageToMessageEncoder</code></p>\n</li>\n<li><p>  <code>LengthFieledPrepender</code></p>\n</li>\n</ul>\n<p>下面我们会一一介绍它们各自的用途。</p>\n<h3 id=\"ByteToMessageDecoder\"><a href=\"#ByteToMessageDecoder\" class=\"headerlink\" title=\"ByteToMessageDecoder\"></a>ByteToMessageDecoder</h3><p>利用NIO进行网络编程时，往往需要将读取到的字节数组或者字节缓冲区解码为业务可以使用的POJO对象，为了方便业务将ByteBuf解码为业务POJO对象，Netty提供了ByteToMessageDecoder抽象工具解码类。</p>\n<p>用户解码器handler继承ByteToMessageDecoder，然<code>后实现void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</code>抽象方法即可完成ByteBuf到POJO类的转换。</p>\n<p>由于ByteToMessageDecoder并没有考虑TCP粘包和拆包的问题， 使用该解码器时需要用户自行处理该问题。正因为如此，对于大多数场景不会直接继承ByteToMessageDecoder，而是继承其他更高级的解码器来解决粘包拆包问题。</p>\n<h3 id=\"MessageToMessageDecoder\"><a href=\"#MessageToMessageDecoder\" class=\"headerlink\" title=\"MessageToMessageDecoder\"></a>MessageToMessageDecoder</h3><p>MessageToMessageDecoder是Netty的二次解码器，它的职责是将一个对象二次解码为其他对象。</p>\n<p>为什么叫做二次解码器？从SocketChannel读取到的TCP数据报是ByteBuf，实际上就是字节数组，我们首先需要将ByteBuf字节数组读取处理，转换为Java对象，然后对Java对象根据某些规则进行二次解码，将其解码为另一个POJO对象。因为MessageToMessageDecoder在ByteToMessageDecoder之后，所以称之为二次解码器。</p>\n<p>例如：以HTTP+XML协议栈为例，第一次解码往往是将字节数组解码为HttpRequest对象，然后对HttpRequest消息中的消息体字符串进行二次解码，将XML格式的字符串解码为POJO对象，这就用到了二次解码器。</p>\n<p>在使用的时候，用户的解码器只需要实现void decode(ChannelHandlerContext ctx, I msg, List out)抽象方法即可，由于它是将一个POJO解码为另一个POJO，所以不存在粘包拆包问题。</p>\n<h3 id=\"LengthFieldBasedFrameDecoder\"><a href=\"#LengthFieldBasedFrameDecoder\" class=\"headerlink\" title=\"LengthFieldBasedFrameDecoder\"></a>LengthFieldBasedFrameDecoder</h3><p>该解码器是一个比较常用的解决TCP粘包拆包问题的解码器。</p>\n<p>如何区分一个整包消息，通常由如下4种做法：</p>\n<ul>\n<li><p>  固定长度，例如120个字节代码一个整包消息，不足的前面补0，解码器在处理这类定长消息的时候比较简单，每次读取到指定长度的字节后进行解码</p>\n</li>\n<li><p>  通过回车换行符区分消息，例如FTP协议，这类区分消息的方式多用于文本协议</p>\n</li>\n<li><p>  通过分隔符区分整包消息</p>\n</li>\n<li><p>  通过指定长度来标识整包消息</p>\n</li>\n</ul>\n<p>由于TCP本身存在粘包和拆包问题，所以通常情况下必须自己处理半包消息。利用LengthFieldBasedFrameDecoder解码器可以自动解决半包问题，通常的用法如下：</p>\n<p>pipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 0, 4));</p>\n<p>pipeline.addLast(new StringDecoder());</p>\n<p>复制代码</p>\n<p>将LengthFieldBasedFrameDecoder解码器加入ChannelPipeline，指定正确的参数组合，它可以将Netty的ByteBuf解码成单个的整包消息，后面的业务解码器拿到的就是完整的数据报，正常进行解码即可，不需要再考虑半包问题，方便了业务消息的解码。</p>\n<h3 id=\"MessageToByteEncoder\"><a href=\"#MessageToByteEncoder\" class=\"headerlink\" title=\"MessageToByteEncoder\"></a>MessageToByteEncoder</h3><p>MessageToByteEncoder负责将POJO对象编码成ByteBuf，用户的编码器继承MessageToByteEncoder，实现<code>void encode(ChannelHandlerContext ctx, I msg, ByteBuf out)</code>接口,示例代码：</p>\n<p>public class IntegerEncoder extends MessageToByteEncoder&lt;Integer&gt; {</p>\n<p>@Override</p>\n<p>protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, ByteBuf byteBuf) throws Exception {</p>\n<p>byteBuf.writeInt(integer);</p>\n<p>}</p>\n<p>}</p>\n<p>复制代码</p>\n<h3 id=\"MessageToMessageEncoder\"><a href=\"#MessageToMessageEncoder\" class=\"headerlink\" title=\"MessageToMessageEncoder\"></a>MessageToMessageEncoder</h3><p>将一个POJO对象编码为另一个对象，以HTTP+XML协议为例，它的一种实现发送是：先将POJO对象编码为XML字符串，再将字符串编码为HTTP请求或者应答消息。对于复杂协议，往往需要经历多次编码，为了便于功能扩展，可以通过多个编码器组合来实现相关功能。</p>\n<p>用户的解码器继承MessageToMessageEncoder解码器，实现<code>void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List&lt;Object&gt; list)</code>方法列表。示例代码如下：</p>\n<p>public class IntegerToStringEncoder extends MessageToMessageEncoder&lt;Integer&gt; {</p>\n<p>@Override</p>\n<p>protected void encode(ChannelHandlerContext channelHandlerContext, Integer integer, List&lt;Object&gt; list) throws Exception {</p>\n<p>list.add(integer.toString());</p>\n<p>}</p>\n<p>}</p>\n<p>复制代码</p>\n<h3 id=\"LengthFieledPrepender\"><a href=\"#LengthFieledPrepender\" class=\"headerlink\" title=\"LengthFieledPrepender\"></a>LengthFieledPrepender</h3><p>如果协议中的第一个字段为长度字段，Netty提供了LengthFieledPrepender编码器， 它可以计算当前待发送的消息的二进制字节长度，将该长度添加到ByteBuf的缓冲区头中。</p>\n<p>例如编码前的字符为”HELLO,WORLD”占12字节，通过LengthFieledPrepender编码后，消息组成为消息长度字段+消息字符串本身，总的占14个字节。</p>\n"},{"_content":"## 目录\n\n*   [EventLoopGroup](#eventloopgroup)\n\n    *   [前言](#前言)\n\n    *   [三种Reactor线程模型](#三种reactor线程模型)\n\n    *   [Netty线程模型最佳实践](#netty线程模型最佳实践)\n\n# EventLoopGroup\n\n## 前言\n\n线程模型是Netty框架的核心，模型设计的好坏决定了框架的性能、并发量和安全性等架构质量。\n\nNetty的线程模型被精心的设计，既提升了框架的并发性能，又在很大程度避免锁，局部实现了无锁化设计。\n\n因此这篇文章将介绍Netty的线程模型，看看它的线程模型是如何设计用于支持高并发高性能的。\n\n## 三种Reactor线程模型\n\n提到线程模型，比较经典的是Reactor线程模型，尽管不同的NIO框架对Reactor模型的实现有所差异，但是本质上还是遵循了Reactor的基础线程模型。\n\n**什么是Reactor线程模型？**\n\nReactor线程模型是对于传统的I/O线程模型的一种优化。\n\n传统的I/O线程模型采用阻塞I/O来获取输入流数据，并且每个连接都需要独立的线程完成数据的输入、业务处理、数据返回等一个完整的操作链路。这种模型在高并发场景下，有两个比较明显的缺点：\n\n*   每个连接都需要创建一个对应线程，线程大量创建占用大量的服务器资源\n\n*   线程没有数据可读情况下的阻塞会对性能造成很大的影响\n\nReactor线程模型为了解决这两个问题，提供了以下解决方案：\n\n*   基于I/O多路复用：多个客户端连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，通过事件驱动通知应用程序，线程从阻塞状态返回，开始进行业务处理\n\n*   基于线程池技术减少线程创建：基于线程池，不必再为每一个连接创建线程，将连接完成后的业务处理分配给线程池进行调度\n\n**Reactor线程模型图：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d892cee9b44493c987be58a4af86bac\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\n\nReactor线程模型\n\nReactor在一个单独的线程中进行，负责监听和分发事件。\n\nReactor的两个核心组件：\n\n*   EventDispatch：监听和分发事件，分发给适当的处理程序来对IO事件做出反应\n\n*   handlers是处理程序执行IO事件要完成的实际事件，Reactor 通过调度适当地处理程序来响应I/O事件，处理程序执行非阻塞操作。\n\n有\n\nReactor模式使用I/O复用监听事件，收到事件后，分发给某个线程去处理，这也是能进行网络高并发处理的关键。\n\nNetty的线程模型不是一成不变的，它实际取决于用户的启动参数配置。通过设置不同的启动参数，Netty可以同时支持Reactor单线程模型、多线程模型和主从Reactor多线程模型。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa5766f4f69443ffa74fc932f9c03369\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\n\nNetty线程模型\n\nnetty线程模型抽象出两组线程池：\n\n*   BossGroup：专门负责接收客户端的连接\n\n*   WorkerGroup：专门负责网络的读写，业务处理\n\n两者的类型都是NioEventLoopGroup，NioEventLoopGroup相当于一个事件循环组，这个组中有多个事件循环，每个事件循环是NioEventLoop。\n\nNioEventLoop表示一个不断循环的执行处理任务的线程，每个NioEventLoop都有一个selector，用于监听绑定在其上的socket网络通信。\n\nNioEventLoopGroup可以有多个线程，即可以有多个NioEventLoop（数量可以指定）\n\n每个Boss NioEventLoop执行的步骤：\n\n*   轮询accept事件\n\n*   处理accept事件，与client事件建立连接，生成NIoSocketChannel，并将其注册到某个worker NIoEventLoop上的selector上\n\n*   处理任务队列的任务，即runTasks\n\n每个Worker NioEventLoop循环执行的步骤：\n\n*   轮询read/write事件\n\n*   处理IO事件，在对应的NIoSocketChannel 上进行处理\n\n*   处理任务队列的任务，即runTasks\n\n每个Worker NioEventLoop处理业务时，会通过pipeline（管道），pipeline中包含了channel，管道中维护了很多的处理器。\n\n通过调整线程池的线程个数、是否共享线程池等方式，Netty的Reactor线程模型可以在单线程、多线程和主从线程模型之间切换，这种灵活配置方式可以最大程度满足不同用户的个性化定制。\n\n为了尽可能提升性能，Netty在很大地方进行了无锁化设计，例如在I/O线程内部进行串行操作，避免多线程竞争导致的性能下降问题。表面上看，串行设计似乎CPU利用率不高，并发程度不够，但是通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列多个工作线程的模型更优。\n\nNetty的NioEventLoop读取到消息之后，直接调用ChannelPipeline的fireChannelRead(Object msg)。只要用户不主动切换线程，一直都是由NioEventLoop调用用户的Handler，期间不进行线程切换。这种串行化处理方式避免了多线程操作导致的锁的竞争。从性能角度看是最优的。\n\nNetty的NioEventLoop并不是一个纯粹的I/O线程，它除了负责I/O的读写之外，还可以处理以下两类任务：\n\n*   系统Task：通过调用NioEventLoop的execute(Runnable task)方法实现，Netty中有很多系统Task，主要用于：当I/O线程和用户线程同时操作网络资源时，为了防止并发操作导致的锁竞争，将用户线程的操作封装成Task放入消息队列中，由I/O线程负责执行，这样就实现了无锁化。\n\n*   定时Task：通过调用NioEventLoop的schedule(Runnable command, long delay, TimeUnit unit)方法实现\n\n## Netty线程模型最佳实践\n\n*   创建两个NioEventLoopGroup，用于逻辑分离NIO Acceptor和NIO I/O线程\n\n    NioEventLoopGroup bossGroup = new NioEventLoopGroup();&#x20;\n\n    NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n\n    复制代码\n\nBossGroup和WorkerGroup的线程（NioEventLoop）数量：默认是CPU核心数的两倍。\n\n可以通过构造函数传入线程数量指定线程池的线程数量。\n\n*   尽量不要在ChannleHandler中启动用户线程\n\n*   解码要放在NIO线程调用的解码handler中进行，不要切换到用户线程中完成消息的解码\n\n*   如果业务处理逻辑很简单，没有复杂的业务逻辑计算，没有可能会导致线程被阻塞的磁盘操作、数据库操作、网络操作等，可以直接在NIO线程上完成业务逻辑编排，不需要切换到用户线程。\n\n*   如果业务逻辑处理复杂，不要在NIO线程上完成，建议将解码后的POJO消息封装成Task，派发到业务线程池中由业务线程执行，以保证NIO线程尽快被释放，处理其他I/O操作\n\n推荐的线程数量计算公式有两种：\n\n*   公式一：线程数量=（线程总时间/瓶颈资源时间）X 瓶颈资源的线程并行数\n\n*   公式二：QPS=1000/线程总时间 X 线程数\n\n由于用户场景的不同，对于一些复杂的系统，实际上很难计算出最优的线程配置，只能根据测试数据和用户场景，结合公式给出一个相对合理的范围，然后对范围内的数据进行性能测试，选择相对最优值。\n","source":"_posts/EventLoopGroup.md","raw":"## 目录\n\n*   [EventLoopGroup](#eventloopgroup)\n\n    *   [前言](#前言)\n\n    *   [三种Reactor线程模型](#三种reactor线程模型)\n\n    *   [Netty线程模型最佳实践](#netty线程模型最佳实践)\n\n# EventLoopGroup\n\n## 前言\n\n线程模型是Netty框架的核心，模型设计的好坏决定了框架的性能、并发量和安全性等架构质量。\n\nNetty的线程模型被精心的设计，既提升了框架的并发性能，又在很大程度避免锁，局部实现了无锁化设计。\n\n因此这篇文章将介绍Netty的线程模型，看看它的线程模型是如何设计用于支持高并发高性能的。\n\n## 三种Reactor线程模型\n\n提到线程模型，比较经典的是Reactor线程模型，尽管不同的NIO框架对Reactor模型的实现有所差异，但是本质上还是遵循了Reactor的基础线程模型。\n\n**什么是Reactor线程模型？**\n\nReactor线程模型是对于传统的I/O线程模型的一种优化。\n\n传统的I/O线程模型采用阻塞I/O来获取输入流数据，并且每个连接都需要独立的线程完成数据的输入、业务处理、数据返回等一个完整的操作链路。这种模型在高并发场景下，有两个比较明显的缺点：\n\n*   每个连接都需要创建一个对应线程，线程大量创建占用大量的服务器资源\n\n*   线程没有数据可读情况下的阻塞会对性能造成很大的影响\n\nReactor线程模型为了解决这两个问题，提供了以下解决方案：\n\n*   基于I/O多路复用：多个客户端连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，通过事件驱动通知应用程序，线程从阻塞状态返回，开始进行业务处理\n\n*   基于线程池技术减少线程创建：基于线程池，不必再为每一个连接创建线程，将连接完成后的业务处理分配给线程池进行调度\n\n**Reactor线程模型图：**\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d892cee9b44493c987be58a4af86bac\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\n\nReactor线程模型\n\nReactor在一个单独的线程中进行，负责监听和分发事件。\n\nReactor的两个核心组件：\n\n*   EventDispatch：监听和分发事件，分发给适当的处理程序来对IO事件做出反应\n\n*   handlers是处理程序执行IO事件要完成的实际事件，Reactor 通过调度适当地处理程序来响应I/O事件，处理程序执行非阻塞操作。\n\n有\n\nReactor模式使用I/O复用监听事件，收到事件后，分发给某个线程去处理，这也是能进行网络高并发处理的关键。\n\nNetty的线程模型不是一成不变的，它实际取决于用户的启动参数配置。通过设置不同的启动参数，Netty可以同时支持Reactor单线程模型、多线程模型和主从Reactor多线程模型。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa5766f4f69443ffa74fc932f9c03369\\~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\n\nNetty线程模型\n\nnetty线程模型抽象出两组线程池：\n\n*   BossGroup：专门负责接收客户端的连接\n\n*   WorkerGroup：专门负责网络的读写，业务处理\n\n两者的类型都是NioEventLoopGroup，NioEventLoopGroup相当于一个事件循环组，这个组中有多个事件循环，每个事件循环是NioEventLoop。\n\nNioEventLoop表示一个不断循环的执行处理任务的线程，每个NioEventLoop都有一个selector，用于监听绑定在其上的socket网络通信。\n\nNioEventLoopGroup可以有多个线程，即可以有多个NioEventLoop（数量可以指定）\n\n每个Boss NioEventLoop执行的步骤：\n\n*   轮询accept事件\n\n*   处理accept事件，与client事件建立连接，生成NIoSocketChannel，并将其注册到某个worker NIoEventLoop上的selector上\n\n*   处理任务队列的任务，即runTasks\n\n每个Worker NioEventLoop循环执行的步骤：\n\n*   轮询read/write事件\n\n*   处理IO事件，在对应的NIoSocketChannel 上进行处理\n\n*   处理任务队列的任务，即runTasks\n\n每个Worker NioEventLoop处理业务时，会通过pipeline（管道），pipeline中包含了channel，管道中维护了很多的处理器。\n\n通过调整线程池的线程个数、是否共享线程池等方式，Netty的Reactor线程模型可以在单线程、多线程和主从线程模型之间切换，这种灵活配置方式可以最大程度满足不同用户的个性化定制。\n\n为了尽可能提升性能，Netty在很大地方进行了无锁化设计，例如在I/O线程内部进行串行操作，避免多线程竞争导致的性能下降问题。表面上看，串行设计似乎CPU利用率不高，并发程度不够，但是通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列多个工作线程的模型更优。\n\nNetty的NioEventLoop读取到消息之后，直接调用ChannelPipeline的fireChannelRead(Object msg)。只要用户不主动切换线程，一直都是由NioEventLoop调用用户的Handler，期间不进行线程切换。这种串行化处理方式避免了多线程操作导致的锁的竞争。从性能角度看是最优的。\n\nNetty的NioEventLoop并不是一个纯粹的I/O线程，它除了负责I/O的读写之外，还可以处理以下两类任务：\n\n*   系统Task：通过调用NioEventLoop的execute(Runnable task)方法实现，Netty中有很多系统Task，主要用于：当I/O线程和用户线程同时操作网络资源时，为了防止并发操作导致的锁竞争，将用户线程的操作封装成Task放入消息队列中，由I/O线程负责执行，这样就实现了无锁化。\n\n*   定时Task：通过调用NioEventLoop的schedule(Runnable command, long delay, TimeUnit unit)方法实现\n\n## Netty线程模型最佳实践\n\n*   创建两个NioEventLoopGroup，用于逻辑分离NIO Acceptor和NIO I/O线程\n\n    NioEventLoopGroup bossGroup = new NioEventLoopGroup();&#x20;\n\n    NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n\n    复制代码\n\nBossGroup和WorkerGroup的线程（NioEventLoop）数量：默认是CPU核心数的两倍。\n\n可以通过构造函数传入线程数量指定线程池的线程数量。\n\n*   尽量不要在ChannleHandler中启动用户线程\n\n*   解码要放在NIO线程调用的解码handler中进行，不要切换到用户线程中完成消息的解码\n\n*   如果业务处理逻辑很简单，没有复杂的业务逻辑计算，没有可能会导致线程被阻塞的磁盘操作、数据库操作、网络操作等，可以直接在NIO线程上完成业务逻辑编排，不需要切换到用户线程。\n\n*   如果业务逻辑处理复杂，不要在NIO线程上完成，建议将解码后的POJO消息封装成Task，派发到业务线程池中由业务线程执行，以保证NIO线程尽快被释放，处理其他I/O操作\n\n推荐的线程数量计算公式有两种：\n\n*   公式一：线程数量=（线程总时间/瓶颈资源时间）X 瓶颈资源的线程并行数\n\n*   公式二：QPS=1000/线程总时间 X 线程数\n\n由于用户场景的不同，对于一些复杂的系统，实际上很难计算出最优的线程配置，只能根据测试数据和用户场景，结合公式给出一个相对合理的范围，然后对范围内的数据进行性能测试，选择相对最优值。\n","slug":"EventLoopGroup","published":1,"date":"2022-10-29T05:24:00.642Z","updated":"2022-10-29T05:23:06.450Z","_id":"cl9thabbz0006xotwdbo9fl3v","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#eventloopgroup\">EventLoopGroup</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li><p>  <a href=\"#%E4%B8%89%E7%A7%8Dreactor%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B\">三种Reactor线程模型</a></p>\n</li>\n<li><p>  <a href=\"#netty%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\">Netty线程模型最佳实践</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"EventLoopGroup\"><a href=\"#EventLoopGroup\" class=\"headerlink\" title=\"EventLoopGroup\"></a>EventLoopGroup</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>线程模型是Netty框架的核心，模型设计的好坏决定了框架的性能、并发量和安全性等架构质量。</p>\n<p>Netty的线程模型被精心的设计，既提升了框架的并发性能，又在很大程度避免锁，局部实现了无锁化设计。</p>\n<p>因此这篇文章将介绍Netty的线程模型，看看它的线程模型是如何设计用于支持高并发高性能的。</p>\n<h2 id=\"三种Reactor线程模型\"><a href=\"#三种Reactor线程模型\" class=\"headerlink\" title=\"三种Reactor线程模型\"></a>三种Reactor线程模型</h2><p>提到线程模型，比较经典的是Reactor线程模型，尽管不同的NIO框架对Reactor模型的实现有所差异，但是本质上还是遵循了Reactor的基础线程模型。</p>\n<p><strong>什么是Reactor线程模型？</strong></p>\n<p>Reactor线程模型是对于传统的I/O线程模型的一种优化。</p>\n<p>传统的I/O线程模型采用阻塞I/O来获取输入流数据，并且每个连接都需要独立的线程完成数据的输入、业务处理、数据返回等一个完整的操作链路。这种模型在高并发场景下，有两个比较明显的缺点：</p>\n<ul>\n<li><p>  每个连接都需要创建一个对应线程，线程大量创建占用大量的服务器资源</p>\n</li>\n<li><p>  线程没有数据可读情况下的阻塞会对性能造成很大的影响</p>\n</li>\n</ul>\n<p>Reactor线程模型为了解决这两个问题，提供了以下解决方案：</p>\n<ul>\n<li><p>  基于I/O多路复用：多个客户端连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，通过事件驱动通知应用程序，线程从阻塞状态返回，开始进行业务处理</p>\n</li>\n<li><p>  基于线程池技术减少线程创建：基于线程池，不必再为每一个连接创建线程，将连接完成后的业务处理分配给线程池进行调度</p>\n</li>\n</ul>\n<p><strong>Reactor线程模型图：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d892cee9b44493c987be58a4af86bac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>Reactor线程模型</p>\n<p>Reactor在一个单独的线程中进行，负责监听和分发事件。</p>\n<p>Reactor的两个核心组件：</p>\n<ul>\n<li><p>  EventDispatch：监听和分发事件，分发给适当的处理程序来对IO事件做出反应</p>\n</li>\n<li><p>  handlers是处理程序执行IO事件要完成的实际事件，Reactor 通过调度适当地处理程序来响应I/O事件，处理程序执行非阻塞操作。</p>\n</li>\n</ul>\n<p>有</p>\n<p>Reactor模式使用I/O复用监听事件，收到事件后，分发给某个线程去处理，这也是能进行网络高并发处理的关键。</p>\n<p>Netty的线程模型不是一成不变的，它实际取决于用户的启动参数配置。通过设置不同的启动参数，Netty可以同时支持Reactor单线程模型、多线程模型和主从Reactor多线程模型。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa5766f4f69443ffa74fc932f9c03369~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>Netty线程模型</p>\n<p>netty线程模型抽象出两组线程池：</p>\n<ul>\n<li><p>  BossGroup：专门负责接收客户端的连接</p>\n</li>\n<li><p>  WorkerGroup：专门负责网络的读写，业务处理</p>\n</li>\n</ul>\n<p>两者的类型都是NioEventLoopGroup，NioEventLoopGroup相当于一个事件循环组，这个组中有多个事件循环，每个事件循环是NioEventLoop。</p>\n<p>NioEventLoop表示一个不断循环的执行处理任务的线程，每个NioEventLoop都有一个selector，用于监听绑定在其上的socket网络通信。</p>\n<p>NioEventLoopGroup可以有多个线程，即可以有多个NioEventLoop（数量可以指定）</p>\n<p>每个Boss NioEventLoop执行的步骤：</p>\n<ul>\n<li><p>  轮询accept事件</p>\n</li>\n<li><p>  处理accept事件，与client事件建立连接，生成NIoSocketChannel，并将其注册到某个worker NIoEventLoop上的selector上</p>\n</li>\n<li><p>  处理任务队列的任务，即runTasks</p>\n</li>\n</ul>\n<p>每个Worker NioEventLoop循环执行的步骤：</p>\n<ul>\n<li><p>  轮询read/write事件</p>\n</li>\n<li><p>  处理IO事件，在对应的NIoSocketChannel 上进行处理</p>\n</li>\n<li><p>  处理任务队列的任务，即runTasks</p>\n</li>\n</ul>\n<p>每个Worker NioEventLoop处理业务时，会通过pipeline（管道），pipeline中包含了channel，管道中维护了很多的处理器。</p>\n<p>通过调整线程池的线程个数、是否共享线程池等方式，Netty的Reactor线程模型可以在单线程、多线程和主从线程模型之间切换，这种灵活配置方式可以最大程度满足不同用户的个性化定制。</p>\n<p>为了尽可能提升性能，Netty在很大地方进行了无锁化设计，例如在I/O线程内部进行串行操作，避免多线程竞争导致的性能下降问题。表面上看，串行设计似乎CPU利用率不高，并发程度不够，但是通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列多个工作线程的模型更优。</p>\n<p>Netty的NioEventLoop读取到消息之后，直接调用ChannelPipeline的fireChannelRead(Object msg)。只要用户不主动切换线程，一直都是由NioEventLoop调用用户的Handler，期间不进行线程切换。这种串行化处理方式避免了多线程操作导致的锁的竞争。从性能角度看是最优的。</p>\n<p>Netty的NioEventLoop并不是一个纯粹的I/O线程，它除了负责I/O的读写之外，还可以处理以下两类任务：</p>\n<ul>\n<li><p>  系统Task：通过调用NioEventLoop的execute(Runnable task)方法实现，Netty中有很多系统Task，主要用于：当I/O线程和用户线程同时操作网络资源时，为了防止并发操作导致的锁竞争，将用户线程的操作封装成Task放入消息队列中，由I/O线程负责执行，这样就实现了无锁化。</p>\n</li>\n<li><p>  定时Task：通过调用NioEventLoop的schedule(Runnable command, long delay, TimeUnit unit)方法实现</p>\n</li>\n</ul>\n<h2 id=\"Netty线程模型最佳实践\"><a href=\"#Netty线程模型最佳实践\" class=\"headerlink\" title=\"Netty线程模型最佳实践\"></a>Netty线程模型最佳实践</h2><ul>\n<li><p>创建两个NioEventLoopGroup，用于逻辑分离NIO Acceptor和NIO I/O线程</p>\n<p>  NioEventLoopGroup bossGroup = new NioEventLoopGroup();&#x20;</p>\n<p>  NioEventLoopGroup workerGroup = new NioEventLoopGroup();</p>\n<p>  复制代码</p>\n</li>\n</ul>\n<p>BossGroup和WorkerGroup的线程（NioEventLoop）数量：默认是CPU核心数的两倍。</p>\n<p>可以通过构造函数传入线程数量指定线程池的线程数量。</p>\n<ul>\n<li><p>  尽量不要在ChannleHandler中启动用户线程</p>\n</li>\n<li><p>  解码要放在NIO线程调用的解码handler中进行，不要切换到用户线程中完成消息的解码</p>\n</li>\n<li><p>  如果业务处理逻辑很简单，没有复杂的业务逻辑计算，没有可能会导致线程被阻塞的磁盘操作、数据库操作、网络操作等，可以直接在NIO线程上完成业务逻辑编排，不需要切换到用户线程。</p>\n</li>\n<li><p>  如果业务逻辑处理复杂，不要在NIO线程上完成，建议将解码后的POJO消息封装成Task，派发到业务线程池中由业务线程执行，以保证NIO线程尽快被释放，处理其他I/O操作</p>\n</li>\n</ul>\n<p>推荐的线程数量计算公式有两种：</p>\n<ul>\n<li><p>  公式一：线程数量=（线程总时间/瓶颈资源时间）X 瓶颈资源的线程并行数</p>\n</li>\n<li><p>  公式二：QPS=1000/线程总时间 X 线程数</p>\n</li>\n</ul>\n<p>由于用户场景的不同，对于一些复杂的系统，实际上很难计算出最优的线程配置，只能根据测试数据和用户场景，结合公式给出一个相对合理的范围，然后对范围内的数据进行性能测试，选择相对最优值。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#eventloopgroup\">EventLoopGroup</a></p>\n<ul>\n<li><p>  <a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li><p>  <a href=\"#%E4%B8%89%E7%A7%8Dreactor%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B\">三种Reactor线程模型</a></p>\n</li>\n<li><p>  <a href=\"#netty%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\">Netty线程模型最佳实践</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"EventLoopGroup\"><a href=\"#EventLoopGroup\" class=\"headerlink\" title=\"EventLoopGroup\"></a>EventLoopGroup</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>线程模型是Netty框架的核心，模型设计的好坏决定了框架的性能、并发量和安全性等架构质量。</p>\n<p>Netty的线程模型被精心的设计，既提升了框架的并发性能，又在很大程度避免锁，局部实现了无锁化设计。</p>\n<p>因此这篇文章将介绍Netty的线程模型，看看它的线程模型是如何设计用于支持高并发高性能的。</p>\n<h2 id=\"三种Reactor线程模型\"><a href=\"#三种Reactor线程模型\" class=\"headerlink\" title=\"三种Reactor线程模型\"></a>三种Reactor线程模型</h2><p>提到线程模型，比较经典的是Reactor线程模型，尽管不同的NIO框架对Reactor模型的实现有所差异，但是本质上还是遵循了Reactor的基础线程模型。</p>\n<p><strong>什么是Reactor线程模型？</strong></p>\n<p>Reactor线程模型是对于传统的I/O线程模型的一种优化。</p>\n<p>传统的I/O线程模型采用阻塞I/O来获取输入流数据，并且每个连接都需要独立的线程完成数据的输入、业务处理、数据返回等一个完整的操作链路。这种模型在高并发场景下，有两个比较明显的缺点：</p>\n<ul>\n<li><p>  每个连接都需要创建一个对应线程，线程大量创建占用大量的服务器资源</p>\n</li>\n<li><p>  线程没有数据可读情况下的阻塞会对性能造成很大的影响</p>\n</li>\n</ul>\n<p>Reactor线程模型为了解决这两个问题，提供了以下解决方案：</p>\n<ul>\n<li><p>  基于I/O多路复用：多个客户端连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，通过事件驱动通知应用程序，线程从阻塞状态返回，开始进行业务处理</p>\n</li>\n<li><p>  基于线程池技术减少线程创建：基于线程池，不必再为每一个连接创建线程，将连接完成后的业务处理分配给线程池进行调度</p>\n</li>\n</ul>\n<p><strong>Reactor线程模型图：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d892cee9b44493c987be58a4af86bac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>Reactor线程模型</p>\n<p>Reactor在一个单独的线程中进行，负责监听和分发事件。</p>\n<p>Reactor的两个核心组件：</p>\n<ul>\n<li><p>  EventDispatch：监听和分发事件，分发给适当的处理程序来对IO事件做出反应</p>\n</li>\n<li><p>  handlers是处理程序执行IO事件要完成的实际事件，Reactor 通过调度适当地处理程序来响应I/O事件，处理程序执行非阻塞操作。</p>\n</li>\n</ul>\n<p>有</p>\n<p>Reactor模式使用I/O复用监听事件，收到事件后，分发给某个线程去处理，这也是能进行网络高并发处理的关键。</p>\n<p>Netty的线程模型不是一成不变的，它实际取决于用户的启动参数配置。通过设置不同的启动参数，Netty可以同时支持Reactor单线程模型、多线程模型和主从Reactor多线程模型。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa5766f4f69443ffa74fc932f9c03369~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>Netty线程模型</p>\n<p>netty线程模型抽象出两组线程池：</p>\n<ul>\n<li><p>  BossGroup：专门负责接收客户端的连接</p>\n</li>\n<li><p>  WorkerGroup：专门负责网络的读写，业务处理</p>\n</li>\n</ul>\n<p>两者的类型都是NioEventLoopGroup，NioEventLoopGroup相当于一个事件循环组，这个组中有多个事件循环，每个事件循环是NioEventLoop。</p>\n<p>NioEventLoop表示一个不断循环的执行处理任务的线程，每个NioEventLoop都有一个selector，用于监听绑定在其上的socket网络通信。</p>\n<p>NioEventLoopGroup可以有多个线程，即可以有多个NioEventLoop（数量可以指定）</p>\n<p>每个Boss NioEventLoop执行的步骤：</p>\n<ul>\n<li><p>  轮询accept事件</p>\n</li>\n<li><p>  处理accept事件，与client事件建立连接，生成NIoSocketChannel，并将其注册到某个worker NIoEventLoop上的selector上</p>\n</li>\n<li><p>  处理任务队列的任务，即runTasks</p>\n</li>\n</ul>\n<p>每个Worker NioEventLoop循环执行的步骤：</p>\n<ul>\n<li><p>  轮询read/write事件</p>\n</li>\n<li><p>  处理IO事件，在对应的NIoSocketChannel 上进行处理</p>\n</li>\n<li><p>  处理任务队列的任务，即runTasks</p>\n</li>\n</ul>\n<p>每个Worker NioEventLoop处理业务时，会通过pipeline（管道），pipeline中包含了channel，管道中维护了很多的处理器。</p>\n<p>通过调整线程池的线程个数、是否共享线程池等方式，Netty的Reactor线程模型可以在单线程、多线程和主从线程模型之间切换，这种灵活配置方式可以最大程度满足不同用户的个性化定制。</p>\n<p>为了尽可能提升性能，Netty在很大地方进行了无锁化设计，例如在I/O线程内部进行串行操作，避免多线程竞争导致的性能下降问题。表面上看，串行设计似乎CPU利用率不高，并发程度不够，但是通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列多个工作线程的模型更优。</p>\n<p>Netty的NioEventLoop读取到消息之后，直接调用ChannelPipeline的fireChannelRead(Object msg)。只要用户不主动切换线程，一直都是由NioEventLoop调用用户的Handler，期间不进行线程切换。这种串行化处理方式避免了多线程操作导致的锁的竞争。从性能角度看是最优的。</p>\n<p>Netty的NioEventLoop并不是一个纯粹的I/O线程，它除了负责I/O的读写之外，还可以处理以下两类任务：</p>\n<ul>\n<li><p>  系统Task：通过调用NioEventLoop的execute(Runnable task)方法实现，Netty中有很多系统Task，主要用于：当I/O线程和用户线程同时操作网络资源时，为了防止并发操作导致的锁竞争，将用户线程的操作封装成Task放入消息队列中，由I/O线程负责执行，这样就实现了无锁化。</p>\n</li>\n<li><p>  定时Task：通过调用NioEventLoop的schedule(Runnable command, long delay, TimeUnit unit)方法实现</p>\n</li>\n</ul>\n<h2 id=\"Netty线程模型最佳实践\"><a href=\"#Netty线程模型最佳实践\" class=\"headerlink\" title=\"Netty线程模型最佳实践\"></a>Netty线程模型最佳实践</h2><ul>\n<li><p>创建两个NioEventLoopGroup，用于逻辑分离NIO Acceptor和NIO I/O线程</p>\n<p>  NioEventLoopGroup bossGroup = new NioEventLoopGroup();&#x20;</p>\n<p>  NioEventLoopGroup workerGroup = new NioEventLoopGroup();</p>\n<p>  复制代码</p>\n</li>\n</ul>\n<p>BossGroup和WorkerGroup的线程（NioEventLoop）数量：默认是CPU核心数的两倍。</p>\n<p>可以通过构造函数传入线程数量指定线程池的线程数量。</p>\n<ul>\n<li><p>  尽量不要在ChannleHandler中启动用户线程</p>\n</li>\n<li><p>  解码要放在NIO线程调用的解码handler中进行，不要切换到用户线程中完成消息的解码</p>\n</li>\n<li><p>  如果业务处理逻辑很简单，没有复杂的业务逻辑计算，没有可能会导致线程被阻塞的磁盘操作、数据库操作、网络操作等，可以直接在NIO线程上完成业务逻辑编排，不需要切换到用户线程。</p>\n</li>\n<li><p>  如果业务逻辑处理复杂，不要在NIO线程上完成，建议将解码后的POJO消息封装成Task，派发到业务线程池中由业务线程执行，以保证NIO线程尽快被释放，处理其他I/O操作</p>\n</li>\n</ul>\n<p>推荐的线程数量计算公式有两种：</p>\n<ul>\n<li><p>  公式一：线程数量=（线程总时间/瓶颈资源时间）X 瓶颈资源的线程并行数</p>\n</li>\n<li><p>  公式二：QPS=1000/线程总时间 X 线程数</p>\n</li>\n</ul>\n<p>由于用户场景的不同，对于一些复杂的系统，实际上很难计算出最优的线程配置，只能根据测试数据和用户场景，结合公式给出一个相对合理的范围，然后对范围内的数据进行性能测试，选择相对最优值。</p>\n"},{"layout":"tags","title":"java","date":"2022-10-29T06:10:50.000Z","_content":"","source":"_posts/java.md","raw":"---\nlayout: tags\ntitle: java\ndate: 2022-10-29 14:10:50\ntags:\n---\n","slug":"java","published":1,"updated":"2022-10-29T06:10:50.779Z","comments":1,"photos":[],"link":"","_id":"cl9tiyy7a00000otwa3ms559k","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}